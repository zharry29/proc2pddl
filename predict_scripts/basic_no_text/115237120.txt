(:action go
    :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
    :precondition (and 
                        (at ?player ?loc1)
                        (connected ?loc1 ?dir ?loc2)
                        (not (blocked ?loc1 ?dir ?loc2))
                  )
    :effect (and
                  (not (at ?player ?loc1))
                  (at ?player ?loc2)
            )
)

(:action get
    :parameters (?player - player ?item - item ?loc - location)
    :precondition (and
                           (at ?player ?loc)
                           (at ?item ?loc)
                           (gettable ?item)
                   )
    :effect (and
                   (not (at ?item ?loc))
                   (inventory ?player ?item)
             )
)

(:action drop
    :parameters (?player - player ?item - item ?loc - location)
    :precondition (and
                           (at ?player ?loc)
                           (inventory ?player ?item)
                     )
    :effect (and
                  (not (inventory ?player ?item))
                  (at ?item ?loc)
            )
)

(:action get_water
    :parameters (?player - player ?water - water ?loc - location)
    :precondition (and
                           (at ?player ?loc)
                           (has_water_source ?loc)
                           (not (treated ?water))
                    )
    :effect (and
                  (inventory ?player ?water)
            )
)

(:action boil_water
    :parameters (?player - player ?water - water ?pot - pot)
    :precondition (and
                            (inventory ?player ?water)
                            (inventory ?player ?pot)
                            (not (treated ?water))
                    )
    :effect (and
                   (treated ?water)
             )
)

(:action collect_rain_water
    :parameters (?player - player ?water - water ?loc - location)
    :precondition (and
                          (at ?player ?loc)
                          (outdoors ?loc)
                          (not (treated ?water))
                    )
    :effect (and
                   (inventory ?player ?water)
             )
)

(:action loot_shelter
    :parameters (?player - player ?food - food ?loc - location)
    :precondition (and
                          (at ?player ?loc)
                          (is_occupied ?loc)
                          (outdoors ?loc)
                   )
    :effect (and
                  (inventory ?player ?food)
            )
)

(:action break_car_window
    :parameters (?player - player ?food - food ?car - car)
    :precondition (and
                           (at ?player ?car)
                           (has_windows ?car)
                    )
    :effect (and
                   (inventory ?player ?food)
             )
)

(:action gofish
    :parameters (?player - player ?fishingpole - fishingpole ?loc - location ?fish - fish)
    :precondition (and
                           (at ?player ?loc)
                           (haslake ?loc)
                           (inventory ?player ?fishingpole)
                    )
    :effect (and
                  (inventory ?player ?fish)
            )
)

(:action find_shelter
    :parameters (?player - player ?loc - location)
    :precondition (and
                           (at ?player ?loc)
                           (has_basement ?loc)
                   )
    :effect (and
                  (in_shelter ?player)
            )
)

(:action clean_wound
    :parameters (?player - player ?bandage - bandage)
    :precondition (and
                           (is_injured ?player)
                           (inventory ?player ?bandage)
                    )
    :effect (and
                  (not (is_injured ?player))
            )
)

(:action clean_others_wound
    :parameters (?player1 - player ?player2 - player ?bandage - bandage)
    :precondition (and
                           (is_injured ?player2)
                           (inventory ?player1 ?bandage)
                    )
    :effect (and
                  (not (is_injured ?player2))
            )
)

(:action barter_food_for_healing
    :parameters (?player1 - player ?player2 - player ?food - food)
    :precondition (and
                              (is_injured ?player2)
                              (inventory ?player1 ?food)
                     )
    :effect (and
                   (not (inventory ?player1 ?food))
                   (inventory ?player2 ?food)
               (not (is_injured ?player2))
             )
)

)