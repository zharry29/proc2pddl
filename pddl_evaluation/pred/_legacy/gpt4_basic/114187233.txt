(:action go
   :parameters (?player - player ?loc1 - location ?dir - direction ?loc2 - location)
   :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
   :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)

(:action get
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (at ?player ?loc) (at ?item ?loc) (not (wrapped ?item)))
   :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action drop
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (at ?player ?loc) (inventory ?player ?item))
   :effect (and (not (inventory ?player ?item)) (at ?item ?loc))
)

(:action pierce
   :parameters (?player - player ?item - item)
   :precondition (and (inventory ?player ?item) (not (pierced ?item)))
   :effect (pierced ?item)
)

(:action drain
   :parameters (?player - player ?item - item)
   :precondition (and (inventory ?player ?item) (pierced ?item) (not (empty ?item)))
   :effect (empty ?item)
)

(:action turn_on_oven
   :parameters (?player - player ?appliance - appliance)
   :precondition (and (at ?player ?appliance) (not (on ?appliance)))
   :effect (on ?appliance)
)

(:action burn_item
   :parameters (?player - player ?item - item ?appliance - appliance)
   :precondition (and (inventory ?player ?item) (on ?appliance) (not (burnt ?item)))
   :effect (burnt ?item)
)

(:action turn_off_oven
   :parameters (?player - player ?appliance - appliance)
   :precondition (and (at ?player ?appliance) (on ?appliance))
   :effect (not (on ?appliance))
)

(:action wrap_coconut
   :parameters (?player - player ?item - item ?wrap - item)
   :precondition (and (inventory ?player ?item) (inventory ?player ?wrap) (not (wrapped ?item)))
   :effect (and (wrapped ?item) (wrapped_with ?item ?wrap))
)

(:action unwrap_coconut
   :parameters (?player - player ?item - item ?wrap - item)
   :precondition (and (inventory ?player ?item) (inventory ?player ?wrap) (wrapped ?item) (wrapped_with ?item ?wrap))
   :effect (and (not (wrapped ?item)) (not (wrapped_with ?item ?wrap)))
)

(:action smash_with_hands
   :parameters (?player - player ?item - item)
   :precondition (and (inventory ?player ?item) (not (smashed ?item)))
   :effect (smashed ?item)
)

(:action separate
   :parameters (?item1 - item ?item2 - item)
   :precondition (and (wrapped_with ?item1 ?item2) (smashed ?item2))
   :effect (not (wrapped_with ?item1 ?item2))
)

(:action peel
   :parameters (?player - player ?item - item)
   :precondition (and (inventory ?player ?item) (not (peeled ?item)))
   :effect (peeled ?item)
)

(:action smash_with_mallet
   :parameters (?player - player ?item - item ?mallet - item)
   :precondition (and (inventory ?player ?item) (inventory ?player ?mallet) (not (smashed ?item)))
   :effect (smashed ?item)
)

)