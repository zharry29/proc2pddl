(:action go
   :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
   :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)


(:action get
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (at ?player ?loc) (at ?item ?loc) (not (inventory ?player ?item)))
   :effect (inventory ?player ?item)
)


(:action get_water
   :parameters (?player - player ?loc - location ?water - water)
   :precondition (and (at ?player ?loc) (has_water_source ?loc))
   :effect (inventory ?player ?water)
)


(:action drop
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (at ?player ?loc) (inventory ?player ?item))
   :effect (and (not (inventory ?player ?item)) (at ?item ?loc))
)


(:action clear_spider
   :parameters (?player - player ?item - item)
   :precondition (and (inventory ?player ?item) (has_bug ?item))
   :effect (not (has_bug ?item))
)


(:action insert_beam
   :parameters (?player - player ?beam - beam ?tree1 - tree ?tree2 - tree)
   :precondition (and (at ?player (and ?tree1 ?tree2)) (has_split_in_trunk ?tree1) (has_split_in_trunk ?tree2) (inventory ?player ?beam) (long ?beam) (thick ?beam))
   :effect (and (at ?beam (and ?tree1 ?tree2)))
)


(:action lean_branches
   :parameters (?player - player ?branches - branches ?frame - frame ?beam - beam)
   :precondition (and (at ?player ?frame) (at ?beam ?frame) (inventory ?player ?branches))
   :effect (and (at ?branches ?frame))
)


(:action layer
   :parameters (?player - player ?shelter - shelter ?frame - frame ?twigs - twigs ?leaves - leaves)
   :precondition (and (at ?player ?shelter) (not (has_bug ?twigs)) (not (has_bug ?leaves)) (inventory ?player (and ?twigs ?leaves)) (at ?frame ?shelter))
   :effect ()
)


(:action wash
   :parameters (?player - player ?item - item ?water - water)
   :precondition (and (inventory ?player (and ?item ?water)) (unwashed ?item) (not (treated ?water)))
   :effect (not (unwashed ?item))
)


(:action eat
   :parameters (?player - player ?item - item)
   :precondition (and (inventory ?player ?item) (edible ?item) (not (unwashed ?item)) (hungry ?player))
   :effect (not (hungry ?player))
)


(:action make_snare
   :parameters (?player - player ?snare - snare ?wire - wire)
   :precondition (and (inventory ?player ?wire) (not (hanged ?snare)))
   :effect (hanged ?snare)
)


(:action make_horizontal_bar
   :parameters (?player - player ?bar - bar ?branch - branch)
   :precondition (and (inventory ?player ?branch) (long ?branch) (thick ?branch))
   :effect (at ?bar (and ?branch))
)


(:action hang_snare
   :parameters (?player - player ?snare - snare ?bar - bar)
   :precondition (and (inventory ?player ?snare) (at ?bar (and (made_by_animal ?loc))))
   :effect (hanged ?snare)
)

)