- action name: go
- summarize action: The player moves from one location to another in a specific direction.
- what is needed to do the action: The player is at a current location and wants to move to another location in a specific direction.
- what is the result: The player is at the new location.

- entities:
  - entity name: player
    - before: at current location
    - after: at new location
  - entity name: direction
  - entity name: current location
  - entity name: new location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the current location (at ?player ?current_loc)
2. Check if the current location is connected to the new location (connected ?current_loc ?direction ?new_loc)
3. Move the player to the new location (at ?player ?new_loc)
4. Remove the player from the current location (not (at ?player ?current_loc))

pddl:
(:action go
  :parameters (?player - player ?current_loc ?new_loc - location ?direction - direction)
  :precondition (and (at ?player ?current_loc) (connected ?current_loc ?direction ?new_loc))
  :effect (and (at ?player ?new_loc) (not (at ?player ?current_loc))))

- action name: get
- summarize action: The player picks up an item from a location.
- what is needed to do the action: The player is at a location and the item is at the same location.
- what is the result: The item is in the player's inventory.

- entities:
  - entity name: player
  - entity name: item
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the item is at the location (at ?item ?location)
3. Add the item to the player's inventory (inventory ?player ?item)
4. Remove the item from the location (not (at ?item ?location))

pddl:
(:action get
  :parameters (?player - player ?item - item ?location - location)
  :precondition (and (at ?player ?location) (at ?item ?location))
  :effect (and (inventory ?player ?item) (not (at ?item ?location))))

- action name: get_water
- summarize action: The player finds a water source and collects water from it.
- what is needed to do the action: The player is at a location with a water source.
- what is the result: The player has water in their inventory.

- entities:
  - entity name: player
  - entity name: water
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the location has a water source (has_water_source ?location)
3. Add water to the player's inventory (inventory ?player ?water)

pddl:
(:action get_water
  :parameters (?player - player ?water - water ?location - location)
  :precondition (and (at ?player ?location) (has_water_source ?location))
  :effect (inventory ?player ?water))

- action name: sharpen_stick
- summarize action: The player sharpens a stick to use as a tool.
- what is needed to do the action: The player has an unsharpened stick in their inventory.
- what is the result: The player has a sharpened stick in their inventory.

- entities:
  - entity name: player
  - entity name: unsharpened_stick
  - entity name: sharpened_stick

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player has an unsharpened stick in their inventory (inventory ?player ?unsharpened_stick)
2. Remove the unsharpened stick from the player's inventory (not (inventory ?player ?unsharpened_stick))
3. Add a sharpened stick to the player's inventory (inventory ?player ?sharpened_stick)

pddl:
(:action sharpen_stick
  :parameters (?player - player ?unsharpened_stick ?sharpened_stick - stick)
  :precondition (inventory ?player ?unsharpened_stick)
  :effect (and (not (inventory ?player ?unsharpened_stick)) (inventory ?player ?sharpened_stick)))

- action name: catch_fish
- summarize action: The player uses a sharpened stick to catch fish at a location.
- what is needed to do the action: The player has a sharpened stick, and they are at a location with fish.
- what is the result: The player has fish in their inventory.

- entities:
  - entity name: player
  - entity name: sharpened_stick
  - entity name: fish
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player has a sharpened stick in their inventory (inventory ?player ?sharpened_stick)
2. Check if the player is at the location (at ?player ?location)
3. Check if the location has fish (has_fish ?location)
4. Add fish to the player's inventory (inventory ?player ?fish)

pddl:
(:action catch_fish
  :parameters (?player - player ?sharpened_stick - stick ?fish - fish ?location - location)
  :precondition (and (inventory ?player ?sharpened_stick) (at ?player ?location) (has_fish ?location))
  :effect (inventory ?player ?fish))
- action name: hunt_bird
- summarize action: The player uses a sharpened stick to hunt birds at a location.
- what is needed to do the action: The player has a sharpened stick, and they are at a location with birds.
- what is the result: The player has a bird in their inventory.

- entities:
  - entity name: player
  - entity name: sharpened_stick
  - entity name: bird
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player has a sharpened stick in their inventory (inventory ?player ?sharpened_stick)
2. Check if the player is at the location (at ?player ?location)
3. Check if the location has birds (has_bird ?location)
4. Add a bird to the player's inventory (inventory ?player ?bird)

pddl:
(:action hunt_bird
  :parameters (?player - player ?sharpened_stick - stick ?bird - bird ?location - location)
  :precondition (and (inventory ?player ?sharpened_stick) (at ?player ?location) (has_bird ?location))
  :effect (inventory ?player ?bird))

- action name: hunt_insect
- summarize action: The player catches insects at a location.
- what is needed to do the action: The player is at a location with insects.
- what is the result: The player has insects in their inventory.

- entities:
  - entity name: player
  - entity name: insect
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the location has insects (has_insect ?location)
3. Add insects to the player's inventory (inventory ?player ?insect)

pddl:
(:action hunt_insect
  :parameters (?player - player ?insect - insect ?location - location)
  :precondition (and (at ?player ?location) (has_insect ?location))
  :effect (inventory ?player ?insect))

- action name: get_shellfish
- summarize action: The player collects shellfish at a location.
- what is needed to do the action: The player is at a location with shellfish.
- what is the result: The player has shellfish in their inventory.

- entities:
  - entity name: player
  - entity name: shellfish
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the location has shellfish (has_shellfish ?location)
3. Add shellfish to the player's inventory (inventory ?player ?shellfish)

pddl:
(:action get_shellfish
  :parameters (?player - player ?shellfish - shellfish ?location - location)
  :precondition (and (at ?player ?location) (has_shellfish ?location))
  :effect (inventory ?player ?shellfish))

- action name: cook
- summarize action: The player cooks food at a location with fire.
- what is needed to do the action: The player is at a location with fire and has food in their inventory.
- what is the result: The player has cooked food in their inventory.

- entities:
  - entity name: player
  - entity name: food
  - entity name: cooked_food
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the location has fire (has_fire ?location)
3. Check if the player has food in their inventory (inventory ?player ?food)
4. Remove the food from the player's inventory (not (inventory ?player ?food))
5. Add cooked food to the player's inventory (inventory ?player ?cooked_food)

pddl:
(:action cook
  :parameters (?player - player ?food ?cooked_food - item ?location - location)
  :precondition (and (at ?player ?location) (has_fire ?location) (inventory ?player ?food))
  :effect (and (not (inventory ?player ?food)) (inventory ?player ?cooked_food)))

- action name: get_stick
- summarize action: The player collects a stick at a location.
- what is needed to do the action: The player is at a location with sticks.
- what is the result: The player has a stick in their inventory.

- entities:
  - entity name: player
  - entity name: stick
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the location has sticks (at ?stick ?location)
3. Add a stick to the player's inventory (inventory ?player ?stick)

pddl:
(:action get_stick
  :parameters (?player - player ?stick - stick ?location - location)
  :precondition (and (at ?player ?location) (at ?stick ?location))
  :effect (inventory ?player ?stick))
- action name: start_fire
- summarize action: The player starts a fire at a location using a stick.
- what is needed to do the action: The player is at a location and has a stick in their inventory.
- what is the result: A fire is started at the location.

- entities:
  - entity name: player
  - entity name: stick
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the player has a stick in their inventory (inventory ?player ?stick)
3. Start a fire at the location (has_fire ?location)

pddl:
(:action start_fire
  :parameters (?player - player ?stick - stick ?location - location)
  :precondition (and (at ?player ?location) (inventory ?player ?stick))
  :effect (has_fire ?location))

- action name: get_tarp
- summarize action: The player finds a tarp at a location.
- what is needed to do the action: The player is at a location with a tarp.
- what is the result: The player has a tarp in their inventory.

- entities:
  - entity name: player
  - entity name: tarp
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the location has a tarp (at ?tarp ?location)
3. Add a tarp to the player's inventory (inventory ?player ?tarp)

pddl:
(:action get_tarp
  :parameters (?player - player ?tarp - tarp ?location - location)
  :precondition (and (at ?player ?location) (at ?tarp ?location))
  :effect (inventory ?player ?tarp))

- action name: get_leave
- summarize action: The player collects leaves at a location.
- what is needed to do the action: The player is at a location with leaves.
- what is the result: The player has leaves in their inventory.

- entities:
  - entity name: player
  - entity name: leave
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the location has leaves (at ?leave ?location)
3. Add leaves to the player's inventory (inventory ?player ?leave)

pddl:
(:action get_leave
  :parameters (?player - player ?leave - leave ?location - location)
  :precondition (and (at ?player ?location) (at ?leave ?location))
  :effect (inventory ?player ?leave))

- action name: construct_shelter
- summarize action: The player constructs a shelter at a location using leaves and sticks.
- what is needed to do the action: The player is at a location and has leaves and sticks in their inventory.
- what is the result: The location becomes sheltered.

- entities:
  - entity name: player
  - entity name: leave
  - entity name: stick
  - entity name: location

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is at the location (at ?player ?location)
2. Check if the player has leaves in their inventory (inventory ?player ?leave)
3. Check if the player has sticks in their inventory (inventory ?player ?stick)
4. Make the location sheltered (sheltered ?location)

pddl:
(:action construct_shelter
  :parameters (?player - player ?leave ?stick - item ?location - location)
  :precondition (and (at ?player ?location) (inventory ?player ?leave) (inventory ?player ?stick))
  :effect (sheltered ?location))