(:action go
 :parameters (?player - player ?start - location ?dir - direction ?dest - location)
 :precondition (and (at ?player ?start) (connected ?start ?dir ?dest) (not (blocked ?start ?dir ?dest)))
 :effect (and (not (at ?player ?start)) (at ?player ?dest))
)

(:action get
 :parameters (?player - player ?item - item ?loc - location)
 :precondition (and (at ?player ?loc) (at ?item ?loc))
 :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action get_bamboo_container
 :parameters (?player - player ?loc - location)
 :precondition (and (at ?player ?loc) (has_bamboo ?loc))
 :effect (and (not (has_bamboo ?loc)) (inventory ?player bamboo_container))
)

(:action collect_rain_water
 :parameters (?player - player ?loc - location)
 :precondition (and (at ?player ?loc) (has_rainfall ?loc) (inventory ?player bamboo_container))
 :effect (inventory ?player water))

(:action create_fire
 :parameters (?player - player)
 :precondition (and (inventory ?player stone) (inventory ?player wood))
 :effect (and (not (inventory ?player stone)) (not (inventory ?player wood)) (inventory ?player fire))
)

(:action treat_water
 :parameters (?player - player)
 :precondition (and (inventory ?player water) (inventory ?player fire))
 :effect (treated water))

(:action drink_water
 :parameters (?player - player)
 :precondition (and (inventory ?player water) (treated water) (is dehydrated ?player)) 
 :effect (and (not (inventory ?player water)) (not (is dehydrated ?player)))
)

(:action drink_untreated_water
 :parameters (?player - player)
 :precondition (and (inventory ?player water) (not (treated water)) (is dehydrated ?player))
 :effect (and (not (inventory ?player water)) (not (is dehydrated ?player)) (is ill ?player))
)

(:action create_sos_sign
 :parameters (?player - player ?loc - location ?material - item)
 :precondition (and (inventory ?player ?material) (at ?player ?loc))
 :effect (and (not (inventory ?player ?material)) (at SOS_sign ?loc))
)

(:action pick_fruit
 :parameters (?player - player ?loc - location)
 :precondition (and (at ?player ?loc) (has_fruit ?loc))
 :effect (and (not (has_fruit ?loc)) (inventory ?player fruit))
)

(:action eat_fruit
 :parameters (?player - player)
 :precondition (and (inventory ?player fruit) (is hungry ?player)) 
 :effect (and (not (inventory ?player fruit)) (not (is hungry ?player)))
)

(:action escape
 :parameters (?player - player ?loc - location)
 :precondition (and (at ?player ?loc) (at SOS_sign ?loc) (not (is ill ?player)) (not (is dehydrated ?player)) (not (is hungry ?player))) 
 :effect (escaped ?player)
)

)