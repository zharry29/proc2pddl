(:action gather_info
  :parameters (?p - player)
  :precondition (not (has_info ?p))
  :effect (has_info ?p)
)

(:action create_secret
  :parameters (?sc - secret_society)
  :precondition (not (has_secret ?sc))
  :effect (has_secret ?sc)
)

(:action set_meeting_location
  :parameters (?sc - secret_society)
  :precondition (not (has_location ?sc))
  :effect (has_location ?sc)
)

(:action set_dress_code
  :parameters (?sc - secret_society)
  :precondition (not (has_dress_code ?sc))
  :effect (has_dress_code ?sc)
)

(:action create_name
  :parameters (?sc - secret_society)
  :precondition (not (has_name ?sc))
  :effect (has_name ?sc)
)

(:action secret_society_is_ready
  :parameters (?sc - secret_society)
  :precondition (and (has_name ?sc) (has_secret ?sc) (has_location ?sc) (has_dress_code ?sc))
  :effect (society_is_ready ?sc)
)

(:action initiate_new_member
  :parameters (?p - player ?sc - secret_society)
  :precondition (and (is_trusted ?p ?sc) (society_is_ready ?sc) (not (in ?p ?sc)))
  :effect (in ?p ?sc)
)

(:action teach_new_member_secret
  :parameters (?p - player ?sc - secret_society)
  :precondition (and (in ?p ?sc) (is_trusted ?p ?sc) (has_secret ?sc) (not (knows_secret ?p ?sc)))
  :effect (knows_secret ?p ?sc)
)

(:action remove_member
  :parameters (?p - player ?sc - secret_society)
  :precondition (and (in ?p ?sc) (not (is_trusted ?p ?sc)))
  :effect (not (in ?p ?sc))
)

(:action check_if_cult
  :parameters (?sc - secret_society ?p - player)
  :precondition (and (in ?p ?sc) (check-size-against-condition ?sc)) ; check-size-against-condition would be a function to check against a certain condition
  :effect (is_cult ?sc)
)

(:action check_if_cult
  :parameters (?sc - secret_society)
  :precondition (society_is_ready ?sc) ; A ready society can be checked if it's a cult
  :effect (is_cult ?sc) ; This may always be true and it does not necessarily reflect the actual state of being a cult. It would need to be handled appropriately.
)

(:action plan_activity
  :parameters (?sc - secret_society)
  :precondition (society_is_ready ?sc)
  :effect (planned_activity ?sc)
)

(:action enforce_rules
  :parameters (?sc - secret_society)
  :precondition (society_is_ready ?sc)
  :effect (rules_enforced ?sc)
)

(:action transition_leadership
  :parameters (?p - player ?sc - secret_society)
  :precondition (and (society_is_ready ?sc) (is_trusted ?p ?sc))
  :effect (new_leader ?p ?sc)
)

(:action conduct_meeting
  :parameters (?sc - secret_society)
  :precondition (and (society_is_ready ?sc) (has_location ?sc))
  :effect (meeting_conducted ?sc)
)

(:action arrange_surveillance
  :parameters (?sc - secret_society)
  :precondition (society_is_ready ?sc)
  :effect (surveillance_arranged ?sc)
)

(:action recruit_new_members
  :parameters (?p - player ?sc - secret_society)
  :precondition (and (society_is_ready ?sc) (not (in ?p ?sc)))
  :effect (in ?p ?sc)
)

(:action establish_hierarchy
  :parameters (?sc - secret_society)
  :precondition (society_is_ready ?sc)
  :effect (established_hierarchy ?sc)
)

(:action organize_fundraiser
  :parameters (?sc - secret_society)
  :precondition (society_is_ready ?sc)
  :effect (fundraiser_organized ?sc)
)

(:action handle_betrayal
  :parameters (?p - player ?sc - secret_society)
  :precondition (and (in ?p ?sc) (not (is_trusted ?p ?sc)))
  :effect (not (in ?p ?sc))
)

)