(:action go
   :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
   :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)

(:action get
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (at ?player ?loc) (at ?item ?loc) (gettable ?item))
   :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action drop
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (at ?player ?loc) (inventory ?player ?item))
   :effect (and (not (inventory ?player ?item)) (at ?item ?loc))
)

(:action get_water
   :parameters (?player - player ?water - water ?loc - location)
   :precondition (and (at ?player ?loc) (has_water_source ?loc) (not (treated ?water)))
   :effect (inventory ?player ?water)
)

(:action boil_water
   :parameters (?player - player ?water - water ?pot - pot)
   :precondition (and (inventory ?player ?water) (inventory ?player ?pot) (not (treated ?water)))
   :effect (treated ?water)
)

(:action collect_rain_water
   :parameters (?player - player ?water - water ?loc - location)
   :precondition (and (at ?player ?loc) (outdoors ?loc) (not (treated ?water)))
   :effect (inventory ?player ?water)
)

(:action loot_shelter
   :parameters (?player - player ?loc - location)
   :precondition (and (at ?player ?loc) (not (is_occupied ?loc)))
   :effect (forall (?item - item) (and (at ?item ?loc) (inventory ?player ?item)))
)

(:action break_car_window
    :parameters (?player - player ?car - car)
    :precondition (and (at ?player ?car) (has_windows ?car))
    :effect (not (has_windows ?car))
)

(:action gofish
   :parameters (?player - player ?loc - location ?fishingpole - fishingpole)
   :precondition (and (at ?player ?loc) (haslake ?loc) (inventory ?player ?fishingpole))
   :effect (exists (?fish - fish) (inventory ?player ?fish))
)

(:action find_shelter
   :parameters (?player - player ?location - location)
   :precondition (and (at ?player ?location) (in_shelter ?player ?location))
   :effect (in_shelter ?player ?location)
)

(:action clean_wound
   :parameters (?player - player ?water - water ?bandage - bandage)
   :precondition (and (is_injured ?player) (inventory ?player ?water) (treated ?water) (inventory ?player ?bandage))
   :effect (and (not (is_injured ?player)) (not (inventory ?player ?bandage)))
)

(:action clean_others_wound
   :parameters (?player ?other - player ?water - water ?bandage - bandage)
   :precondition (and (is_injured ?other) (inventory ?player ?water) (treated ?water) (inventory ?player ?bandage) (at ?player ?other))
   :effect (and (not (is_injured ?player)) (not (inventory ?player ?bandage)))
)

(:action barter_food_for_healing
   :parameters (?player - player ?other - player ?food - food)
   :precondition (and (inventory ?player ?food) (is_injured ?player))
   :effect (and (not (is_injured ?player)) (not (inventory ?player ?food)))
)

)