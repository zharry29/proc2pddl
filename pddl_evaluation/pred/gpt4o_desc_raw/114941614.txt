Sure, I can help fill out the PDDL actions based on your predicates. Here are the actions in the correct PDDL format:

```pddl
(define (domain survive_jungle)
   (:requirements :strips :typing)

   (:types
      eatable container igniter leaves fuel - item
      sticks - fuel
      water food - eatable
      player location direction
   )

   (:predicates
      (has_water_source ?loc - location) ; this location has a source of fresh water.
      (has_fire ?loc - location); this location has a man-made fire
      (has_tree ?loc - location); there is a tree at this location
      (has_sticks ?loc - location); there are sticks on the ground to be picked up, an infinite supply
      (has_shelter ?loc - location); there is a man-made shelter of sticks and leaves at this location
      (contains ?container - container ?water - water) ; links a container to the water that fills it
      (is_full ?container - container) ; True if the container is full
      (is_contaminated  ?eatable - eatable) ; True if the food is contaminated with bacteria in a way removable by cooking
      (is_poisonous ?eatable - eatable) ; True if the food is poisonous in a way not helped by cooking or killing "live" bacteria
      (is_sick ?p - player) ; True if the player is poisoned by consuming something contaminated or poisonous
      (is_hungry ?p - player) ; True if the player has not consumed food
      (is_thirsty ?p - player) ; True if the player has not consumed water
      (is_tired ?p - player) ; True if the player has not slept
      (at ?obj - object ?loc - location) ; an object is at a location
      (inventory ?player - player ?item - item) ; an item is in the player's inventory
      (connected ?loc1 - location ?dir - direction ?loc2 - location) ; location 1 is connected to location 2 in the direction
      (blocked ?loc1 - location ?dir - direction ?loc2 - location) ; the connection between location 1 and 2 is currently blocked
   )

   (:action go
      :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location)
      :precondition (and 
                      (at ?p ?loc1)
                      (connected ?loc1 ?dir ?loc2)
                      (not (blocked ?loc1 ?dir ?loc2))
                    )
      :effect (and 
                 (at ?p ?loc2)
                 (not (at ?p ?loc1))
              )
   )

   (:action get
      :parameters (?p - player ?item - item ?loc - location)
      :precondition (and 
                      (at ?p ?loc)
                      (at ?item ?loc)
                    )
      :effect (and 
                 (inventory ?p ?item)
                 (not (at ?item ?loc))
              )
   )

   (:action collect_water
      :parameters (?p - player ?loc - location ?container - container)
      :precondition (and 
                      (at ?p ?loc)
                      (inventory ?p ?container)
                      (has_water_source ?loc)
                      (not (is_full ?container))
                    )
      :effect (and 
                 (contains ?container water)
                 (is_full ?container)
              )
   )

   (:action gather_sticks
      :parameters (?p - player ?loc - location)
      :precondition (and 
                      (at ?p ?loc)
                      (has_sticks ?loc)
                    )
      :effect (inventory ?p sticks)
   )

   (:action make_fire
      :parameters (?p - player ?loc - location ?sticks - sticks)
      :precondition (and 
                      (at ?p ?loc)
                      (inventory ?p ?sticks)
                    )
      :effect (and 
                 (has_fire ?loc)
                 (not (inventory ?p ?sticks))
              )
   )

   (:action boil_water
      :parameters (?p - player ?loc - location ?container - container)
      :precondition (and 
                      (at ?p ?loc)
                      (has_fire ?loc)
                      (contains ?container water)
                      (is_contaminated water)
                    )
      :effect (not (is_contaminated water))
   )

   (:action cook_food
      :parameters (?p - player ?loc - location ?eatable - eatable)
      :precondition (and 
                      (at ?p ?loc)
                      (inventory ?p ?eatable)
                      (has_fire ?loc)
                      (is_contaminated ?eatable)
                    )
      :effect (not (is_contaminated ?eatable))
   )

   (:action eat_poisoned_food
      :parameters (?p - player ?food - food)
      :precondition (and 
                      (inventory ?p ?food)
                      (is_poisonous ?food)
                    )
      :effect (and 
                 (not (is_hungry ?p))
                 (is_sick ?p)
                 (not (inventory ?p ?food))
              )
   )

   (:action eat_contaminated_food
      :parameters (?p - player ?food - food)
      :precondition (and 
                      (inventory ?p ?food)
                      (is_contaminated ?food)
                    )
      :effect (and 
                 (not (is_hungry ?p))
                 (is_sick ?p)
                 (not (inventory ?p ?food))
              )
   )

   (:action eat_food
      :parameters (?p - player ?food - food)
      :precondition (and 
                      (inventory ?p ?food)
                      (not (is_contaminated ?food))
                      (not (is_poisonous ?food))
                    )
      :effect (and 
                 (not (is_hungry ?p))
                 (not (inventory ?p ?food))
              )
   )

   (:action drink_contaminated_water
      :parameters (?p - player ?container - container)
      :precondition (and 
                      (inventory ?p ?container)
                      (contains ?container water)
                      (is_contaminated water)
                    )
      :effect (and 
                 (not (is_thirsty ?p))
                 (is_sick ?p)
              )
   )
   
   (:action drink_water
      :parameters (?p - player ?container - container)
      :precondition (and 
                      (inventory ?p ?container)
                      (contains ?container water)
                      (not (is_contaminated water))
                    )
      :effect (not (is_thirsty ?p))
   )

   (:action build_shelter
      :parameters (?p - player ?loc - location ?sticks - sticks ?leaves - leaves)
      :precondition (and 
                      (at ?p ?loc)
                      (inventory ?p ?sticks)
                      (inventory ?p ?leaves)
                    )
      :effect (and 
                 (has_shelter ?loc)
                 (not (inventory ?p ?sticks))
                 (not (inventory ?p ?leaves))
              )
   )

   (:action sleep_in_shelter
      :parameters (?p - player ?loc - location)
      :precondition (and 
                      (at ?p ?loc)
                      (has_shelter ?loc)
                      (is_tired ?p)
                    )
      :effect (not (is_tired ?p))
   )

)
```

This code defines a domain called `survive_jungle` with the required types, predicates, and actions. Each action includes parameters, preconditions, and effects based on your provided predicates.