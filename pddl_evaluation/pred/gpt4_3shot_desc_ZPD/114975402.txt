(:action go
    :parameters (?p - player ?from - location ?dir - direction ?to - location)
    :precondition (and (at ?p ?from) (connected ?from ?dir ?to) (not (blocked ?from ?dir ?to)))
    :effect (and (not (at ?p ?from)) (at ?p ?to))
)

(:action get_bag
    :parameters (?p - player ?l - location ?b - bag)
    :precondition (and (at ?p ?l) (at ?b ?l) (sells_bags ?l))
    :effect (and (not (at ?b ?l)) (inventory ?p ?b))
)

(:action get_stationery
    :parameters (?p - player ?l - location ?s - stationery)
    :precondition (and (at ?p ?l) (at ?s ?l) (sells_stationery ?l))
    :effect (and (not (at ?s ?l)) (inventory ?p ?s))
)

(:action get_costume
    :parameters (?p - player ?l - location ?c - costume)
    :precondition (and (at ?p ?l) (at ?c ?l) (sells_costume ?l))
    :effect (and (not (at ?c ?l)) (inventory ?p ?c))
)

(:action wear_detective_gear
    :parameters (?p - player ?c - costume)
    :precondition (and (inventory ?p ?c))
    :effect (wear ?p ?c)
)

(:action find_supplies_for_disguise
    :parameters (?p - player ?d - disguise ?l - location)
    :precondition (at ?p ?l)
    :effect (inventory ?p ?d)
)

(:action wear_disguise
    :parameters (?p - player ?d - disguise)
    :precondition (and (inventory ?p ?d))
    :effect (wear ?p ?d)
)

(:action make_badge
    :parameters (?p - player ?cardboard - cardboard ?foil - aluminium_foil ?b - badge)
    :precondition (and (inventory ?p ?cardboard) (inventory ?p ?foil))
    :effect (and (not (inventory ?p ?cardboard)) (not (inventory ?p ?foil)) (inventory ?p ?b))
)

(:action prepare_detective_notebook
    :parameters (?p - player ?n - notebook ?dn - detective_notebook)
    :precondition (inventory ?p ?n)
    :effect (and (not (inventory ?p ?n)) (inventory ?p ?dn))
)

(:action get_walkie_talkies
    :parameters (?p - player ?l - location ?w - walkie_talkies)
    :precondition (and (at ?p ?l) (at ?w ?l) (sells_electronics ?l))
    :effect (and (not (at ?w ?l)) (inventory ?p ?w))
)

(:action prepare_detective_kit
    :parameters (?p - player ?stuff - item ?kit - detective_kit)
    :precondition (and (forall (?stuff) (inventory ?p ?stuff)))
    :effect (inventory ?p ?kit)
)

)