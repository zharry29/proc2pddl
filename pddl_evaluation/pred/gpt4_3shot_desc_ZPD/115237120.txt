(:action go
   :parameters (?player - player ?from - location ?dir - direction ?to - location)
   :precondition (and (at ?player ?from) (connected ?from ?dir ?to) (not (blocked ?from ?dir ?to)))
   :effect (and (not (at ?player ?from)) (at ?player ?to))
  )

  (:action get
   :parameters (?player - player ?item - object ?loc - location)
   :precondition (and (at ?player ?loc) (at ?item ?loc) (gettable ?item))
   :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
  )

    (:action drop
     :parameters (?player - player ?item - item ?loc - location)
     :precondition (and (at ?player ?loc) (inventory ?player ?item))
     :effect (and (not (inventory ?player ?item)) (at ?item ?loc))
    )

   (:action get_water
    :parameters (?player - player ?loc - location ?water - water)
    :precondition (and (at ?player ?loc) (has_water_source ?loc))
    :effect (inventory ?player ?water)
   )

    (:action boil_water
     :parameters (?player - player ?water - water ?pot - pot)
     :precondition (and (inventory ?player ?water) (not (treated ?water)) (inventory ?player ?pot) )
     :effect (and (not (inventory ?player ?water)) (treated ?water) (inventory ?player ?water))
    )

    (:action collect_rain_water
     :parameters (?player - player ?loc - location ?rainwater - water ?pot - pot)
     :precondition (and (at ?player ?loc) (outdoors ?loc) (inventory ?player ?pot) )
     :effect (inventory ?player ?rainwater)
    )

   (:action loot_shelter
    :parameters (?player - player ?loc - location ?food - food)
    :precondition (and (at ?player ?loc) (is_occupied ?loc) (at ?food ?loc))
    :effect (and (not (at ?food ?loc)) (inventory ?player ?food))
   )

   (:action break_car_window
    :parameters (?player - player ?car - car ?food - food)
    :precondition (and (at ?player ?car) (has_windows ?car) (at ?food ?car))
    :effect (and (not (has_windows ?car)) (not (at ?food ?car)) (inventory ?player ?food))
   )

   (:action gofish
    :parameters (?player - player ?loc - location ?fishingpole - fishingpole ?fish - fish)
    :precondition (and (at ?player ?loc) (haslake ?loc) (inventory ?player ?fishingpole))
    :effect ((inventory ?player ?fish))
   )

   (:action find_shelter
    :parameters (?player - player ?loc - location)
    :precondition (and (at ?player ?loc) (has_basement ?loc))
    :effect (in_shelter ?player)
   )

   (:action clean_wound
    :parameters (?player - player ?bandage - bandage ?water - water)
    :precondition (and (inventory ?player ?bandage) (inventory ?player ?water) (is_injured ?player))
    :effect (and (not (inventory ?player ?bandage)) (not (inventory ?player ?water)) (not (is_injured ?player)))
   )

   (:action clean_others_wound
    :parameters (?player - player ?otherplayer - player ?bandage - bandage ?water - water)
    :precondition (and (inventory ?player ?bandage) (inventory ?player ?water) (is_injured ?otherplayer))
    :effect (and (not (inventory ?player ?bandage)) (not (inventory ?player ?water)) (not (is_injured ?otherplayer)))
   )

   (:action barter_food_for_healing
    :parameters (?player - player ?food - food ?location - location)
    :precondition (and (inventory ?player ?food) (at ?player ?location) (offers_healing ?location))
    :effect (and (not (inventory ?player ?food)) (inventory ?player healing_resources))
  )

)