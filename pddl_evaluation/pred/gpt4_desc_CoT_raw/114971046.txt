- action name: drive
- summarize action: The player drives from one location to another if there is a connection and they have a car.
- what is needed to do the action: A player, car, starting location, direction, and destination location.
- what is the result: The player is at the destination location, and the car's location does not change.

- entities:
  - entity name: player
    - before: at starting location
    - after: at destination location
  - entity name: car
    - before: in player's inventory, at starting location
    - after: in player's inventory, at destination location

- describe how to match it to pddl relevant predicates step by step:
1. Identify the player is driving and has a car in their inventory.
2. Check if the starting location is connected to destination location in a certain direction.
3. Move the player to the destination location.

pddl:
```
(:action drive
  :parameters (?p - player ?car - item ?start - location ?dir - direction ?end - location)
  :precondition (and (inventory ?p ?car) 
                      (is_car ?car) 
                      (driving ?p)
                      (connected ?start ?dir ?end)
                      (at ?p ?start))
  :effect (and (not (at ?p ?start))
               (at ?p ?end)))
```

- action name: walk
- summarize action: The player walks from one location to another if there is a connection.
- what is needed to do the action: A player, starting location, direction, and destination location.
- what is the result: The player is at the destination location.

- entities:
  - entity name: player
    - before: at starting location
    - after: at destination location

- describe how to match it to pddl relevant predicates step by step:
1. Check if the starting location is connected to destination location in a certain direction.
2. Move the player to the destination location.

pddl:
```
(:action walk
  :parameters (?p - player ?start - location ?dir - direction ?end - location)
  :precondition (and (connected ?start ?dir ?end)
                      (at ?p ?start))
  :effect (and (not (at ?p ?start))
               (at ?p ?end)))
```

I have provided examples for two actions, drive and walk. Please let me know if you need help with the remaining actions, and I would be happy to assist you.
- action name: get_food
- summarize action: The player collects non-perishable food from a supermarket.
- what is needed to do the action: A player, supermarket location, and an item of nonperishable food.
- what is the result: The player gains the non-perishable food item in their inventory.

- entities:
  - entity name: player
    - before: at supermarket location
    - after: at supermarket location
  - entity name: nonperishable item
    - before: at supermarket location
    - after: in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at the supermarket location, where the non-perishable food item is.
2. Add the non-perishable food item to the player's inventory.

pddl:
```
(:action get_food
  :parameters (?p - player ?loc - location ?item - item)
  :precondition (and (is_supermarket ?loc)
                      (is_nonperishable ?item)
                      (at ?p ?loc)
                      (at ?item ?loc))
  :effect (and (not (at ?item ?loc))
               (inventory ?p ?item)))
```

- action name: get
- summarize action: The player picks up an item from a location.
- what is needed to do the action: A player, the location of the item, and the item.
- what is the result: The player obtains the item in their inventory.

- entities:
  - entity name: player
    - before: at item location
    - after: at item location
  - entity name: item
    - before: at the location
    - after: in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at the item location.
2. Add the item to the player's inventory.

pddl:
```
(:action get
  :parameters (?p - player ?loc - location ?item - item)
  :precondition (and (at ?p ?loc)
                      (at ?item ?loc))
  :effect (and (not (at ?item ?loc))
               (inventory ?p ?item)))
```

- action name: drop
- summarize action: The player drops an item from their inventory at a location.
- what is needed to do the action: A player, the location where the item will be dropped, and the item.
- what is the result: The item is removed from the player's inventory and added to the location.

- entities:
  - entity name: player
    - before: at location with item
    - after: at location without item
  - entity name: item
    - before: in player's inventory
    - after: at the location

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has the item in their inventory.
2. Remove the item from the player's inventory and place it at the location.

pddl:
```
(:action drop
  :parameters (?p - player ?loc - location ?item - item)
  :precondition (and (at ?p ?loc)
                      (inventory ?p ?item))
  :effect (and (not (inventory ?p ?item))
               (at ?item ?loc)))
```
- action name: make_plan
- summarize action: The player creates a plan to survive the nuclear attack.
- what is needed to do the action: A player.
- what is the result: The player has a survival plan.

- entities:
  - entity name: player
    - before: without a plan
    - after: with a plan

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player does not have a plan.
2. Add the plan to the player.

PDDL:
```
(:action make_plan
  :parameters (?p - player)
  :precondition (not (has_plan ?p))
  :effect (has_plan ?p))
```

- action name: get_medicine
- summarize action: The player collects medicine from a pharmacy.
- what is needed to do the action: A player, a pharmacy location, and a medicine item.
- what is the result: The player gains the medicine item in their inventory.

- entities:
  - entity name: player
    - before: at pharmacy location
    - after: at pharmacy location
  - entity name: medicine item
    - before: at pharmacy location
    - after: in player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at the pharmacy location, where the medicine item is.
2. Add the medicine item to the player's inventory.

PDDL:
```
(:action get_medicine
  :parameters (?p - player ?loc - location ?item - item)
  :precondition (and (is_pharmacy ?loc)
                      (is_medicine ?item)
                      (at ?p ?loc)
                      (at ?item ?loc))
  :effect (and (not (at ?item ?loc))
               (inventory ?p ?item)))
```

- action name: reinforce
- summarize action: The player reinforces a location using construction materials.
- what is needed to do the action: A player, a location, and a construction material item.
- what is the result: The player is at a reinforced location.

- entities:
  - entity name: player
    - before: at location
    - after: at reinforced location
  - entity name: construction material item
    - before: in player's inventory
    - after: used for reinforcement

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player has a construction material item in their inventory.
2. Use the construction material item to reinforce the location.
3. Update the player's location to be reinforced.

PDDL:
```
(:action reinforce
  :parameters (?p - player ?loc - location ?item - item)
  :precondition (and (inventory ?p ?item)
                      (is_construction_material ?item)
                      (at ?p ?loc))
  :effect (and (not (inventory ?p ?item))
               (sheltered ?p)))
```

- action name: stay_in_shelter
- summarize action: The player stays inside a sheltered location.
- what is needed to do the action: A player and a sheltered location.
- what is the result: The player remains sheltered.

- entities:
  - entity name: player
    - before: at a sheltered location
    - after: at a sheltered location

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at a sheltered location.
2. The player remains at the sheltered location.

PDDL:
```
(:action stay_in_shelter
  :parameters (?p - player ?loc - location)
  :precondition (and (at ?p ?loc)
                      (sheltered ?p))
  :effect (at ?p ?loc))
```

- action name: get_in_car
- summarize action: The player gets into a car.
- what is needed to do the action: A player and a car item.
- what is the result: The player is driving a car.

- entities:
  - entity name: player
    - before: not driving
    - after: driving

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player has a car in their inventory.
2. Update the player state to be driving.

PDDL:
```
(:action get_in_car
  :parameters (?p - player ?item - item)
  :precondition (and (inventory ?p ?item)
                      (is_car ?item))
  :effect (driving ?p))
```