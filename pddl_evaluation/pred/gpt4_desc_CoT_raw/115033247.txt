Action 1: go (navigate to an adjacent location)
- parameters: (?player - player, ?dir - direction, ?loc - location)
- precondition: (at ?player ?loc)
- effect: (not (at ?player ?loc)) (at ?player ?loc2) (defined by connected location 1->direction->location 2)
- pddl:
```
(:action go
   :parameters (?player - player, ?dir - direction, ?loc - location)
   :precondition (at ?player ?loc)
   :effect (and (not (at ?player ?loc)) (at ?player ?loc2))
)
```

Action 2: get (pick up an item and put it in the inventory)
- parameters: (?player - player, ?item - item, ?loc - location)
- precondition: (at ?item ?loc) (at ?player ?loc)
- effect: (not (at ?item ?loc)) (inventory ?player ?item)
- pddl:
```
(:action get
   :parameters (?player - player, ?item - item, ?loc - location)
   :precondition (and (at ?item ?loc) (at ?player ?loc))
   :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)
```

Action 3: pour_water (pour water into bowl)
- parameters: (?player - player, ?water - water, ?bowl - bowl)
- precondition: (inventory ?player ?water) (inventory ?player ?bowl)
- effect: (inventory ?player bowl_of_water)
- pddl:
```
(:action pour_water
   :parameters (?player - player, ?water - water, ?bowl - bowl)
   :precondition (and (inventory ?player ?water) (inventory ?player ?bowl))
   :effect (inventory ?player bowl_of_water)
)
```

Action 4: place_strips_between_boards (place papyrus strips between two wooden boards)
- parameters: (?player - player, ?strips - papyrus_strips, ?board - wooden_boards)
- precondition: (inventory ?player ?strips) (inventory ?player ?board)
- effect: (strips_between_boards)
- pddl:
```
(:action place_strips_between_boards
   :parameters (?player - player, ?strips - papyrus_strips, ?board - wooden_boards)
   :precondition (and (inventory ?player ?strips) (inventory ?player ?board))
   :effect (strips_between_boards)
)
```

Action 5: cut_stalks (cut stalks)
- parameters: (?player - player, ?tree - papyrus_tree, ?pruner - pruner)
- precondition: (inventory ?player ?pruner) (at ?player ?loc) (at ?tree ?loc)
- effect: (inventory ?player papyrus_stalks)
- pddl:
```
(:action cut_stalks
   :parameters (?player - player, ?tree - papyrus_tree, ?pruner - pruner)
   :precondition (and (inventory ?player ?pruner) (at ?player ?loc) (at ?tree ?loc))
   :effect (inventory ?player papyrus_stalks)
)
```

Action 6: papyrus_strips (cut strips from stalks)
- parameters: (?player - player, ?stalks - papyrus_stalks, ?knife - knife)
- precondition: (inventory ?player ?stalks) (inventory ?player ?knife)
- effect: (inventory ?player papyrus_strips)
- pddl:
```
(:action papyrus_strips
   :parameters (?player - player, ?stalks - papyrus_stalks, ?knife - knife)
   :precondition (and (inventory ?player ?stalks) (inventory ?player ?knife))
   :effect (inventory ?player papyrus_strips)
)
```

Action 7: polish_papyrus (use a stone to polish the papyrus)
- parameters: (?player - player, ?papyrus - papyrus, ?stone - smooth_stone)
- precondition: (inventory ?player ?papyrus) (inventory ?player ?stone)
- effect: (polished ?papyrus)
- pddl:
```
(:action polish_papyrus
   :parameters (?player - player, ?papyrus - papyrus, ?stone - smooth_stone)
   :precondition (and (inventory ?player ?papyrus) (inventory ?player ?stone))
   :effect (polished ?papyrus)
)
```

Action 8: flatten_papyrus (use a roller to make the papyrus flat)
- parameters: (?player - player, ?roller - roller, ?papyrus - papyrus)
- precondition: (inventory ?player ?roller) (strips_woven)
- effect: (flattened ?papyrus)
- pddl:
```
(:action flatten_papyrus
   :parameters (?player - player, ?roller - roller, ?papyrus - papyrus)
   :precondition (and (inventory ?player ?roller) (strips_woven))
   :effect (flattened ?papyrus)
)
```

Action 9: cut_papyrus (use a scissor to cut the papyrus)
- parameters: (?player - player, ?papyrus - papyrus, ?scissors - scissors)
- precondition: (inventory ?player ?scissors) (flattened ?papyrus)
- effect: (cut ?papyrus)
- pddl:
```
(:action cut_papyrus
   :parameters (?player - player, ?papyrus - papyrus, ?scissors - scissors)
   :precondition (and (inventory ?player ?scissors) (flattened ?papyrus))
   :effect (cut ?papyrus)
)
```