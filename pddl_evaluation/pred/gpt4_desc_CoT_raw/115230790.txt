Sure, let's start with the first action "listen_to_astronomers_predictions" 

- action name: listen_to_astronomers_predictions
- parameters: For this action, the player is involved as they will be the one listening to the broadcast about the comet, so we need a parameter for a player.
- precondition: To listen, the player should have a pc where they can listen to broadcasts. So, the precondition is having a pc.
- effect: The effect of performing this action would be that the player has listened to astronomers’ predictions about the collision with earth.

- pddl: ..
    (:action listen_to_astronomers_predictions
        :parameters (?p - player)
        :precondition (has_pc ?p)
        :effect (listen_to_broadcast ?p))

Continue this process for all the actions. Here are the next four, for example:

- action name: move_away
- parameters: Both the player and the city are involved here. The player is at a coastal city and will move away to an inland city. All are parameters.
- precondition: At least one city is coastal and the other is inland, and the player is currently at a coastal city.
- effect: After this action, the player will be at the inland city.

- pddl: ..
    (:action move_away
        :parameters (?p - player ?c1 ?c2 - city)
        :precondition (and 
                        (at ?p ?c1)
                        (coastal ?c1)
                        (inland ?c2))
        :effect (at ?p ?c2))

- action name: go
- parameters: This requires locations and direction.
- precondition: The current location is connected to another location in some direction.
- effect: The object is at a different location.

- pddl: ..
    (:action go
        :parameters (?obj - object ?dir - direction ?loc1 ?loc2 - location)
        :precondition (connected ?loc1 ?dir ?loc2)
        :effect (at ?obj ?loc2))

- action name: buy_supplies
- parameters: The player buys supplies, which include food, water, and medicine.
- precondition: The player is at a market (location).
- effect: The supplies are in the inventory.

- pddl: ..
    (:action buy_supplies
        :parameters (?supply - item ?p - player ?loc - location)
        :precondition (at ?p ?loc)
        :effect (inventory ?supply))

- action name: check_supplies
- parameters: Items to check
- precondition: The items are in the inventory.
- effect: The supplies in the inventory have been checked and enough supplies have been found.

- pddl: ..
    (:action check_supplies
        :parameters (?supply - item)
        :precondition (inventory ?supply)
        :effect (enough_supplies))

Please note that you also need to compliment these predicates with some other logic/conditions based upon your specific use case scenario to make a complete and meaningful planning problem and solution.
Certainly, continuing:

- action name: buy_weapons
- parameters: The player is involved, so is the item (weapon).
- precondition: The player needs to be at a weapons market.
- effect: The weapons are in the player's inventory.

- pddl: ..
    (:action buy_weapons
        :parameters (?weapon - weapon ?p - player ?loc - location)
        :precondition (at ?p ?loc)
        :effect (inventory ?weapon))

- action name: check_weapons
- parameters: Requires the weapons.
- precondition: The weapons must be in the inventory.
- effect: The weapons in inventory have been counted and enough weapons have been found.

- pddl: ..
    (:action check_weapons
        :parameters (?weapon - weapon)
        :precondition (inventory ?weapon)
        :effect (enough_weapons))

- action name: check_bunker
- parameters: A bunker is required to check.
- precondition: The bunker exists.
- effect: The player has found a good bunker (with an air filtration system and strong material).

- pddl: ..
    (:action check_bunker
        :parameters (?bk - bunker)
        :precondition (and (has_air_filtration_system ?bk) 
                            (has_strong_material ?bk))
        :effect (find_good_bunker ?bk))

- action name: outfit_bunker_with_energy_source
- parameters: Need the player, bunker, and energy source.
- precondition: The bunker and energy source should both be in the inventory.
- effect: The bunker is outfitted with the energy source for heat.

- pddl: ..
    (:action outfit_bunker_with_energy_source
        :parameters (?p - player ?bk - bunker ?it - item)
        :precondition (and 
                         (inventory ?it)
                         (inventory ?bk)
                         (find_good_bunker ?bk))
        :effect (outfit_bunker_with_heat ?bk))

For the last two actions, I'll need a better description of how they are achieved to provide complete PDDL descriptions.
Alright, let's move forward:

- action name: enjoylife
- parameters: The player and the bunker are involved here as the player will enjoy their life in the bunker.
- precondition: The bunker must have been found by player and outfitted with an energy source. The player should be in the bunker.
- effect: The player is enjoying life in the bunker.

- pddl: ..
    (:action enjoylife
        :parameters (?p - player ?bk - bunker)
        :precondition (and 
                        (at ?p ?bk)
                        (find_good_bunker ?bk)
                        (outfit_bunker_with_heat ?bk))
        :effect (enjoylife ?p ?bk))

Now, the last action:

- action name: connect_through_social_media_with_family
- parameters: The player needs to connect with family, and needs a PC to do so.
- precondition: The player has a PC and is safe in the bunker.
- effect: The family members know the player is safe.

- pddl: ..
    (:action connect_through_social_media_with_family
        :parameters (?p - player)
        :precondition (and 
                        (has_pc ?p)
                        (at ?p ?bk)
                        (find_good_bunker ?bk)
                        (outfit_bunker_with_heat ?bk))
        :effect (family_memebers_know_you_are_safe))

And that’s it! We've described all the actions using PDDL based on your description. Remember, these examples assume several details and may not fully fit your scenario; you need to adjust some conditions/effects based on your specific requirements. It's just a skeleton to demonstrate how your actions and predicates can be converted into PDDL format.