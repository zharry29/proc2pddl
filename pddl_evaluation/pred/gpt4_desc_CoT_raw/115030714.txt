- action name: go
- summarize action: The player moves from one location to another.
- what is required: The player must be at a certain location and the locations must be connected in the given direction.
- what is the result: The player moves to the new location.

- entities:
  - entity name: player
    - before: at starting location
    - after: at destination location
  - entity name: location
    - before: player is at location
    - after: unchanged
  - entity name: direction
    - before: connecting current location to the destination location
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player is at the current location.
2. Check if the locations are connected in the given direction.
3. Move the player to the destination location.

PDDL:
  (:action go
    :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
    :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
  )
- action name: get
- summarize action: The player picks up an item from a location.
- what is required: The player must be at the location, and the item must be at the same location.
- what is the result: The player adds the item to their inventory, and the item is no longer at the location.

- entities:
  - entity name: player
    - before: at the location
    - after: unchanged
  - entity name: item
    - before: at the location
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player is at the location.
2. Ensure the item is at the same location as the player.
3. Remove the item from the location.
4. Add the item to the player's inventory.

PDDL:
  (:action get
    :parameters (?player - player ?item - item ?loc - location)
    :precondition (and (at ?player ?loc) (at ?item ?loc))
    :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
  )

- action name: drop
- summarize action: The player drops an item at a location.
- what is required: The player must be at the location, and the item must be in the player's inventory.
- what is the result: The item is at the location, and the item is no longer in the player's inventory.

- entities:
  - entity name: player
    - before: at the location
    - after: unchanged
  - entity name: item
    - before: in the player's inventory
    - after: at the location

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player is at the location.
2. Ensure the item is in the player's inventory.
3. Remove the item from the player's inventory.
4. Place the item at the location.

PDDL:
  (:action drop
    :parameters (?player - player ?item - item ?loc - location)
    :precondition (and (at ?player ?loc) (inventory ?player ?item))
    :effect (and (not (inventory ?player ?item)) (at ?item ?loc))
  )

Please let me know if you want me to continue with the remaining actions.
- action name: cook
- summarize action: The player cooks food in the kitchen.
- what is required: The player must be in a location with a kitchen, and the food must be in the player's inventory.
- what is the result: The food is cooked and ready to serve.

- entities:
  - entity name: player
    - before: at the location
    - after: unchanged
  - entity name: food
    - before: in the player's inventory
    - after: cooked and in the player's inventory
  - entity name: location
    - before: player is at location with a kitchen
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player is at the location with a kitchen.
2. Ensure the food is in the player's inventory.
3. Cook the food.

PDDL:
  (:action cook
    :parameters (?player - player ?food - food ?loc - location)
    :precondition (and (at ?player ?loc) (inventory ?player ?food) (has_kitchen ?loc))
    :effect (cooked ?food)
  )

- action name: order_sushi
- summarize action: The player orders sushi.
- what is required: The player must have a phone and money in their inventory.
- what is the result: The player gets sushi in their inventory.

- entities:
  - entity name: player
    - before: has phone and money in inventory
    - after: unchanged
  - entity name: sushi
    - before: not in the player's inventory
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player has a phone and money in their inventory.
2. Add sushi to the player's inventory.

PDDL:
  (:action order_sushi
    :parameters (?player - player ?phone - phone ?money - money ?sushi - sushi)
    :precondition (and (inventory ?player ?phone) (inventory ?player ?money))
    :effect (inventory ?player ?sushi)
  )

- action name: buy_sake
- summarize action: The player buys sake.
- what is required: The player must be at a location with a fridge and have money in their inventory.
- what is the result: The player gets sake in their inventory.

- entities:
  - entity name: player
    - before: at the location and has money in inventory
    - after: unchanged
  - entity name: sake
    - before: not in the player's inventory
    - after: in the player's inventory
  - entity name: location
    - before: player is at location with fridge
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player is at the location with a fridge.
2. Ensure the player has money in their inventory.
3. Add sake to the player's inventory.

PDDL:
  (:action buy_sake
    :parameters (?player - player ?money - money ?sake - drink ?loc - location)
    :precondition (and (at ?player ?loc) (inventory ?player ?money) (has_fridge ?loc))
    :effect (inventory ?player ?sake)
  )

Please let me know if you want me to continue with the remaining actions.
- action name: serve
- summarize action: The player serves food or drink to guests.
- what is required: The food or drink must be in the player's inventory.
- what is the result: The food or drink is no longer in the player's inventory.

- entities:
  - entity name: player
    - before: has food or drink in inventory
    - after: unchanged
  - entity name: food / drink
    - before: in the player's inventory
    - after: not in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the food or drink is in the player's inventory.
2. Remove the food or drink from the player's inventory.

PDDL:
  (:action serve
    :parameters (?player - player ?item - (either food drink))
    :precondition (inventory ?player ?item)
    :effect (not (inventory ?player ?item))
  )

- action name: brew
- summarize action: The player brews tea.
- what is required: The player must have tea in their inventory and be at a location with a kitchen.
- what is the result: The tea is brewed.

- entities:
  - entity name: player
    - before: at location with kitchen and has tea in inventory
    - after: unchanged
  - entity name: tea
    - before: in the player's inventory
    - after: brewed
  - entity name: location
    - before: player is at location with kitchen
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player is at the location with a kitchen.
2. Ensure the player has tea in their inventory.
3. Brew the tea.

PDDL:
  (:action brew
    :parameters (?player - player ?tea - tea ?loc - location)
    :precondition (and (at ?player ?loc) (inventory ?player ?tea) (has_kitchen ?loc))
    :effect (brewed ?tea)
  )

- action name: get_beer
- summarize action: The player gets beer from the fridge.
- what is required: The player must be at a location with a fridge.
- what is the result: The player gets the beer in their inventory.

- entities:
  - entity name: player
    - before: at the location
    - after: unchanged
  - entity name: beer
    - before: not in the player's inventory
    - after: in the player's inventory
  - entity name: location
    - before: player is at location with a fridge
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player is at the location with a fridge.
2. Add beer to the player's inventory.

PDDL:
  (:action get_beer
    :parameters (?player - player ?beer - drink ?loc - location)
    :precondition (and (at ?player ?loc) (has_fridge ?loc))
    :effect (inventory ?player ?beer)
  )

Please let me know if you want me to continue with the remaining actions.
- action name: open
- summarize action: The player opens a drink.
- what is required: The drink must be in the player's inventory and not opened yet.
- what is the result: The drink is opened.

- entities:
  - entity name: player
    - before: has the drink in their inventory
    - after: unchanged
  - entity name: drink
    - before: in the player's inventory and not opened
    - after: opened

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the drink is in the player's inventory.
2. Ensure the drink is not opened yet.
3. Open the drink.

PDDL:
  (:action open
    :parameters (?player - player ?drink - drink)
    :precondition (and (inventory ?player ?drink) (not (opened ?drink)))
    :effect (opened ?drink)
  )

- action name: hang_lantern
- summarize action: The player hangs a lantern.
- what is required: The lantern must be in the player's inventory.
- what is the result: The lantern is hung.

- entities:
  - entity name: player
    - before: has the lantern in their inventory
    - after: unchanged
  - entity name: lantern
    - before: in the player's inventory and not hung
    - after: hung

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the lantern is in the player's inventory.
2. Hang the lantern.

PDDL:
  (:action hang_lantern
    :parameters (?player - player ?lantern - lantern)
    :precondition (inventory ?player ?lantern)
    :effect (hung ?lantern)
  )

- action name: blow_balloon
- summarize action: The player blows up a balloon.
- what is required: The balloon must be in the player's inventory and not inflated yet.
- what is the result: The balloon is inflated.

- entities:
  - entity name: player
    - before: has the balloon in their inventory
    - after: unchanged
  - entity name: balloon
    - before: in the player's inventory and not inflated
    - after: inflated

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the balloon is in the player's inventory.
2. Ensure the balloon is not inflated yet.
3. Inflate the balloon.

PDDL:
  (:action blow_balloon
    :parameters (?player - player ?balloon - balloon)
    :precondition (and (inventory ?player ?balloon) (not (inflated ?balloon)))
    :effect (inflated ?balloon)
  )

- action name: turn_on_tv
- summarize action: The player turns on the TV.
- what is required: The TV must be in the player's inventory and not turned on yet.
- what is the result: The TV is turned on.

- entities:
  - entity name: player
    - before: has the TV in their inventory
    - after: unchanged
  - entity name: TV
    - before: in the player's inventory and not turned on
    - after: turned on

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the TV is in the player's inventory.
2. Ensure the TV is not turned on yet.
3. Turn on the TV.

PDDL:
  (:action turn_on_tv
    :parameters (?player - player ?tv - item)
    :precondition (and (inventory ?player ?tv) (not (on ?tv)))
    :effect (on ?tv)
  )