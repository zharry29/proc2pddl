- action name: go
- summarize action: Navigate to an adjacent location.
- what is needed to do the action: Adjacent locations need to be connected and unblocked.
- what is the result: Player moves to the desired location.

- entities:
  - entity name: player
    - before: at a location
    - after: at the adjacent location
  - entity name: origin location
    - before: player at location
    - after: player not at location
  - entity name: destination location
    - before: player not at this location
    - after: player at this location

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player is at the origin location and destination location is connected to it.
2. Ensure the path between the connected locations is not blocked.

pddl:
 ```
 (:action go
   :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
   :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
 )
 ```

- action name: get
- summarize action: Pick up an item and put it in the inventory.
- what is needed to do the action: The item is gettable and at the same location as the player.
- what is the result: The item is added to the player's inventory.

- entities:
  - entity name: item
    - before: at location and not in the inventory
    - after: in the inventory
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at the same location as the item.
2. Ensure the item is gettable.

pddl:
 ```
 (:action get
   :parameters (?player - player ?item - object ?loc - location)
   :precondition (and (at ?player ?loc) (is_gettable ?item) (at ?item ?loc))
   :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
 )
 ```

- action name: lay_masking_tape
- summarize action: Lay masking tape at the location.
- what is needed to do the action: Masking tape should be in the player's inventory, and the location should be clear.
- what is the result: Ten strips of masking tape are laid at the location, and masking tape is removed from the inventory.

- entities:
  - entity name: masking_tape
    - before: in the inventory
    - after: not in the inventory
  - entity name: location
    - before: clear
    - after: has_ten_strips
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at the location.
2. Ensure the location is clear.
3. Ensure the masking tape is in the player's inventory.

pddl:
 ```
 (:action lay_masking_tape
   :parameters (?player - player ?tape - masking_tape ?loc - location)
   :precondition (and (at ?player ?loc) (is_clear ?loc) (inventory ?player ?tape))
   :effect (and (not (inventory ?player ?tape)) (has_ten_strips ?loc))
 )
 ```

- action name: make_tosses_column
- summarize action: Make a tosses column on the paper.
- what is needed to do the action: The paper should be in the player's inventory, and there should not already be a tosses column on it.
- what is the result: The paper now has a tosses column.

- entities:
  - entity name: paper
    - before: in the inventory, no tosses column
    - after: in the inventory, has tosses column
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the paper is in the player's inventory.
2. Ensure the paper does not have a tosses column.

pddl:
 ```
 (:action make_tosses_column
   :parameters (?player - player ?paper - paper)
   :precondition (and (inventory ?player ?paper) (not (tosses_column ?paper)))
   :effect (tosses_column ?paper)
 )
 ```

- action name: make_crosses_column
- summarize action: Make a crosses column on the paper.
- what is needed to do the action: The paper should be in the player's inventory, and there should not already be a crosses column on it.
- what is the result: The paper now has a crosses column.

- entities:
  - entity name: paper
    - before: in the inventory, no crosses column
    - after: in the inventory, has crosses column
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the paper is in the player's inventory.
2. Ensure the paper does not have a crosses column.

pddl:
 ```
 (:action make_crosses_column
   :parameters (?player - player ?paper - paper)
   :precondition (and (inventory ?player ?paper) (not (crosses_column ?paper)))
   :effect (crosses_column ?paper)
 )
 ```
- action name: thaw_food
- summarize action: Thaw frozen food items.
- what is needed to do the action: The item should be a food item, frozen, in the player's inventory.
- what is the result: The item is thawed and remains in the inventory.

- entities:
  - entity name: item
    - before: in the inventory, frozen
    - after: in the inventory, not frozen
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the item is a food item in the player's inventory.
2. Ensure the item is frozen.

pddl:
 ```
 (:action thaw_food
   :parameters (?player - player ?item - object)
   :precondition (and (inventory ?player ?item) (is_food_item ?item) (frozen ?item))
   :effect (not (frozen ?item))
 )
 ```

- action name: throw
- summarize action: Throw food items at the location with masking tape.
- what is needed to do the action: The food item should be thawed, in the player's inventory, and the player should be at a location with ten strips of masking tape.
- what is the result: The food items are thrown at the location, and the item is removed from the inventory.

- entities:
  - entity name: item
    - before: in the inventory, not frozen
    - after: not in the inventory, thrown at location
  - entity name: location
    - before: has_ten_strips of masking tape
    - after: thrown_food_items
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the item is in the player's inventory and thawed.
2. Ensure the player is at a location with ten strips of masking tape.

pddl:
 ```
 (:action throw
   :parameters (?player - player ?item - object ?loc - location)
   :precondition (and (inventory ?player ?item) (not (frozen ?item)) (at ?player ?loc) (has_ten_strips ?loc))
   :effect (and (not (inventory ?player ?item)) (thrown_food_items ?loc))
 )
 ```

- action name: record_tosses
- summarize action: Record tosses on paper.
- what is needed to do the action: Tosses column on paper should exist, and the player should be at a location where food items have been thrown.
- what is the result: Tosses are recorded on the paper.

- entities:
  - entity name: paper
    - before: in the inventory, tosses column exists, tosses not recorded
    - after: in the inventory, tosses column exists, tosses recorded
  - entity name: location
    - before: thrown_food_items
    - after: no change
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the paper with tosses column exists in the player's inventory.
2. Ensure the player is at a location with thrown_food_items.

pddl:
 ```
 (:action record_tosses
   :parameters (?player - player ?paper - paper ?loc - location)
   :precondition (and (inventory ?player ?paper) (tosses_column ?paper) (at ?player ?loc) (thrown_food_items ?loc))
   :effect (tosses_recorded ?paper)
 )
 ```
- action name: record_crosses
- summarize action: Record crosses on paper.
- what is needed to do the action: Crosses column on paper should exist, and the player should be at a location where food items have been thrown.
- what is the result: Crosses are recorded on the paper.

- entities:
  - entity name: paper
    - before: in the inventory, crosses column exists, crosses not recorded
    - after: in the inventory, crosses column exists, crosses recorded
  - entity name: location
    - before: thrown_food_items
    - after: no change
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the paper with crosses column exists in the player's inventory.
2. Ensure the player is at a location with thrown_food_items.

pddl:
 ```
 (:action record_crosses
   :parameters (?player - player ?paper - paper ?loc - location)
   :precondition (and (inventory ?player ?paper) (crosses_column ?paper) (at ?player ?loc) (thrown_food_items ?loc))
   :effect (crosses_recorded ?paper)
 )
 ```

- action name: divide_crosses
- summarize action: Divide the number of crosses on the paper.
- what is needed to do the action: The paper should have crosses recorded, and it should be in the player's inventory.
- what is the result: Crosses are divided on paper.

- entities:
  - entity name: paper
    - before: in the inventory, crosses recorded, crosses not divided
    - after: in the inventory, crosses recorded, crosses divided
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the paper with crosses recorded is in the player's inventory.

pddl:
```
(:action divide_crosses
  :parameters (?player - player ?paper - paper)
  :precondition (and (inventory ?player ?paper) (crosses_recorded ?paper))
  :effect (crosses_divided ?paper)
)
```

- action name: calculate_pi
- summarize action: Calculate pi using divided crosses and tosses on paper.
- what is needed to do the action: The paper should have tosses recorded, crosses divided, and it should be in the player's inventory.
- what is the result: Pi is calculated.

- entities:
  - entity name: paper
    - before: in the inventory, tosses recorded, crosses divided, pi not calculated
    - after: in the inventory, tosses recorded, crosses divided, pi calculated
  - entity name: player
    - before: at location
    - after: no change

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the paper with tosses recorded and crosses divided is in the player's inventory.

pddl:
```
(:action calculate_pi
  :parameters (?player - player ?paper - paper)
  :precondition (and (inventory ?player ?paper) (tosses_recorded ?paper) (crosses_divided ?paper))
  :effect (calculated_pi ?player)
)
```

- action name: be_amazed
- summarize action: Be amazed by the calculated pi value.
- what is needed to do the action: The player should have calculated pi.
- what is the result: The player is amazed.

- entities:
  - entity name: player
    - before: calculated pi, not amazed
    - after: calculated pi, amazed

- describe how to match it to PDDL relevant predicates step by step:
1. Ensure the player has calculated pi.

pddl:
```
(:action be_amazed
  :parameters (?player - player)
  :precondition (calculated_pi ?player)
  :effect (amazed ?player)
)
```