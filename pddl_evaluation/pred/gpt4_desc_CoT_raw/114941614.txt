Sure, let's create each action one by one orderly based on your information in PDDL.

1) Action: `go`
- Parameters: A player that is going to navigate, a location he is at, a direction he will choose and the destination location.
- Precondition: The player must be at the original location and the original location must be connected to the destination in that direction and not blocked.
- Effect: The player is no longer in the original location but at the destination location.
- PDDL:
```
(:action go
   :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location)
   :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?p ?loc1)) (at ?p ?loc2))
)
```

We will repeat this pattern to form each action. Replace the parameters, preconditions and effects accordingly based on the desired behavior of the action. 

2) Action: `get`
- Parameters: A player getting an item and the item.
- Precondition: The item must be at the player's location and is not already in the inventory.
- Effect: The item is now in the player's inventory and no longer in the location.
- PDDL:
```
(:action get
   :parameters (?p - player ?item - item ?loc - location)
   :precondition (and (at ?item ?loc) (at ?p ?loc) (not (inventory ?p ?item)))
   :effect (and (inventory ?p ?item) (not (at ?item ?loc)))
)
```

3) Action: `collect_water`
- Parameters: A player, a container and a location.
- Precondition: The player and the empty container must be at a location where there is a water source.
- Effect: The container is now full with water and the water in the container is collected from the location.
- PDDL:
```
(:action collect_water
   :parameters (?p - player ?container - container ?water - water ?loc - location)
   :precondition (and (has_water_source ?loc) (at ?p ?loc) (at ?container ?loc) (not (is_full ?container)))
   :effect (and (is_full ?container) (contains ?container ?water))
)  
```

You can continue using the similar pattern above for defining other actions as needed.
Sure, let's continue.

4) Action: `gather_sticks`
- Parameters: A player, a location and some sticks.
- Precondition: The player who wants to gather sticks must be in the location where there are sticks on the ground.
- Effect: The player now has sticks in his inventory.
- PDDL:
```
(:action gather_sticks
   :parameters (?p - player ?sticks - sticks ?loc - location)
   :precondition (and (at ?p ?loc) (has_sticks ?loc))
   :effect (inventory ?p ?sticks)
)
```
5) Action: `make_fire`
- Parameters: A player, a location, a fuel, an igniter.
- Precondition: The player who wants to make fire must be in the location and he has fuel and igniter in the inventory.
- Effect: The location now has a fire.
- PDDL:
```
(:action make_fire
   :parameters (?p - player ?loc - location ?fuel - fuel ?igniter - igniter)
   :precondition (and (at ?p ?loc) (inventory ?p ?fuel) (inventory ?p ?igniter))
   :effect (has_fire ?loc)
)
```
We will keep repeating this pattern to form each action till the last action.

6) Action: `boil_water`
- Parameters: A player, a location, a container filled with water.
- Precondition: The player must be at a location with fire and where the container full of water is.
- Effect: The water in the container is not contaminated. 
- PDDL:
```
(:action boil_water
   :parameters (?p - player ?loc - location ?container - container ?water - water)
   :precondition (and (at ?p ?loc) (has_fire ?loc) (is_full ?container) (contains ?container ?water))
   :effect (not (is_contaminated ?water))
)
```
You can continue using the similar pattern above for defining other actions as needed.

Of course, let's continue with the rest of the actions.

7) Action: `cook_food`
- Parameters: A player, a location, a food item.
- Precondition: The player should be at a location with fire and has food item.
- Effect: The food item is no longer contaminated.
- PDDL:
```
(:action cook_food
   :parameters (?p - player ?loc - location ?food - food)
   :precondition (and (at ?p ?loc) (has_fire ?loc) (inventory ?p ?food))
   :effect (not (is_contaminated ?food))
)
```
8) Action: `eat_poisoned_food`
- Parameters: A player, a poisoned food item.
- Precondition: The player has the poisonous food in his inventory.
- Effect: The player becomes sick.
- PDDL:
```
(:action eat_poisoned_food
   :parameters (?p - player ?food - food)
   :precondition (and (inventory ?p ?food) (is_poisonous ?food))
   :effect (is_sick ?p)
)
```
9) Action: `eat_contaminated_food`
- Parameters: A player, a contaminated food item.
- Precondition: The player has the food in his inventory, and it's contaminated.
- Effect: The player gets sick.
- PDDL:
```
(:action eat_contaminated_food
   :parameters (?p - player ?food - food)
   :precondition (and (inventory ?p ?food) (is_contaminated ?food))
   :effect (is_sick ?p)
)
```
10) Action: `eat_food`
- Parameters: A player, a food item.
- Precondition: The player should have food in inventory, and it should be neither contaminated nor poisonous.
- Effect: The player is no longer hungry.
- PDDL:
```
(:action eat_food
   :parameters (?p - player ?food - food)
   :precondition (and (inventory ?p ?food) (not (is_contaminated ?food)) (not (is_poisonous ?food)))
   :effect (not (is_hungry ?p))
)
```
This pattern of parameters, preconditions and effects will continue for the remaining actions.
Certainly, let's continue.

11) Action: `drink_contaminated_water`
- Parameters: A player, a container with water.
- Precondition: The player has a container with water in his inventory and the water is contaminated.
- Effect: The player is no longer thirsty but becomes sick.
- PDDL:
```pddl
(:action drink_contaminated_water
   :parameters (?p - player ?container - container ?water - water)
   :precondition (and (inventory ?p ?container) (contains ?container ?water) (is_contaminated ?water))
   :effect (and (not (is_thirsty ?p)) (is_sick ?p))
)
```
12) Action: `drink_water`
- Parameters: A player, a container with water.
- Precondition: The player has a container with water in his inventory and the water is not contaminated.
- Effect: The player is no longer thirsty.
- PDDL:
```pddl
(:action drink_water
   :parameters (?p - player ?container - container ?water - water)
   :precondition (and (inventory ?p ?container) (contains ?container ?water) (not (is_contaminated ?water)))
   :effect (not (is_thirsty ?p))
)
```
13) Action: `build_shelter`
- Parameters: A player, a location, leaves and sticks.
- Precondition: The player is at the location with leaves and sticks in his inventory.
- Effect: The location has a shelter.
- PDDL:
```pddl
(:action build_shelter
   :parameters (?p - player ?loc - location ?leaves - leaves ?sticks - sticks)
   :precondition (and (at ?p ?loc) (inventory ?p ?leaves) (inventory ?p ?sticks))
   :effect (has_shelter ?loc)
)
```
14) Action: `sleep_in_shelter`
- Parameters: A player, a location.
- Precondition: The player is at a location with a shelter.
- Effect: The player is longer tired.
- PDDL:
```pddl
(:action sleep_in_shelter
   :parameters (?p - player ?loc - location)
   :precondition (and (at ?p ?loc) (has_shelter ?loc))
   :effect (not (is_tired ?p))
)
```
That covers all the actions from your list.