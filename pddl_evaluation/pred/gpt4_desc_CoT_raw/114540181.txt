- action name: go
- summarize action: The player navigates to an adjacent location.
- what is needed to do the action: The player should know their current location, the direction they want to go, and the new location they want to reach. There must be a connection between the current location and the new location in the given direction.
- what is the result: The player ends up in the new location.

- entities:
  - entity name: player
    - before: at current_location
    - after: at one of the adjacent locations
  - entity name: direction
    - unchanged
  - entity name: current_location
    - unchanged
  - entity name: new_location
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check the player is at the current location and that the new location is connected to the current location in the given direction.
2. Move the player to the new location.

pddl:
```
(:action go
  :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and
    (at ?player ?loc1)
    (connected ?loc1 ?dir ?loc2))
  :effect (and
    (not (at ?player ?loc1))
    (at ?player ?loc2)))
```

- action name: get
- summarize the action: Player picks up an item and puts it in their inventory.
- what is needed to do the action: The player needs to be at the location of the item, and the item must not be in the player's inventory already.
- what is the result: The item is in the player's inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: item
    - before: at the location
    - after: in the player's inventory
  - entity name: location
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player is at the location where the item is and that the item is not in the player's inventory already.
2. Place the item in the player's inventory and remove it from the location.

pddl:
```
(:action get
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and
    (at ?player ?loc)
    (at ?item ?loc)
    (not (inventory ?player ?item)))
  :effect (and
    (inventory ?player ?item)
    (not (at ?item ?loc))))
```

I will provide the remaining actions in the following text responses due to the character limit.
- action name: get_bamboo_container
- summarize action: Player creates a bamboo container using surrounding bamboo.
- what is needed to do the action: The player should be at a location with bamboo and not have a bamboo container in their inventory already.
- what is the result: The player has a bamboo container in their inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: bamboo_container
    - before: not in the player's inventory
    - after: in the player's inventory
  - entity name: location
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player is at a location with bamboo and does not already have a bamboo container in their inventory.
2. Add the bamboo container to the player's inventory.

pddl:
```
(:action get_bamboo_container
  :parameters (?player - player ?loc - location)
  :precondition (and
    (at ?player ?loc)
    (has_bamboo ?loc)
    (not (inventory ?player ?obj - bamboo_container)))
  :effect (inventory ?player ?obj - bamboo_container))
```

- action name: collect_rain_water
- summarize action: Player collects rainwater in their bamboo container.
- what is needed to do the action: The player should be at a location with rainfall and have a bamboo container in their inventory.
- what is the result: The player has untainted water in their bamboo container.

- entities:
  - entity name: player
    - unchanged
  - entity name: bamboo_container
    - before: empty
    - after: filled with untreated water
  - entity name: location
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player is at a location with rainfall and has a bamboo container in their inventory.
2. Switch the status of the bamboo container from empty to containing untreated water.

pddl:
```
(:action collect_rain_water
  :parameters (?player - player ?loc - location ?container - bamboo_container ?water - water)
  :precondition (and
    (at ?player ?loc)
    (has_rainfall ?loc)
    (inventory ?player ?container))
  :effect (inventory ?player ?water))
```

- action name: create_fire
- summarize action: The player creates a fire.
- what is needed to do the action: The player should have wood and stone in their inventory.
- what is the result: The player has fire.

- entities:
  - entity name: player
    - unchanged
  - entity name: wood
    - unchanged
  - entity name: stone
    - unchanged
  - entity name: fire
    - before: not in the player's inventory
    - after: in the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player has wood and stone in their inventory.
2. Add fire to the player's inventory.

pddl:
```
(:action create_fire
  :parameters (?player - player ?wood - wood ?stone - stone ?fire - fire)
  :precondition (and
    (inventory ?player ?wood)
    (inventory ?player ?stone))
  :effect (inventory ?player ?fire))
```

- action name: treat_water
- summarize action: The player treats water by boiling it using fire.
- what is needed to do the action: The player should have untreated water and fire in their inventory.
- what is the result: The player has treated water.

- entities:
  - entity name: player
    - unchanged
  - entity name: untreated_water
    - before: in the player's inventory
    - after: removed from the player's inventory
  - entity name: fire
    - unchanged
  - entity name: treated_water
    - before: not in the player's inventory
    - after: in the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player has untreated water and fire in their inventory.
2. Remove untreated water from the player's inventory and add treated water.

pddl:
```
(:action treat_water
  :parameters (?player - player ?untreated_water - water ?fire - fire ?treated_water - water)
  :precondition (and
    (inventory ?player ?untreated_water)
    (not (treated ?untreated_water))
    (inventory ?player ?fire))
  :effect (and
    (not (inventory ?player ?untreated_water))
    (inventory ?player ?treated_water)
    (treated ?treated_water)))
```

I will provide the remaining actions in the following text response due to the character limit.
- action name: drink_water
- summarize action: The player drinks treated water to hydrate.
- what is needed to do the action: The player should have treated water in their inventory.
- what is the result: The player is no longer dehydrated.

- entities:
  - entity name: player
    - before: dehydrated
    - after: not dehydrated
  - entity name: treated_water
    - before: in the player's inventory
    - after: removed from the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player has treated water in their inventory and is dehydrated.
2. Remove treated water from the player's inventory and update the player's condition to not be dehydrated.

pddl:
```
(:action drink_water
  :parameters (?player - player ?treated_water - water)
  :precondition (and
    (inventory ?player ?treated_water)
    (treated ?treated_water)
    (is dehydrated ?player))
  :effect (and
    (not (inventory ?player ?treated_water))
    (not (is dehydrated ?player))))
```

- action name: drink_untreated_water
- summarize action: The player drinks untreated water, gets hydrated but becomes ill.
- what is needed to do the action: The player should have untreated water in their inventory.
- what is the result: The player is no longer dehydrated but becomes ill.

- entities:
  - entity name: player
    - before: dehydrated
    - after: not dehydrated, ill
  - entity name: untreated_water
    - before: in the player's inventory
    - after: removed from the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player has untreated water in their inventory and is dehydrated.
2. Remove untreated water from the player's inventory, update the player's condition to not be dehydrated, and make the player ill.

pddl:
```
(:action drink_untreated_water
  :parameters (?player - player ?untreated_water - water)
  :precondition (and
    (inventory ?player ?untreated_water)
    (not (treated ?untreated_water))
    (is dehydrated ?player))
  :effect (and
    (not (inventory ?player ?untreated_water))
    (not (is dehydrated ?player))
    (is ill ?player)))
```

I will provide the remaining actions in the following text response due to the character limit.
- action name: create_sos_sign
- summarize action: The player creates an SOS sign using stones and wood.
- what is needed to do the action: The player should have stones and wood in their inventory.
- what is the result: The player has an SOS sign.

- entities:
  - entity name: player
    - unchanged
  - entity name: stones
    - unchanged
  - entity name: wood
    - unchanged
  - entity name: sos_sign
    - before: not in the player's inventory
    - after: in the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player has stones and wood in their inventory.
2. Add an SOS sign to the player's inventory.

pddl:
```
(:action create_sos_sign
  :parameters (?player - player ?stones - stone ?wood - wood ?sos_sign - sos_sign)
  :precondition (and
    (inventory ?player ?stones)
    (inventory ?player ?wood))
  :effect (inventory ?player ?sos_sign))
```

- action name: pick_fruit
- summarize action: Player picks a fruit from their current location.
- what is needed to do the action: The player should be at a location with fruit.
- what is the result: The player now has a fruit in their inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: fruit
    - before: at the location
    - after: in the player's inventory
  - entity name: location
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player is at a location where fruit is available.
2. Add the fruit to the player's inventory.

pddl:
```
(:action pick_fruit
  :parameters (?player - player ?fruit - fruit ?loc - location)
  :precondition (and
    (at ?player ?loc)
    (has_fruit ?loc)
    (not (inventory ?player ?fruit)))
  :effect (and
    (inventory ?player ?fruit)
    (not (has_fruit ?loc))))
```

- action name: eat_fruit
- summarize action: The player eats a fruit to decrease hunger.
- what is needed to do the action: The player should have a fruit in their inventory and be hungry.
- what is the result: The player is no longer hungry.

- entities:
  - entity name: player
    - before: hungry
    - after: not hungry
  - entity name: fruit
    - before: in the player's inventory
    - after: removed from the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player has a fruit in their inventory and is hungry.
2. Remove the fruit from the player's inventory and update the player's condition to not be hungry.

pddl:
```
(:action eat_fruit
  :parameters (?player - player ?fruit - fruit)
  :precondition (and
    (inventory ?player ?fruit)
    (is hungry ?player))
  :effect (and
    (not (inventory ?player ?fruit))
    (not (is hungry ?player))))
```

- action name: escape
- summarize action: The player successfully escapes from the jungle.
- what is needed to do the action: The player should be at the basecamp, have created an SOS sign and some extra conditions must be met (e.g., not hungry, not dehydrated, and not ill).
- what is the result: The player escapes the jungle, ending the game/simulation.

- entities:
  - entity name: player
    - before: in the jungle (basecamp)
    - after: out of the jungle (escaped)
  - entity name: basecamp
    - unchanged
  - entity name: SOS_sign
    - created

- describe how to match it to pddl relevant predicates step by step:
1. Check that the player is at the basecamp location, has an SOS sign in their inventory, and meets the extra conditions (not hungry, not dehydrated, and not ill).
2. Mark the player's status as escaped.

pddl:
```
(:action escape
  :parameters (?player - player ?sos_sign - sos_sign)
  :precondition (and
    (at ?player ?loc - basecamp)
    (inventory ?player ?sos_sign)
    (not (is hungry ?player))
    (not (is dehydrated ?player))
    (not (is ill ?player)))
  :effect (escaped ?player))
```