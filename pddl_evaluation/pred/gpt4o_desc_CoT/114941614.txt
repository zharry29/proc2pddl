(:action go
 :parameters (?p - player ?loc1 - location ?loc2 - location ?dir - direction)
 :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
 :effect (and (at ?p ?loc2) (not (at ?p ?loc1)))
)

(:action get
 :parameters (?p - player ?item - item ?loc - location)
 :precondition (and (at ?p ?loc) (at ?item ?loc))
 :effect (and (inventory ?p ?item) (not (at ?item ?loc)))
)

(:action collect_water
 :parameters (?p - player ?container - container ?loc - location ?water - water)
 :precondition (and (at ?p ?loc) (has_water_source ?loc) (not (is_full ?container)))
 :effect (and (contains ?container ?water) (is_full ?container))
)

(:action gather_sticks
 :parameters (?p - player ?loc - location ?sticks - sticks)
 :precondition (and (at ?p ?loc) (has_sticks ?loc))
 :effect (inventory ?p ?sticks)
)

(:action make_fire
 :parameters (?p - player ?loc - location ?sticks - sticks ?igniter - igniter)
 :precondition (and (at ?p ?loc) (inventory ?p ?sticks) (inventory ?p ?igniter))
 :effect (has_fire ?loc)
)

(:action boil_water
 :parameters (?p - player ?container - container ?water - water ?loc - location)
 :precondition (and (at ?p ?loc) (contains ?container ?water) (is_contaminated ?water) (has_fire ?loc))
 :effect (not (is_contaminated ?water))
)

(:action cook_food
 :parameters (?p - player ?food - food ?loc - location)
 :precondition (and (at ?p ?loc) (inventory ?p ?food) (is_contaminated ?food) (has_fire ?loc))
 :effect (not (is_contaminated ?food))
)

(:action eat_poisoned_food
 :parameters (?p - player ?food - food)
 :precondition (and (inventory ?p ?food) (is_poisonous ?food) (is_hungry ?p))
 :effect (and (is_sick ?p) (not (inventory ?p ?food)) (not (is_hungry ?p)))
)

(:action eat_contaminated_food
 :parameters (?p - player ?food - food)
 :precondition (and (inventory ?p ?food) (is_contaminated ?food) (is_hungry ?p))
 :effect (and (is_sick ?p) (not (inventory ?p ?food)) (not (is_hungry ?p)))
)

(:action eat_food
 :parameters (?p - player ?food - food)
 :precondition (and (inventory ?p ?food) (not (is_contaminated ?food)) (not (is_poisonous ?food)) (is_hungry ?p))
 :effect (and (not (inventory ?p ?food)) (not (is_hungry ?p)))
)

(:action drink_contaminated_water
 :parameters (?p - player ?container - container ?water - water)
 :precondition (and (contains ?container ?water) (is_contaminated ?water) (is_thirsty ?p))
 :effect (and (is_sick ?p) (not (contains ?container ?water)) (not (is_thirsty ?p)))
)

(:action drink_water
 :parameters (?p - player ?container - container ?water - water)
 :precondition (and (contains ?container ?water) (not (is_contaminated ?water)) (is_thirsty ?p))
 :effect (and (not (contains ?container ?water)) (not (is_thirsty ?p)))
)

(:action build_shelter
 :parameters (?p - player ?loc - location ?sticks - sticks ?leaves - leaves)
 :precondition (and (at ?p ?loc) (inventory ?p ?sticks) (inventory ?p ?leaves))
 :effect (has_shelter ?loc)
)

(:action sleep_in_shelter
 :parameters (?p - player ?loc - location)
 :precondition (and (at ?p ?loc) (has_shelter ?loc) (is_tired ?p))
 :effect (not (is_tired ?p))
)

)