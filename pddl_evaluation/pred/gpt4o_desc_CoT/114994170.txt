(:action get
   :parameters (?player - player ?item - item)
   :precondition (and (not (inventory ?player ?item)))
   :effect (and (inventory ?player ?item))
  )

(:action drop
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (inventory ?player ?item) (at ?player ?loc))
   :effect (and (not (inventory ?player ?item)) (at ?item ?loc))
  )

(:action put_in_stopper
   :parameters (?item - item)
   :precondition (and (not (has_stopper ?item)))
   :effect (and (has_stopper ?item))
  )

(:action fill
   :parameters (?item - item)
   :precondition (and (can_be_filled ?item) (not (full ?item)))
   :effect (and (full ?item))
  )

(:action purify
   :parameters (?item - item)
   :precondition (and (full ?item) (not (purified ?item)))
   :effect (and (purified ?item))
  )

(:action seal
   :parameters (?item - item)
   :precondition (and (can_be_sealed ?item) (not (sealed ?item)))
   :effect (and (sealed ?item))
  )

(:action wait
   :parameters ()
   :precondition (and)
   :effect (and)
  )

(:action go
   :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
   :precondition (and (connected ?loc1 ?dir ?loc2) (at ?player ?loc1) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
  )

(:action put_batteries_in
   :parameters (?player - player ?radio - radio)
   :precondition (and (inventory ?player ?radio) (not (has_batteries ?radio)))
   :effect (and (has_batteries ?radio))
  )

(:action turn_on_radio
   :parameters (?radio - radio)
   :precondition (and (has_batteries ?radio) (not (on ?radio)))
   :effect (and (on ?radio))
  )

(:action create_cage
   :parameters (?player - player ?cage - farraday_cage)
   :precondition (and (not (inventory ?player ?cage)))
   :effect (and (inventory ?player ?cage))
  )

(:action close_cage
   :parameters (?cage - farraday_cage)
   :precondition (and (not (cage_closed ?cage)))
   :effect (and (cage_closed ?cage))
  )

(:action put_in_cage
   :parameters (?item - item ?cage - farraday_cage)
   :precondition (and (not (in_cage ?item)))
   :effect (and (in_cage ?item))
  )

)