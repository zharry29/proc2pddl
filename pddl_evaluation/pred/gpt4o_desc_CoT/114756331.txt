(:action go
  :parameters (?p - player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and (at ?p ?loc1) 
                     (connected ?loc1 ?dir ?loc2) 
                     (not (blocked ?loc1 ?dir ?loc2)))
  :effect (and (at ?p ?loc2) 
               (not (at ?p ?loc1)))
)

(:action get
  :parameters (?p - player ?item - stick ?loc - location)
  :precondition (and (at ?p ?loc) 
                     (at ?item ?loc))
  :effect (and (inventory ?p ?item) 
               (not (at ?item ?loc)))
)

(:action breathe
  :parameters (?p - player)
  :precondition (and)
  :effect (calm ?p)
)

(:action liedown
  :parameters (?p - player ?q - quicksand ?loc - location)
  :precondition (and (stuck ?p ?q)
                     (deep ?q))
  :effect (laying ?p)
)

(:action swim
  :parameters (?p - player ?q - quicksand ?loc1 - location ?loc2 - location)
  :precondition (and (laying ?p) 
                     (stuck ?p ?q) 
                     (at ?p ?loc1) 
                     (connected ?loc1 ?q ?loc2))
  :effect (and (not (stuck ?p ?q)) 
               (at ?p ?loc2) 
               (not (at ?p ?loc1)))
)

(:action usestick
  :parameters (?p - player ?item - stick ?q - quicksand ?loc - location)
  :precondition (and (stuck ?p ?q) 
                     (inventory ?p ?item))
  :effect (not (stuck ?p ?q))
)

(:action rest
  :parameters (?p - player ?loc - location)
  :precondition (at ?p ?loc)
  :effect (tired ?p)
)

(:action drop
  :parameters (?p - player ?item - stick ?loc - location)
  :precondition (and (inventory ?p ?item) 
                     (at ?p ?loc))
  :effect (and (at ?item ?loc) 
               (not (inventory ?p ?item)))
)

(:action check_ripples
  :parameters (?p - player ?loc - location)
  :precondition (at ?p ?loc)
  :effect (has_ripples ?loc)
)

(:action test_ground
  :parameters (?p - player ?loc - location)
  :precondition (at ?p ?loc)
  :effect (aware ?p ?loc)
)

(:action research
  :parameters (?p - player ?loc - location)
  :precondition (at ?p ?loc)
  :effect (calm ?p)
)

(:action move_horizontally
  :parameters (?p - player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and (at ?p ?loc1) 
                     (connected ?loc1 ?dir ?loc2))
  :effect (and (at ?p ?loc2) 
               (not (at ?p ?loc1)))
)

)