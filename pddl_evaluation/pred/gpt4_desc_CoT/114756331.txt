(:action go
        :parameters (?p - player ?d - direction ?l1 - location ?l2 - location)
        :precondition (and (connected ?l1 ?d ?l2) 
                            (not (blocked ?l1 ?d ?l2)) 
                            (at ?p ?l1))
        :effect (and (not (at ?p ?l1)) 
                     (at ?p ?l2)))

    (:action get
        :parameters (?p - player ?i - item)
        :precondition (at ?i ?p)
        :effect (and (not (at ?i ?p)) 
                     (inventory ?p ?i)))

    (:action breathe
        :parameters (?p - player)
        :precondition (not (calm ?p)) 
        :effect (calm ?p))

    (:action liedown
        :parameters (?p - player ?q - quicksand)
        :precondition (and (stuck ?p ?q) (not (laying ?p))) 
        :effect (laying ?p))

    (:action swim
        :parameters (?p - player ?q - quicksand)
        :precondition (and (laying ?p) (deep ?q) (not (tired ?p)))
        :effect (tired ?p))

    (:action usestick
        :parameters (?p - player ?i - item ?q - quicksand)
        :precondition (and (inventory ?p ?i) (stuck ?p ?q)) 
        :effect (not (stuck ?p ?q)))

    (:action rest
        :parameters (?p - player)
        :precondition (tired ?p) 
        :effect (not (tired ?p)))

    (:action drop
        :parameters (?p - player ?i - item)
        :precondition (inventory ?p ?i) 
        :effect (and (not (inventory ?p ?i)) 
                      (at ?i ?loc)))

    (:action check_ripples
        :parameters (?p - player ?l - location)
        :effect (aware ?p ?l))

    (:action test_ground
        :parameters (?p - player ?l - location)
        :precondition (aware ?p ?l)
        :effect (when (has_quicksand ?l) (known (has_quicksand ?l))))

    (:action research
        :parameters (?p - player)
        :effect (forall (?l) (when (has_quicksand ?l) (known (has_quicksand ?l)))))

    (:action move_horizontally
        :parameters (?p - player ?q - quicksand ?d - direction)
        :precondition (and (laying ?p) (stuck ?p ?q))
        :effect (not (stuck ?p ?q)))

)