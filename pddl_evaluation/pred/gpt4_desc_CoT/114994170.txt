(:action get
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and (at ?player ?loc) (at ?item ?loc)) 
  :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action drop
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?item))   
  :effect (and (at ?item ?loc) (not (inventory ?player ?item)))
)

(:action put_in_stopper
  :parameters (?it - item)
  :precondition (not (has_stopper ?it)) 
  :effect (has_stopper ?it)
)

(:action fill
  :parameters (?it - item)
  :precondition (can_be_filled ?it)
  :effect (full ?it)
)

(:action purify
  :parameters (?it - item)
  :precondition (and (can_be_filled ?it) (full ?it))   
  :effect (purified ?it)
)

(:action seal
  :parameters (?it - item)
  :precondition (can_be_sealed ?it)
  :effect (sealed ?it)
)

(:action wait
  :parameters (?p - player)
  :precondition ()
  :effect ()
)

(:action go
  :parameters (?player - player ?loc1 - location ?dir - direction ?loc2 - location)
  :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))  
  :effect (and (at ?player ?loc2) (not (at ?player ?loc1)))
)

(:action put_batteries_in
  :parameters (?radio - radio)
  :precondition (not (has_batteries ?radio))  
  :effect (has_batteries ?radio)
)

(:action turn_on_radio
  :parameters (?radio - radio)
  :precondition (and (has_batteries ?radio) (not (on ?radio)))   
  :effect (on ?radio)
)
(:action create_cage
  :parameters (?cage - farraday_cage)
  :precondition (not (cage_closed ?cage))  
  :effect (cage_closed ?cage)
)

(:action close_cage
  :parameters (?cage - farraday_cage)
  :precondition (not (cage_closed ?cage))   
  :effect (cage_closed ?cage)
)

(:action put_in_cage
  :parameters (?it - item ?cage - farraday_cage)
  :precondition (and (cage_closed ?cage) (not (in_cage ?it)))  
  :effect (in_cage ?it)
)

)