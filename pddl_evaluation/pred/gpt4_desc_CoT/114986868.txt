(:action go
   :parameters (?p - player ?dir - direction ?loc1 - location ?loc2 - location)
   :precondition (and (not (blocked ?loc1 ?dir ?loc2)) (at ?p ?loc1) (connected ?loc1 ?dir ?loc2))
   :effect (and (not (at ?p ?loc1)) (at ?p ?loc2))
)

(:action get
   :parameters (?p - player ?i - item ?loc - location)
   :precondition (and (at ?p ?loc) (at ?i ?loc))
   :effect (and (not (at ?i ?loc)) (inventory ?p ?i))
)

   (:action drop
      :parameters (?p - player ?i - item ?loc - location)
      :precondition (and (inventory ?p ?i) (at ?p ?loc))
      :effect (and (not (inventory ?p ?i)) (at ?i ?loc))
   )

   (:action collect_water
      :parameters (?p - player ?loc - location ?w - water ?c - container)
      :precondition (and (at ?p ?loc) (has_water ?loc) (inventory ?p ?c))
      :effect (inventory ?p ?w)
   )

   (:action filter_water
      :parameters (?p - player ?w - water)
      :precondition (inventory ?p ?w)
      :effect (filtered ?w)
   )

   (:action boil_water
      :parameters (?p - player ?w - water)
      :precondition (and (inventory ?p ?w) (filtered ?w))
      :effect (boiled ?w)
   )

   (:action drink_water
      :parameters (?p - player ?w - water)
      :precondition (and (inventory ?p ?w) (boiled ?w) (thirsty ?p))
      :effect (and (not (thirsty ?p)) (not (boiled ?w)))
   )

   (:action get_wood
      :parameters (?p - player ?loc - location)
      :precondition (and (at ?p ?loc) (has_tree ?loc))
      :effect (inventory ?p wood)
   )

   (:action make_drill
      :parameters (?p - player ?w - wood)
      :precondition (inventory ?p ?w)
      :effect (inventory ?p drill)
   )

    (:action make_fire
       :parameters (?p - player ?loc - location ?d - drill)
       :precondition (and (at ?p ?loc) (inventory ?p ?d))
       :effect (has_fire ?loc)
    )

    (:action make_spear
       :parameters (?p - player ?w - wood)
       :precondition (inventory ?p ?w)
       :effect (inventory ?p spear)
    )

   (:action catch_fish
      :parameters (?p - player ?loc - location ?e - spear)
      :precondition (and (at ?p ?loc) (has_fish ?loc) (inventory ?p ?e))
      :effect (inventory ?p fish)
   )

   (:action cook_fish
      :parameters (?p - player ?loc - location ?f - fish)
      :precondition (and (inventory ?p ?f) (has_fire ?loc))
      :effect (cooked ?f)
   )

   (:action eat_fish
      :parameters (?p - player ?f - fish)
      :precondition (and (inventory ?p ?f) (cooked ?f) (hungry ?p))
      :effect (and (not (hungry ?p)) (not (cooked ?f)))
   )

   (:action get_foliage
      :parameters (?p - player ?loc - location)
      :precondition (and (at ?p ?loc) (has_tree ?loc))
      :effect (inventory ?p foliage)
   )

   (:action build_shelter
      :parameters (?p - player ?loc - location ?w - wood ?f - foliage)
      :precondition (and (at ?p ?loc) (inventory ?p ?w) (inventory ?p ?f))
      :effect (has_shelter ?loc)
   )

   (:action survive
      :parameters (?p - player ?loc - location ?s - shelter ?f - fire ?e - spear)
      :precondition (and (has_shelter ?loc) (has_fire ?loc) (inventory ?p ?e) (at ?p ?loc))
      :effect (safe ?p ?loc)
   )

)