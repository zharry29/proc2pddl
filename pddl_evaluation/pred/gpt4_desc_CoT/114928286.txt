(:action go
    :parameters (?player - player ?dir - direction)
    :precondition (and (at ?player ?loc) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
    :effect (and (at ?player ?loc2) (not (at ?player ?loc1)))
   )

   (:action get
    :parameters (?player - player ?item - items)
    :precondition (and (at ?player ?loc) (is_gettable ?item) (not (inventory ?player ?item)))
    :effect (and (inventory ?player ?item) (not (at ?item ?loc)))
   )
   (:action lay_masking_tape
    :parameters (?tape - masking_tape)
    :precondition (is_gettable ?tape)
    :effect (has_ten_strips ?tape)
   )

   (:action make_tosses_column
    :parameters (?paper - paper ?pen - pen)
    :precondition (and (at ?paper ?loc) (at ?pen ?loc))
    :effect (tosses_column ?paper)
   )

   (:action make_crosses_column
    :parameters (?paper - paper ?pen - pen)
    :precondition (and (at ?paper ?loc) (at ?pen ?loc))
    :effect (crosses_column ?paper)
   )

   (:action thaw_food
    :parameters (?item - items)
    :precondition (and (is_gettable ?item) (is_food_item ?item) (frozen ?item))
    :effect (not (frozen ?item))
   )

   (:action throw
    :parameters (?player - player ?item - items)
    :precondition (and (at ?player ?loc) (has_throwing_distance ?item) (not (thrown_food_items ?loc)))
    :effect (thrown_food_items ?loc)
   )

   (:action record_tosses
    :parameters (?paper - paper)
    :precondition (tosses_column ?paper)
    :effect (tosses_recorded ?paper)
   )

   (:action record_crosses
    :parameters (?paper - paper)
    :precondition (and (tosses_recorded ?paper) (crosses_column ?paper))
    :effect (crosses_recorded ?paper)
   )

    (:action divide_crosses
     :parameters (?paper - paper)
     :precondition (and (tosses_recorded ?paper) (crosses_recorded ?paper))
     :effect (crosses_divided ?paper)
    )

    (:action calculate_pi
     :parameters (?player - player ?paper - paper)
     :precondition (and (crosses_divided ?paper) (not (calculated_pi ?player)))
     :effect (calculated_pi ?player)
    )

    (:action be_amazed
     :parameters (?player - player)
     :precondition (calculated_pi ?player)
     :effect (amazed ?player)
    )

)