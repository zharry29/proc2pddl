1. Find a water source.
2. Obtain a cloth and container for collecting water.
3. Get water from the water source.
4. Strain water to remove dirt and debris.
5. Boil water to kill harmful bacteria.
6. Purify water in sunlight to remove impurities.
7. Find long branches and propped branches for shelter support.
8. Gather twigs and leaves to construct the shelter.
9. Build a shelter with the branches, twigs, and leaves.
10. Locate logs for firewood.
11. Gather dry materials to create tinder.
12. Construct teepee with the logs and tinder.
13. Ignite the fire for warmth, protection, and for cooking.

- action name: go
- summarize action: The player moves from one location to another in a certain direction.
- what is need to do the action: The player's current location, the direction they want to move in, and the target location.
- what is the result: The player is now at the target location.

- entities:
  - entity name: player
    - before: at the initial location
    - after: at the target location
  - entity name: direction
    - unchanged
  - entity name: location
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check if the current location is connected to the target location in the given direction and not blocked.
2. Update the player's location to the target location.

pddl:
(:action go
  :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location)
  :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
  :effect (and (not (at ?p ?loc1)) (at ?p ?loc2))
)

- action name: get
- summarize action: The player picks up an item from their current location.
- what is need to do the action: The player's current location, and the item to be picked up.
- what is the result: The item is added to the player's inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: item
    - before: at the player's current location
    - after: in the player's inventory
  - entity name: location
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check if the item is at the player's current location.
2. Add the item to the player's inventory and remove it from the location.

pddl:
(:action get
  :parameters (?p - player ?item - item ?loc - location)
  :precondition (and (at ?p ?loc) (at ?item ?loc))
  :effect (and (not (at ?item ?loc)) (inventory ?p ?item))
)

- action name: get_water
- summarize action: The player collects water in a container from a water source.
- what is need to do the action: The player's current location, a water source, a container.
- what is the result: The player has water in the container.

- entities:
  - entity name: player
    - unchanged
  - entity name: water
    - before: not in player's inventory
    - after: in player's inventory
  - entity name: location
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at a location with a water source.
2. Check if the player has a container in their inventory.
3. Add the water to the player's inventory.

pddl:
(:action get_water
  :parameters (?p - player ?water - water ?loc - location)
  :precondition (and (at ?p ?loc) (has_water_source ?loc) (inventory ?p ?container - container))
  :effect (inventory ?p ?water)
)

- action name: strain_water
- summarize action: The player strains the water to remove dirt and debris.
- what is need to do the action: The player has water and a cloth in their inventory.
- what is the result: The strained water in the player's inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: water
    - before: untreated water in player's inventory
    - after: strained water in player's inventory
  - entity name: cloth
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has water and a cloth in their inventory.
2. Update the water status to strained.

pddl:
(:action strain_water
  :parameters (?p - player ?water - water ?cloth - cloth)
  :precondition (and (inventory ?p ?water) (inventory ?p ?cloth))
  :effect (strained ?water)
)

- action name: boil_water
- summarize action: The player boils the water to kill harmful bacteria.
- what is need to do the action: The player has water and a fire in their inventory.
- what is the result: The boiled water in the player's inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: water
    - before: strained water in player's inventory
    - after: boiled water in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has strained water and a fire in their inventory.
2. Update the water status to boiled.

pddl:
(:action boil_water
  :parameters (?p - player ?water - water)
  :precondition (and (strained ?water) (has_fire ?p))
  :effect (treated ?water)
)

- action name: purify_in_sunlight
- summarize action: The player purifies the water in sunlight to remove impurities.
- what is need to do the action: The player has water and access to sunlight.
- what is the result: The purified water in the player's inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: water
    - before: boiled water in player's inventory
    - after: purified water in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has boiled water in their inventory.
2. Update the water status to purified.

pddl:
(:action purify_in_sunlight
  :parameters (?p - player ?water - water)
  :precondition (treated ?water)
  :effect (treated ?water)
)

- action name: get_long_branch
- summarize action: The player collects a long branch for shelter support.
- what is need to do the action: The player's current location with branches, and a long_branch that can be picked up.
- what is the result: The player has a long_branch in their inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: location
    - unchanged
  - entity name: long_branch
    - before: available at the player's current location
    - after: in the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at a location with branches and a long_branch is available.
2. Add the long_branch to the player's inventory and remove it from the location.

pddl:
(:action get_long_branch
  :parameters (?p - player ?loc - location ?lb - long_branch)
  :precondition (and (at ?p ?loc) (has_branches ?loc) (at ?lb ?loc))
  :effect (and (not (at ?lb ?loc)) (inventory ?p ?lb))
)

- action name: get_propped_branches
- summarize action: The player collects propped branches for shelter support.
- what is need to do the action: The player's current location with branches, and propped_branches that can be picked up.
- what is the result: The player has propped_branches in their inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: location
    - unchanged
  - entity name: propped_branches
    - before: available at the player's current location
    - after: in the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at a location with branches and propped_branches are available.
2. Add the propped_branches to the player's inventory and remove them from the location.

pddl:
(:action get_propped_branches
  :parameters (?p - player ?loc - location ?pb - propped_branches)
  :precondition (and (at ?p ?loc) (has_branches ?loc) (at ?pb ?loc))
  :effect (and (not (at ?pb ?loc)) (inventory ?p ?pb))
)

- action name: get_twigs_leaves
- summarize action: The player collects twigs and leaves for shelter construction.
- what is need to do the action: The player's current location with twigs_leaves available.
- what is the result: The player has twigs_leaves in their inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: location
    - unchanged
  - entity name: twigs_leaves
    - before: available at the player's current location
    - after: in the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at a location with twigs_leaves available.
2. Add the twigs_leaves to the player's inventory and remove them from the location.

pddl:
(:action get_twigs_leaves
  :parameters (?p - player ?loc - location ?tl - twigs_leaves)
  :precondition (and (at ?p ?loc) (has_twigs_leaves ?loc) (at ?tl ?loc))
  :effect (and (not (at ?tl ?loc)) (inventory ?p ?tl))
)

- action name: build_shelter
- summarize action: The player builds a shelter using long branches, propped_branches, and twigs_leaves.
- what is need to do the action: The player has long_branch, propped_branches, and twigs_leaves in their inventory.
- what is the result: The player has a shelter.

- entities:
  - entity name: player
    - before: without a shelter
    - after: now has a shelter
  - entity name: long_branch
    - unchanged
  - entity name: propped_branches
    - unchanged
  - entity name: twigs_leaves
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has long_branch, propped_branches, and twigs_leaves in their inventory.
2. Update the player's status to having a shelter.

pddl:
(:action build_shelter
  :parameters (?p - player ?lb - long_branch ?pb - propped_branches ?tl - twigs_leaves)
  :precondition (and (inventory ?p ?lb) (inventory ?p ?pb) (inventory ?p ?tl))
  :effect (has_shelter ?p)
)

- action name: get_logs
- summarize action: The player collects logs for creating fire.
- what is need to do the action: The player's current location with logs available.
- what is the result: The player has logs in their inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: location
    - unchanged
  - entity name: logs
    - before: available at the player's current location
    - after: in the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at a location with logs available.
2. Add the logs to the player's inventory and remove them from the location.

pddl:
(:action get_logs
  :parameters (?p - player ?loc - location ?log - logs)
  :precondition (and (at ?p ?loc) (has_logs ?loc) (at ?log ?loc))
  :effect (and (not (at ?log ?loc)) (inventory ?p ?log))
)

- action name: get_dry_materials
- summarize action: The player collects dry materials for creating fire.
- what is need to do the action: The player's current location with dry_materials available.
- what is the result: The player has dry_materials in their inventory.

- entities:
  - entity name: player
    - unchanged
  - entity name: location
    - unchanged
  - entity name: dry_materials
    - before: available at their current location
    - after: in the player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at a location with dry_materials available.
2. Add the dry_materials to the player's inventory and remove them from the location.

pddl:
(:action get_dry_materials
  :parameters (?p - player ?loc - location ?dm - dry_materials)
  :precondition (and (at ?p ?loc) (at ?dm ?loc))
  :effect (and (not (at ?dm ?loc)) (inventory ?p ?dm))
)

- action name: build_teepee
- summarize action: The player constructs a teepee structure with logs and dry materials.
- what is need to do the action: The player has logs and dry_materials in their inventory.
- what is the result: The player has a built teepee.

- entities:
  - entity name: player
    - before: no teepee
    - after: teepee built
  - entity name: logs
    - unchanged
  - entity name: dry_materials
    - unchanged
  
- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has logs and dry_materials in their inventory.
2. Update the player's status to having a built teepee.

pddl:
(:action build_teepee
  :parameters (?p - player ?log - logs ?dm - dry_materials)
  :precondition (and (inventory ?p ?log) (inventory ?p ?dm))
  :effect (inventory ?p ?tp - teepee)
)

- action name: start_fire
- summarize action: The player ignites the fire using a teepee structure, logs, and dry materials.
- what is need to do the action: The player has a built teepee, logs, and dry_materials in their inventory.
- what is the result: The player has a fire for warmth, protection, and cooking.

- entities:
  - entity name: player
    - before: no fire
    - after: has fire
  - entity name: teepee
    - unchanged
  - entity name: logs
    - unchanged
  - entity name: dry_materials
    - unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has a built teepee, logs, and dry_materials in their inventory.
2. Update the player's status to having a fire.

pddl:
(:action start_fire
  :parameters (?p - player ?tp - teepee ?log - logs ?dm - dry_materials)
  :precondition (and (inventory ?p ?tp) (inventory ?p ?log) (inventory ?p ?dm))
  :effect (has_fire ?p)
)