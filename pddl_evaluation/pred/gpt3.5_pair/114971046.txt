(:action drive
   :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location)
   :precondition (and (driving ?p) (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?p ?loc1)) (at ?p ?loc2))
)

(:action walk
   :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location)
   :precondition (and (not (driving ?p)) (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?p ?loc1)) (at ?p ?loc2))
)

(:action get_food
   :parameters (?p - player ?obj - item ?loc - location)
   :precondition (and (at ?p ?loc) (is_supermarket ?loc) (is_nonperishable ?obj) (not (inventory ?p ?obj)))
   :effect (and (not (at ?obj ?loc)) (inventory ?p ?obj))
)

(:action get
   :parameters (?p - player ?obj - item ?loc - location)
   :precondition (and (at ?p ?loc) (at ?obj ?loc))
   :effect (and (not (at ?obj ?loc)) (inventory ?p ?obj))
)

(:action drop
   :parameters (?p - player ?obj - item ?loc - location)
   :precondition (and (at ?p ?loc) (inventory ?p ?obj))
   :effect (and (not (inventory ?p ?obj)) (at ?obj ?loc))
)

(:action make_plan
   :parameters (?p - player)
   :precondition (and (has_plan ?p))
   :effect (and)
)

(:action get_medicine
   :parameters (?p - player ?obj - item ?loc - location)
   :precondition (and (at ?p ?loc) (is_pharmacy ?loc) (is_medicine ?obj) (not (inventory ?p ?obj)))
   :effect (and (not (at ?obj ?loc)) (inventory ?p ?obj))
)

(:action reinforce
   :parameters (?p - player ?obj - item ?loc - location)
   :precondition (and (at ?p ?loc) (is_construction_material ?obj) (not (inventory ?p ?obj)))
   :effect (and (not (at ?obj ?loc)) (inventory ?p ?obj))
)

(:action stay_in_shelter
   :parameters (?p - player ?loc - location)
   :precondition (at ?p ?loc)
   :effect (sheltered ?p)
)

(:action get_in_car
   :parameters (?p - player ?car - item ?loc1 - location ?dir - direction ?loc2 - location)
   :precondition (and (driving ?car) (at ?p ?loc1) (at ?car ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?p ?loc1)) (not (at ?car ?loc1)) (at ?p ?loc2) (at ?car ?loc2))
)

)