### Actions

- Action Name: `go`

#### Summary:
The "go" action allows the player to navigate from one location to an adjacent location, assuming there are no blocked paths.

#### What is Needed to Do the Action:
To navigate, the conditions that need to be met include the locations being connected and unblocked, and the player being at the initial location.

#### What is the Result:
After navigation, the player’s location changes from the initial location to the adjacent location.

- Entities:
  - Entity Name: `player`
    - Before: At the initial location.
    - After: At the adjacent location.
  - Entity Name: `initial location`
    - Before: Player is at this location.
    - After: Player is no longer at this location.
  - Entity Name: `adjacent location`
    - Before: Player is not at this location.
    - After: Player is at this location.

#### PDDL:
```
(:action go
  :parameters (?player - player ?loc1 - location ?dir - direction ?loc2 - location)
  :precondition (and
    (at ?player ?loc1)
    (connected ?loc1 ?dir ?loc2)
    (not (blocked ?loc1 ?dir ?loc2))
  )
  :effect (and
    (not (at ?player ?loc1))
    (at ?player ?loc2)
  )
)
```

***

- Action Name: `get`

#### Summary:
The "get" action allows the player to pick up an item from a location and add it to their inventory.

#### What is Needed to Do the Action:
The item must be at the same location as the player.

#### What is the Result:
The item is transferred from the location to the player’s inventory.

- Entities:
  - Entity Name: `player`
    - Before: Has no item in inventory.
    - After: Has item in inventory.
  - Entity Name: `item`
    - Before: At the same location as player.
    - After: In player’s inventory.
  - Entity Name: `location`
    - Before: The item is here.
    - After: The item is no longer here.

#### PDDL:
```
(:action get
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and
    (at ?player ?loc)
    (at ?item ?loc)
  )
  :effect (and
    (not (at ?item ?loc))
    (inventory ?player ?item)
  )
)
```

***

- Action Name: `get_water`

#### Summary:
The "get_water" action allows the player to collect water from a location that has a water source, storing it in a container such as a canteen.

#### What is Needed to Do the Action:
The location must have a water source, and the player must be at this location.

#### What is the Result:
Water is added to the player’s inventory in a container.

- Entities:
  - Entity Name: `player`
    - Before: At a location with a water source.
    - After: Has water in the inventory.
  - Entity Name: `water source`
    - Before: At the location.
    - After: Not consumed or changed.
  - Entity Name: `location`
    - Before: Has a water source.
    - After: Unchanged.

#### PDDL:
```
(:action get_water
  :parameters (?player - player ?loc - location ?water - water ?container - container)
  :precondition (and
    (at ?player ?loc)
    (has_water ?loc)
  )
  :effect (and
    (inventory ?player ?container)
    (treated ?water) ; Assume water is decontaminated by default.
  )
)
```

***

- Action Name: `bag_plant`

#### Summary:
The "bag_plant" action allows the player to bag a plant, which could be useful for gathering plants.

#### What is Needed to Do the Action:
The player must be at the same location as the plant and have a bag in their inventory.

#### What is the Result:
The plant is bagged and marked accordingly.

- Entities:
  - Entity Name: `player`
    - Before: Has a bag in inventory.
    - After: Has a bag in inventory.
  - Entity Name: `plant`
    - Before: At the same location as player and not bagged.
    - After: Bagged.

#### PDDL:
```
(:action bag_plant
  :parameters (?player - player ?plant - plant ?loc - location ?bag - bag)
  :precondition (and
    (at ?player ?loc)
    (at ?plant ?loc)
    (inventory ?player ?bag)
  )
  :effect (bagged ?plant)
)
```

***

- Action Name: `wait_and_gather_bagged_plant`

#### Summary:
The "wait_and_gather_bagged_plant" action implies waiting until the plant inside the bag is ready for gathering.

#### What is Needed to Do the Action:
The plant must be bagged.

#### What is the Result:
The plant is gathered and added to inventory.

- Entities:
  - Entity Name: `player`
    - Before: Plant not gathered.
    - After: Plant gathered in inventory.
  - Entity Name: `plant`
    - Before: Bagged.
    - After: In player’s inventory.

#### PDDL:
```
(:action wait_and_gather_bagged_plant
  :parameters (?player - player ?plant - plant ?bag - bag)
  :precondition (and
    (bagged ?plant)
  )
  :effect (inventory ?player ?plant)
)
```

***

- Action Name: `gather_tinder`

#### Summary:
The "gather_tinder" action allows the player to collect tinder from a location.

#### What is Needed to Do the Action:
The location must have tinder available.

#### What is the Result:
Tinder is added to the player’s inventory.

- Entities:
  - Entity Name: `player`
    - Before: No tinder in inventory.
    - After: Tinder in inventory.
  - Entity Name: `tinder`
    - Before: At the location.
    - After: In player's inventory.
  - Entity Name: `location`
    - Before: Has tinder.
    - After: No more tinder.

#### PDDL:
```
(:action gather_tinder
  :parameters (?player - player ?tinder - tinder ?loc - location)
  :precondition (and
    (at ?player ?loc)
    (has_tinder ?loc)
  )
  :effect (and
    (inventory ?player ?tinder)
    (not (has_tinder ?loc))
  )
)
```

***

- Action Name: `build_campfire`

#### Summary:
The "build_campfire" action allows the player to construct a campfire at the location using available resources.

#### What is Needed to Do the Action:
The player must have the required items like wood in their inventory.

#### What is the Result:
A campfire is created at the location.

- Entities:
  - Entity Name: `player`
    - Before: Has wood in inventory.
    - After: Wood removed from inventory.
  - Entity Name: `location`
    - Before: No campfire.
    - After: Campfire built at location.
  - Entity Name: `campfire`
    - Before: Does not exist.
    - After: Exists at location.

#### PDDL:
```
(:action build_campfire
  :parameters (?player - player ?wood - wood ?loc - location)
  :precondition (and
    (at ?player ?loc)
    (inventory ?player ?wood)
  )
  :effect (and
    (not (inventory ?player ?wood))
    (at campfire ?loc)
  )
)
```

***

- Action Name: `light_campfire`

#### Summary:
The "light_campfire" action allows the player to light an existing campfire at their location.

#### What is Needed to Do the Action:
A campfire must be present at the location and the player must have a means to light it (e.g., tinder, matches).

#### What is the Result:
The campfire is lit.

- Entities:
  - Entity Name: `player`
    - Before: Has the means to light the fire.
    - After: Means to light used up (optional).
  - Entity Name: `campfire`
    - Before: Unlit.
    - After: Lit.

#### PDDL:
```
(:action light_campfire
  :parameters (?player - player ?campfire - campfire ?loc - location ?tinder - tinder)
  :precondition (and
    (at ?player ?loc)
    (at ?campfire ?loc)
    (inventory ?player ?tinder)
  )
  :effect (lit ?campfire)
)
```

***

- Action Name: `make_spear`

#### Summary:
The "make_spear" action allows the player to craft a spear from wood and sharp stone.

#### What is Needed to Do the Action:
The player must have wood and a sharp stone in their inventory.

#### What is the Result:
A spear is created and placed in the player’s inventory.

- Entities:
  - Entity Name: `player`
    - Before: Has wood and sharp stone.
    - After: Wood and sharp stone used up, spear in inventory.
  - Entity Name: `wood`
    - Before: In player’s inventory.
    - After: Used up.
  - Entity Name: `sharp stone`
    - Before: In player’s inventory.
    - After: Used up.
  - Entity Name: `spear`
    - Before: Does not exist.
    - After: Exists in player’s inventory.

#### PDDL:
```
(:action make_spear
  :parameters (?player - player ?wood - wood ?sharp_stone - sharp_stone ?spear - spear)
  :precondition (and
    (inventory ?player ?wood)
    (inventory ?player ?sharp_stone)
  )
  :effect (and
    (not (inventory ?player ?wood))
    (not (inventory ?player ?sharp_stone))
    (inventory ?player ?spear)
  )
)
```

***

- Action Name: `spear_fish`

#### Summary:
The "spear_fish" action allows the player to fish using a spear at a location where fish are present.

#### What is Needed to Do the Action:
The player must be at a location with fish and have a spear.

#### What is the Result:
Fish is obtained and placed in the player’s inventory.

- Entities:
  - Entity Name: `player`
    - Before: Has a spear.
    - After: Has a fish in addition to the spear.
  - Entity Name: `fish`
    - Before: At the location.
    - After: In player’s inventory.
  - Entity Name: `location`
    - Before: Has fish.
    - After: Possibly still has fish, or fish reduced.

#### PDDL:
```
(:action spear_fish
  :parameters (?player - player ?location - location ?fish - fish ?spear - spear)
  :precondition (and
    (at ?player ?location)
    (has_fish ?location)
    (inventory ?player ?spear)
  )
  :effect (and
    (inventory ?player ?fish)
  )
)
```

***

- Action Name: `cook_fish`

#### Summary:
The "cook_fish" action allows the player to cook fish on a lit campfire.

#### What is Needed to Do the Action:
The player must be at a location with a lit campfire and have fish in their inventory.

#### What is the Result:
The fish is cooked.

- Entities:
  - Entity Name: `player`
    - Before: Has uncooked fish.
    - After: Has cooked fish.
  - Entity Name: `fish`
    - Before: Uncooked in inventory.
    - After: Cooked in inventory.
  - Entity Name: `campfire`
    - Before: Lit campfire present.
    - After: Lit campfire still present.

#### PDDL:
```
(:action cook_fish
  :parameters (?player - player ?fish - fish ?campfire - campfire ?location - location)
  :precondition (and
    (at ?player ?location)
    (at ?campfire ?location)
    (lit ?campfire)
    (inventory ?player ?fish)
  )
  :effect (cooked ?fish)
)
```

***

- Action Name: `wet_tinder`

#### Summary:
The "wet_tinder" action allows the player to wet tinder, which can be useful for creating a smoke signal.

#### What is Needed to Do the Action:
The player must have tinder and be at a location with water.

#### What is the Result:
Tinder becomes wet.

- Entities:
  - Entity Name: `player`
    - Before: Has dry tinder.
    - After: Has wet tinder.
  - Entity Name: `tinder`
    - Before: Dry in inventory.
    - After: Wet in inventory.
  - Entity Name: `water`
    - Before: At the location.
    - After: Unchanged.

#### PDDL:
```
(:action wet_tinder
  :parameters (?player - player ?tinder - tinder ?location - location ?water - water)
  :precondition (and
    (at ?player ?location)
    (inventory ?player ?tinder)
    (has_water ?location)
  )
  :effect (wet ?tinder)
)
```
***

- Action Name: `make_smoke_signal`

#### Summary:
The "make_smoke_signal" action allows the player to create a smoke signal by adding wet tinder to a lit campfire.

#### What is Needed to Do the Action:
The player must be at a location with a lit campfire and wet tinder in their inventory.

#### What is the Result:
A smoke signal is created.

- Entities:
  - Entity Name: `player`
    - Before: Has wet tinder.
    - After: Wet tinder may be used up.
  - Entity Name: `campfire`
    - Before: Lit.
    - After: Creating signals.
  - Entity Name: `tinder`
    - Before: Wet.
    - After: Used up or still wet.

#### PDDL:
```
(:action make_smoke_signal
  :parameters (?player - player ?campfire - campfire ?location - location ?tinder - tinder)
  :precondition (and
    (at ?player ?location)
    (at ?campfire ?location)
    (lit ?campfire)
    (wet ?tinder)
  )
  :effect (signaling ?campfire)
)
```

### Summary
Now you have logically structured actions for surviving on a deserted island with nothing, following the PDDL format for practical planning in AI systems. Each action covers the necessary preconditions and effects on entities involved, aiming at facilitating incremental planning to achieve survival goals.