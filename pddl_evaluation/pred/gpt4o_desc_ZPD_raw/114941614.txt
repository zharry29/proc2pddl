Sure, let’s apply the specified format to each action based on the provided text:

### 1. Action: go
- summarize action: The player navigates from their current location to an adjacent location.
- what is needed to do the action: The locations must be connected and must not be blocked.
- what is the result: The player moves to the new location.

- entities:
  - entity name: player
  - before: at a different location
  - after: at the target location
  - entity name: loc1
  - before: current location of the player
  - after: not the player's location
  - entity name: loc2
  - before: not the player's location
  - after: current location of the player

pddl:
```pddl
(:action go
 :parameters (?p - player ?loc1 - location ?loc2 - location ?dir - direction)
 :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
 :effect (and (at ?p ?loc2) (not (at ?p ?loc1)))
)
```

### 2. Action: get
- summarize action: The player picks up an item and puts it in their inventory.
- what is needed to do the action: The player and the item must be at the same location.
- what is the result: The item is added to the player’s inventory.

- entities:
  - entity name: item
  - before: at the same location as the player
  - after: in the player's inventory
  - entity name: player
  - before: at the same location as the item
  - after: inventory contains the item

pddl:
```pddl
(:action get
 :parameters (?p - player ?item - item ?loc - location)
 :precondition (and (at ?p ?loc) (at ?item ?loc))
 :effect (and (inventory ?p ?item) (not (at ?item ?loc)))
)
```

### 3. Action: collect_water
- summarize action: The player collects water from a location with a water source into a container.
- what is needed to do the action: The player must have an empty container and be at a location with a water source.
- what is the result: The container is filled with water.

- entities:
  - entity name: player
  - before: at a location with water source, container not full
  - after: container full with water
  - entity name: container
  - before: empty
  - after: filled with water

pddl:
```pddl
(:action collect_water
 :parameters (?p - player ?container - container ?loc - location ?water - water)
 :precondition (and (at ?p ?loc) (has_water_source ?loc) (not (is_full ?container)))
 :effect (and (contains ?container ?water) (is_full ?container))
)
```

### 4. Action: gather_sticks
- summarize action: The player gathers sticks from the ground at their current location.
- what is needed to do the action: The location must have sticks available.
- what is the result: Sticks are added to the player’s inventory.

- entities:
  - entity name: player
  - before: at a location with sticks
  - after: inventory includes sticks
  - entity name: sticks
  - before: on the ground
  - after: in the player’s inventory

pddl:
```pddl
(:action gather_sticks
 :parameters (?p - player ?loc - location ?sticks - sticks)
 :precondition (and (at ?p ?loc) (has_sticks ?loc))
 :effect (inventory ?p ?sticks)
)
```

### 5. Action: make_fire
- summarize action: The player creates a fire at their current location.
- what is needed to do the action: The player must have sticks and an igniter in their inventory.
- what is the result: A fire is created at the current location.

- entities:
  - entity name: player
  - before: has sticks and igniter
  - after: same
  - entity name: location
  - before: no fire
  - after: has fire

pddl:
```pddl
(:action make_fire
 :parameters (?p - player ?loc - location ?sticks - sticks ?igniter - igniter)
 :precondition (and (at ?p ?loc) (inventory ?p ?sticks) (inventory ?p ?igniter))
 :effect (has_fire ?loc)
)
```

### 6. Action: boil_water
- summarize action: The player boils water that is inside a container at their current location.
- what is needed to do the action: The player must have a container filled with water and there must be a fire at their location.
- what is the result: The water in the container is no longer contaminated.

- entities:
  - entity name: water
  - before: in container, might be contaminated
  - after: in container, contamination removed if any
  - entity name: container
  - before: contains water
  - after: contains water

pddl:
```pddl
(:action boil_water
 :parameters (?p - player ?container - container ?water - water ?loc - location)
 :precondition (and (at ?p ?loc) (contains ?container ?water) (is_contaminated ?water) (has_fire ?loc))
 :effect (not (is_contaminated ?water))
)
```

### 7. Action: cook_food
- summarize action: The player cooks food to remove contamination.
- what is needed to do the action: The player must have food in their inventory, and there must be a fire at their current location.
- what is the result: The food is no longer contaminated.

- entities:
  - entity name: food
  - before: contaminated
  - after: not contaminated
  - entity name: player
  - before: has contaminated food in inventory
  - after: has uncontaminated food in inventory

pddl:
```pddl
(:action cook_food
 :parameters (?p - player ?food - food ?loc - location)
 :precondition (and (at ?p ?loc) (inventory ?p ?food) (is_contaminated ?food) (has_fire ?loc))
 :effect (not (is_contaminated ?food))
)
```

### 8. Action: eat_poisoned_food
- summarize action: The player eats food that is poisonous.
- what is needed to do the action: The player must have the poisonous food in their inventory.
- what is the result: The player becomes sick from eating the poisonous food and is no longer hungry.

- entities:
  - entity name: food
  - before: in player’s inventory, poisonous
  - after: removed from inventory
  - entity name: player
  - before: hungry, not sick
  - after: not hungry, sick

pddl:
```pddl
(:action eat_poisoned_food
 :parameters (?p - player ?food - food)
 :precondition (and (inventory ?p ?food) (is_poisonous ?food) (is_hungry ?p))
 :effect (and (is_sick ?p) (not (inventory ?p ?food)) (not (is_hungry ?p)))
)
```

### 9. Action: eat_contaminated_food
- summarize action: The player eats food that is contaminated.
- what is needed to do the action: The player must have the contaminated food in their inventory.
- what is the result: The player becomes sick from eating the contaminated food and is no longer hungry.

- entities:
  - entity name: food
  - before: in player’s inventory, contaminated
  - after: removed from inventory
  - entity name: player
  - before: hungry, not sick
  - after: not hungry, sick

pddl:
```pddl
(:action eat_contaminated_food
 :parameters (?p - player ?food - food)
 :precondition (and (inventory ?p ?food) (is_contaminated ?food) (is_hungry ?p))
 :effect (and (is_sick ?p) (not (inventory ?p ?food)) (not (is_hungry ?p)))
)
```

### 10. Action: eat_food
- summarize action: The player eats food that is not harmful.
- what is needed to do the action: The player must have non-contaminated and non-poisonous food in their inventory.
- what is the result: The player is no longer hungry.

- entities:
  - entity name: food
  - before: in player’s inventory, not harmful
  - after: removed from inventory
  - entity name: player
  - before: hungry
  - after: not hungry

pddl:
```pddl
(:action eat_food
 :parameters (?p - player ?food - food)
 :precondition (and (inventory ?p ?food) (not (is_contaminated ?food)) (not (is_poisonous ?food)) (is_hungry ?p))
 :effect (and (not (inventory ?p ?food)) (not (is_hungry ?p)))
)
```

### 11. Action: drink_contaminated_water
- summarize action: The player drinks contaminated water from a container.
- what is needed to do the action: The player must have a container filled with contaminated water.
- what is the result: The player becomes sick from drinking the contaminated water and is no longer thirsty.

- entities:
  - entity name: water
  - before: in container, contaminated
  - after: removed from container
  - entity name: player
  - before: thirsty
  - after: not thirsty, sick

pddl:
```pddl
(:action drink_contaminated_water
 :parameters (?p - player ?container - container ?water - water)
 :precondition (and (contains ?container ?water) (is_contaminated ?water) (is_thirsty ?p))
 :effect (and (is_sick ?p) (not (contains ?container ?water)) (not (is_thirsty ?p)))
)
```

### 12. Action: drink_water
- summarize action: The player drinks clean water from a container.
- what is needed to do the action: The player must have a container filled with clean water.
- what is the result: The player is no longer thirsty.

- entities:
  - entity name: water
  - before: in container, clean
  - after: removed from container
  - entity name: player
  - before: thirsty
  - after: not thirsty

pddl:
```pddl
(:action drink_water
 :parameters (?p - player ?container - container ?water - water)
 :precondition (and (contains ?container ?water) (not (is_contaminated ?water)) (is_thirsty ?p))
 :effect (and (not (contains ?container ?water)) (not (is_thirsty ?p)))
)
```

### 13. Action: build_shelter
- summarize action: The player builds a shelter using sticks and leaves at their current location.
- what is needed to do the action: The player must have sticks and leaves in their inventory and a location available for building.
- what is the result: A shelter is created at the current location.

- entities:
  - entity name: player
  - before: has sticks and leaves in inventory
  - after: same
  - entity name: location
  - before: no shelter
  - after: has shelter

pddl:
```pddl
(:action build_shelter
 :parameters (?p - player ?loc - location ?sticks - sticks ?leaves - leaves)
 :precondition (and (at ?p ?loc) (inventory ?p ?sticks) (inventory ?p ?leaves))
 :effect (has_shelter ?loc)
)
```

### 14. Action: sleep_in_shelter
- summarize action: The player sleeps in the shelter and becomes un-tired.
- what is needed to do the action: The player must be at a location with a shelter.
- what is the result: The player is no longer tired.

- entities:
  - entity name: player
  - before: tired
  - after: not tired
  - entity name: location
  - before: has shelter
  - after: has shelter

pddl:
```pddl
(:action sleep_in_shelter
 :parameters (?p - player ?loc - location)
 :precondition (and (at ?p ?loc) (has_shelter ?loc) (is_tired ?p))
 :effect (not (is_tired ?p))
)
```