- action name: go
- summarize action: The player moves from one location to another in a given direction.
- what is needed to do the action: player, starting location, direction, and destination location
- what is the result: player's location changes from starting location to destination location

- entities:
  - entity name: player
    - before: at starting location
    - after: at destination location
  - entity name: starting location
    - before: player is at the location
    - after: unchanged
  - entity name: direction
    - before: unchanged
    - after: unchanged
  - entity name: destination location
    - before: player not at the location
    - after: player is at the location

- describe how to match it to pddl relevant predicates step by step:
1. Check if player is at the starting location.
2. Check if starting location and destination location are connected by the given direction.
3. Move the player from starting location to destination location.

pddl:
(:action go
  :parameters (?player - player ?start_loc - location ?dir - direction ?dest_loc - location)
  :precondition (and (at ?player ?start_loc) (connected ?start_loc ?dir ?dest_loc))
  :effect (and (not (at ?player ?start_loc)) (at ?player ?dest_loc))
)

- action name: get
- summarize action: The player collects an item from the current location.
- what is needed to do the action: player, location, item
- what is the result: player gains the item from the location, and item is no longer at the location.

- entities:
  - entity name: player
    - before: unchanged
    - after: has the item in inventory
  - entity name: location
    - before: item is at the location
    - after: item no longer at the location
  - entity name: item
    - before: at location
    - after: in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if player is at the location where the item is.
2. Remove the item from the location.
3. Add the item to the player's inventory.

pddl:
(:action get
  :parameters (?player - player ?loc - location ?item - item)
  :precondition (and (at ?player ?loc) (at ?item ?loc))
  :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

- action name: drop
- summarize action: The player drops an item from inventory to the current location.
- what is needed to do the action: player, location, item
- what is the result: player loses the item from inventory, and item is now at the location.

- entities:
  - entity name: player
    - before: has the item in inventory
    - after: no longer has the item in inventory
  - entity name: location
    - before: item not at the location
    - after: item is at the location
  - entity name: item
    - before: in player's inventory
    - after: at location

- describe how to match it to pddl relevant predicates step by step:
1. Check if player is at the location and has the item in inventory.
2. Remove the item from the player's inventory.
3. Add the item to the location.

pddl:
(:action drop
  :parameters (?player - player ?loc - location ?item - item)
  :precondition (and (at ?player ?loc) (inventory ?player ?item))
  :effect (and (not (inventory ?player ?item)) (at ?item ?loc))
)

- action name: collect_water
- summarize action: The player collects water from a location with water source.
- what is needed to do the action: player, location, water
- what is the result: player gains water in inventory.

- entities:
  - entity name: player
    - before: unchanged
    - after: has water in inventory
  - entity name: location
    - before: has water source
    - after: unchanged
  - entity name: water
    - before: not in player's inventory
    - after: in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if player is at the location with a water source and does not have water in inventory.
2. Add water to the player's inventory.

pddl:
(:action collect_water
  :parameters (?player - player ?loc - location ?water - water)
  :precondition (and (at ?player ?loc) (has_water ?loc) (not (inventory ?player ?water)))
  :effect (inventory ?player ?water)
)

- action name: filter_water
- summarize action: The player filters collected water to make it safe for consumption.
- what is needed to do the action: player, unfiltered water
- what is the result: unfiltered water becomes filtered water.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: unfiltered water
    - before: in player's inventory
    - after: replaced by filtered water in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has unfiltered water in inventory.
2. Replace unfiltered water with filtered water in player's inventory.

pddl:
(:action filter_water
  :parameters (?player - player ?unfiltered_water - water ?filtered_water - water)
  :precondition (and (inventory ?player ?unfiltered_water) (not (filtered ?unfiltered_water)))
  :effect (and (not (inventory ?player ?unfiltered_water)) (inventory ?player ?filtered_water) (filtered ?filtered_water))
)

- action name: boil_water
- summarize action: The player boils filtered water to make it safe for consumption.
- what is needed to do the action: player, location with fire, filtered water
- what is the result: filtered water becomes boiled water.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: location
    - before: has fire
    - after: unchanged
  - entity name: filtered water
    - before: in player's inventory
    - after: replaced by boiled water in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at a location with fire and has filtered water in inventory.
2. Replace filtered water with boiled water in player's inventory.

pddl:
(:action boil_water
  :parameters (?player - player ?loc - location ?filtered_water - water ?boiled_water - water)
  :precondition (and (at ?player ?loc) (has_fire ?loc) (inventory ?player ?filtered_water) (filtered ?filtered_water))
  :effect (and (not (inventory ?player ?filtered_water)) (inventory ?player ?boiled_water) (boiled ?boiled_water))
)

- action name: drink_water
- summarize action: The player drinks boiled water to quench thirst.
- what is needed to do the action: player, boiled water
- what is the result: the player is no longer thirsty.

- entities:
  - entity name: player
    - before: thirsty
    - after: not thirsty
  - entity name: boiled water
    - before: in player's inventory
    - after: consumed

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is thirsty and has boiled water in inventory.
2. Make the player not thirsty and remove boiled water from inventory.

pddl:
(:action drink_water
  :parameters (?player - player ?boiled_water - water)
  :precondition (and (thirsty ?player) (inventory ?player ?boiled_water) (boiled ?boiled_water))
  :effect (and (not (thirsty ?player)) (not (inventory ?player ?boiled_water)))
)

- action name: get_wood
- summarize action: The player collects wood from a location with trees.
- what is needed to do the action: player, location, wood
- what is the result: player gains wood in inventory.

- entities:
  - entity name: player
    - before: unchanged
    - after: has wood in inventory
  - entity name: location
    - before: has trees
    - after: unchanged
  - entity name: wood
    - before: not in player's inventory
    - after: in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if player is at the location with trees and does not have wood in inventory.
2. Add wood to the player's inventory.

pddl:
(:action get_wood
  :parameters (?player - player ?loc - location ?wood - wood)
  :precondition (and (at ?player ?loc) (has_tree ?loc) (not (inventory ?player ?wood)))
  :effect (inventory ?player ?wood)
)

- action name: make_drill
- summarize action: The player creates a drill from the collected wood.
- what is needed to do the action: player, wood, drill
- what is the result: player gains a drill in inventory.

- entities:
  - entity name: player
    - before: unchanged
    - after: has drill in inventory
  - entity name: wood
    - before: in player's inventory
    - after: consumed
  - entity name: drill
    - before: not in player's inventory
    - after: in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has wood in inventory and does not have drill in inventory.
2. Remove wood from player's inventory and add drill to inventory.

pddl:
(:action make_drill
  :parameters (?player - player ?wood - wood ?drill - drill)
  :precondition (and (inventory ?player ?wood) (not (inventory ?player ?drill)))
  :effect (and (not (inventory ?player ?wood)) (inventory ?player ?drill))
)

- action name: make_fire
- summarize action: The player creates a fire at the current location using a drill and wood.
- what is needed to do the action: player, location, drill, wood
- what is the result: fire is created at the location.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: location
    - before: fire not present
    - after: fire present
  - entity name: drill
    - before: in player's inventory
    - after: unchanged
  - entity name: wood
    - before: in player's inventory
    - after: consumed

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has drill and wood in inventory and is at a location without fire.
2. Remove wood from player's inventory and create fire at the location.

pddl:
(:action make_fire
  :parameters (?player - player ?loc - location ?drill - drill ?wood - wood)
  :precondition (and (at ?player ?loc) (inventory ?player ?drill) (inventory ?player ?wood) (not (has_fire ?loc)))
  :effect (and (not (inventory ?player ?wood)) (has_fire ?loc))
)

- action name: make_spear
- summarize action: The player creates a spear from the collected wood.
- what is needed to do the action: player, wood, spear
- what is the result: player gains a spear in inventory.

- entities:
  - entity name: player
    - before: unchanged
    - after: has spear in inventory
  - entity name: wood
    - before: in player's inventory
    - after: consumed
  - entity name: spear
    - before: not in player's inventory
    - after: in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has wood in inventory and does not have spear in inventory.
2. Remove wood from player's inventory and add spear to inventory.

pddl:
(:action make_spear
  :parameters (?player - player ?wood - wood ?spear - spear)
  :precondition (and (inventory ?player ?wood) (not (inventory ?player ?spear)))
  :effect (and (not (inventory ?player ?wood)) (inventory ?player ?spear))
)

- action name: catch_fish
- summarize action: The player catches a fish using the spear at a location with fish.
- what is needed to do the action: player, location, spear, fish
- what is the result: player gains a fish in inventory.

- entities:
  - entity name: player
    - before: unchanged
    - after: has fish in inventory
  - entity name: location
    - before: has fish
    - after: unchanged
  - entity name: spear
    - before: in player's inventory
    - after: unchanged
  - entity name: fish
    - before: not in player's inventory
    - after: in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has a spear in inventory and is at a location with fish.
2. Add fish to the player's inventory.

pddl:
(:action catch_fish
  :parameters (?player - player ?loc - location ?spear - spear ?fish - fish)
  :precondition (and (at ?player ?loc) (has_fish ?loc) (inventory ?player ?spear) (not (inventory ?player ?fish)))
  :effect (inventory ?player ?fish)
)

- action name: cook_fish
- summarize action: The player cooks the caught fish at a location with fire.
- what is needed to do the action: player, location, uncooked fish
- what is the result: uncooked fish becomes cooked fish.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: location
    - before: has fire
    - after: unchanged
  - entity name: uncooked fish
    - before: in player's inventory
    - after: replaced by cooked fish in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has uncooked fish in inventory and is at a location with fire.
2. Replace uncooked fish with cooked fish in player's inventory.

pddl:
(:action cook_fish
  :parameters (?player - player ?loc - location ?uncooked_fish - fish ?cooked_fish - fish)
  :precondition (and (at ?player ?loc) (has_fire ?loc) (inventory ?player ?uncooked_fish) (not (cooked ?uncooked_fish)))
  :effect (and (not (inventory ?player ?uncooked_fish)) (inventory ?player ?cooked_fish) (cooked ?cooked_fish))
)

- action name: eat_fish
- summarize action: The player eats the cooked fish to satisfy hunger.
- what is needed to do the action: player, cooked fish
- what is the result: the player is no longer hungry.

- entities:
  - entity name: player
    - before: hungry
    - after: not hungry
  - entity name: cooked fish
    - before: in player's inventory
    - after: consumed

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is hungry and has cooked fish in inventory.
2. Make the player not hungry and remove cooked fish from inventory.

pddl:
(:action eat_fish
  :parameters (?player - player ?cooked_fish - fish)
  :precondition (and (hungry ?player) (inventory ?player ?cooked_fish) (cooked ?cooked_fish))
  :effect (and (not (hungry ?player)) (not (inventory ?player ?cooked_fish)))
)

- action name: get_foliage
- summarize action: The player collects foliage from a location.
- what is needed to do the action: player, location, foliage
- what is the result: player gains foliage in inventory.

- entities:
  - entity name: player
    - before: unchanged
    - after: has foliage in inventory
  - entity name: location
    - before: has foliage
    - after: unchanged
  - entity name: foliage
    - before: not in player's inventory
    - after: in player's inventory

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at the location with foliage and does not have foliage in inventory.
2. Add foliage to the player's inventory.

pddl:
(:action get_foliage
  :parameters (?player - player ?loc - location ?foliage - foliage)
  :precondition (and (at ?player ?loc) (not (inventory ?player ?foliage)))
  :effect (inventory ?player ?foliage)
)

- action name: build_shelter
- summarize action: The player builds a shelter at a location using collected foliage.
- what is needed to do the action: player, location, foliage
- what is the result: shelter is built at the location.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: location
    - before: no shelter
    - after: has shelter
  - entity name: foliage
    - before: in player's inventory
    - after: consumed

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has foliage in inventory and is at a location without shelter.
2. Remove foliage from player's inventory and create shelter at the location.

pddl:
(:action build_shelter
  :parameters (?player - player ?loc - location ?foliage - foliage)
  :precondition (and (at ?player ?loc) (inventory ?player ?foliage) (not (has_shelter ?loc)))
  :effect (and (not (inventory ?player ?foliage)) (has_shelter ?loc))
)

- action name: survive
- summarize action: The player survives in the jungle by fulfilling all their needs.
- what is needed to do the action: player, safe location
- what is the result: player is safe.

- entities:
  - entity name: player
    - before: not safe
    - after: safe
  - entity name: location
    - before: has shelter, fire, and is free from threats
    - after: unchanged

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at a safe location with shelter, fire, and no threats.
2. Declare the player safe.

pddl:
(:action survive
  :parameters (?player - player ?loc - location)
  :precondition (and (at ?player ?loc) (has_shelter ?loc) (has_fire ?loc) (not (thirsty ?player)) (not (hungry ?player)))
  :effect (safe ?player ?loc)
)