- action name: go
- summarize action: The player moves from one location to another in a certain direction.
- what is needed to do the action: The player should be at a location, and the destination should be connected to the current location in the specified direction.
- what is the result: The player moves to the destination location.

- entities:
  - entity name: player
    - before: at the current location
    - after: at the destination location
  - entity name: direction
    - before: unchanged
    - after: unchanged
  - entity name: current_location
    - before: player is at this location
    - after: player is not at this location
  - entity name: destination_location
    - before: player is not at this location
    - after: player is at this location

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at the current location using the (at ?obj - object ?loc - location) predicate.
2. Check if the destination location is connected to the current location in the specified direction using the (connected ?loc1 - location ?dir - direction ?loc2 - location) predicate.
3. Move the player to the destination location by updating the (at ?obj - object ?loc - location) predicate.

pddl:
(:action go
 :parameters (?player - player ?dir - direction ?current_loc - location ?dest_loc - location)
 :precondition (and (at ?player ?current_loc)
                     (connected ?current_loc ?dir ?dest_loc))
 :effect (and (at ?player ?dest_loc)
              (not (at ?player ?current_loc))))
                              
- action name: get
- summarize action: The player picks up an item at their current location.
- what is needed to do the action: The player should be at a location, and the item should be at the same location.
- what is the result: The player has the item in their inventory.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: item
    - before: at the same location as the player
    - after: in the player's inventory
  - entity name: location
    - before: contains the item
    - after: does not contain the item

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at the location using the (at ?obj - object ?loc - location) predicate.
2. Check if the item is at the same location using the (at ?obj - object ?loc - location) predicate.
3. Add the item to the player's inventory using the (inventory ?player ?item) predicate and remove the item from the location.

pddl:
(:action get
 :parameters (?player - player ?item - item ?loc - location)
 :precondition (and (at ?player ?loc)
                     (at ?item ?loc))
 :effect (and (inventory ?player ?item)
              (not (at ?item ?loc))))

- action name: build_roof
- summarize action: The player builds a roof using logs, small sticks, leaves, and vines at their current location.
- what is needed to do the action: The player should be at a location and have logs, small sticks, leaves, and vines in their inventory.
- what is the result: A roof is created at the player's location.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: logs
    - before: in the player's inventory
    - after: used in the roof construction
  - entity name: small_sticks
    - before: in the player's inventory
    - after: used in the roof construction
  - entity name: leaves
    - before: in the player's inventory
    - after: used in the roof construction
  - entity name: vines
    - before: in the player's inventory
    - after: used in the roof construction
  - entity name: location
    - before: no roof
    - after: contains a roof
  - entity name: roof
    - before: not built
    - after: built at the player's location

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has logs, small sticks, leaves, and vines in their inventory using the (inventory ?player ?item) predicate.
2. Check if the player is at the location using the (at ?obj - object ?loc - location) predicate.
3. Create a built roof at the location.

pddl:
(:action build_roof
 :parameters (?player - player ?loc - location ?logs - log ?small_sticks - small_sticks ?leaves - leaves ?vines - vines)
 :precondition (and (at ?player ?loc)
                     (inventory ?player ?logs)
                     (inventory ?player ?small_sticks)
                     (inventory ?player ?leaves)
                     (inventory ?player ?vines))
 :effect (exists (?roof - roof) (built ?roof ?loc)))

- action name: build_wall
- summarize action: The player builds a wall using logs, small sticks, and vines at their current location.
- what is needed to do the action: The player should be at a location and have logs, small sticks, and vines in their inventory.
- what is the result: A wall is created at the player's location.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: logs
    - before: in the player's inventory
    - after: used in the wall construction
  - entity name: small_sticks
    - before: in the player's inventory
    - after: used in the wall construction
  - entity name: vines
    - before: in the player's inventory
    - after: used in the wall construction
  - entity name: location
    - before: no wall
    - after: contains a wall
  - entity name: wall
    - before: not built
    - after: built at the player's location

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has logs, small sticks, and vines in their inventory using the (inventory ?player ?item) predicate.
2. Check if the player is at the location using the (at ?obj - object ?loc - location) predicate.
3. Create a built wall at the location.

pddl:
(:action build_wall
 :parameters (?player - player ?loc - location ?logs - log ?small_sticks - small_sticks ?vines - vines)
 :precondition (and (at ?player ?loc)
                     (inventory ?player ?logs)
                     (inventory ?player ?small_sticks)
                     (inventory ?player ?vines))
 :effect (exists (?wall - wall) (built ?wall ?loc)))

- action name: build_bed
- summarize action: The player builds a bed using leaves and small sticks at their current location.
- what is needed to do the action: The player should be at a location and have leaves and small sticks in their inventory.
- what is the result: A bed is created at the player's location.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: leaves
    - before: in the player's inventory
    - after: used in the bed construction
  - entity name: small_sticks
    - before: in the player's inventory
    - after: used in the bed construction
  - entity name: location
    - before: no bed
    - after: contains a bed
  - entity name: bed
    - before: not built
    - after: built at the player's location

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has leaves and small sticks in their inventory using the (inventory ?player ?item) predicate.
2. Check if the player is at the location using the (at ?obj - object ?loc - location) predicate.
3. Create a built bed at the location.

pddl:
(:action build_bed
 :parameters (?player - player ?loc - location ?leaves - leaves ?small_sticks - small_sticks)
 :precondition (and (at ?player ?loc)
                     (inventory ?player ?leaves)
                     (inventory ?player ?small_sticks))
 :effect (exists (?bed - bed) (built ?bed ?loc)))

- action name: complete_shelter
- summarize action: The player completes the shelter by having a built roof, built wall, and built bed at their location.
- what is_needed to do the action: The player should have a built roof, wall, and bed at their location.
- what is the_result: A complete shelter is created at the player's location.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: roof
    - before: built at the player's location
    - after: part of the complete shelter
  - entity name: wall
    - before: built at the player's location
    - after: part of the complete shelter
  - entity name: bed
    - before: built at the player's location
    - after: part of the complete shelter
  - entity name: location
    - before: contains a built roof, wall, and bed
    - after: contains a complete shelter
  - entity name: shelter
    - before: not completed
    - after: completed

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at the location with a built roof, built wall, and built bed using the (built ?entity ?loc) predicate.
2. Complete the shelter at the location.

pddl:
(:action complete_shelter
 :parameters (?player - player ?loc - location ?roof - roof ?wall - wall ?bed - bed)
 :precondition (and (at ?player ?loc)
                     (built ?roof ?loc)
                     (built ?wall ?loc)
                     (built ?bed ?loc))
 :effect (exists (?shelter - shelter) (built ?shelter ?loc)))

- action name: hunt_animal
- summarize action: The player hunts an animal using a sharp stone or spear at their current location.
- what is needed to do the action: The player should be at a location and have a sharp stone or spear in their inventory.
- what is the result: The player successfully hunts an animal.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: sharp_stone_or_spear
    - before: in the player's inventory
    - after: unchanged (used in hunting)
  - entity name: location
    - before: animal presence
    - after: the animal is hunted
  - entity name: animal
    - before: alive and not hunted
    - after: hunted by the player

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has a sharp stone or spear in their inventory using the (inventory ?player ?item) predicate.
2. Check if the player is at the location using the (at ?obj - object ?loc - location) predicate.
3. Hunt the animal.

pddl:
(:action hunt_animal
 :parameters (?player - player ?loc - location ?sharp_stone_or_spear - (either sharp_stone spear))
 :precondition (and (at ?player ?loc)
                     (inventory ?player ?sharp_stone_or_spear))
 :effect (forall (?animal - animal) (not (alive ?animal))))

- action name: prepare_animal
- summarize action: The player prepares the hunted animal for consumption.
- what is needed to do the action: The player should have a hunted animal.
- what is the result: The animal is prepared and safe to consume.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: animal
    - before: hunted but not treated
    - after: treated and safe to consume

- describe how to match it to pddl relevant predicates step by step:
1. Check if the animal is hunted using the (not (alive ?animal)) predicate.
2. Prepare the animal using the (treated ?animal - animal) predicate.

pddl:
(:action prepare_animal
 :parameters (?player - player ?animal - animal)
 :precondition (not (alive ?animal))
 :effect (treated ?animal))

- action name: build_raft
- summarize action: The player builds a raft using logs, small_sticks, and vines at their current location.
- what is needed to do the action: The player should be at a location and have logs, small_sticks, and vines in their inventory.
- what is the result: A draft raft is created at the player's location.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: logs
    - before: in the player's inventory
    - after: used in the raft construction
  - entity name: small_sticks
    - before: in the player's inventory
    - after: used in the raft construction
  - entity name: vines
    - before: in the player's inventory
    - after: used in the raft construction
  - entity name: location
    - before: no draft raft
    - after: contains a draft raft
  - entity name: raft_draft
    - before: not built
    - after: built at the player's location

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player has logs, small_sticks, and vines in their inventory using the (inventory ?player ?item) predicate.
2. Check if the player is at the location using the (at ?obj - object ?loc - location) predicate.
3. Create a built raft_draft at the location.

pddl:
(:action build_raft
 :parameters (?player - player ?loc - location ?logs - log ?small_sticks - small_sticks ?vines - vines)
 :precondition (and (at ?player ?loc)
                     (inventory ?player ?logs)
                     (inventory ?player ?small_sticks)
                     (inventory ?player ?vines))
 :effect (exists (?raft_draft - raft_draft) (built ?raft_draft ?loc)))

- action name: test_raft
- summarize action: The player tests the draft raft at their current location near water, and if successful, the raft_draft becomes raft_finished.
- what is_needed to do the action: The player should be at a location near water and have a raft_draft.
- what is the_result: The draft raft becomes a finished raft.

- entities:
  - entity name: player
    - before: unchanged
    - after: unchanged
  - entity name: location
    - before: contains a draft raft
    - after: contains a finished raft
  - entity name: raft_draft
    - before: built but not tested
    - after: no longer a raft_draft
  - entity name: raft_finished
    - before: not built
    - after: built

- describe how to match it to pddl relevant predicates step by step:
1. Check if the player is at the location using the (at ?obj - object ?loc - location) predicate.
2. Check if the location has a draft raft using the (built ?entity ?loc) predicate.
3. Test the raft_draft and make it a finished raft.

pddl:
(:action test_raft
 :parameters (?player - player ?loc - location ?raft_draft - raft_draft)
 :precondition (and (at ?player ?loc)
                     (built ?raft_draft ?loc))
 :effect (and (not (built ?raft_draft ?loc))
              (exists (?raft_finished - raft_finished) (built ?raft_finished ?loc))))