action name: go
summarize action: Navigation to an adjacent location.
what is needed to do the action: Player, location and direction to move.
what is the result: The player ends up in a new location.

entities: 
- entity: player
  - before: in source location 
  - after: in destination location
- entity: locations in all directions
  - before: potentially unreachable 
  - after: potentially reachable

pddl action:

(:action go
  :parameters (?player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
  :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)
  
===

action name: get
summarize action: Pickup an item and put it in the inventory.
what is needed to do the action: The item and player location.
what is the result: The item ends up in the player's inventory.

entities:
- entity: item
  - before: at location
  - after: in player's inventory
- entity: player
  - before: does not have item
  - after: has item in inventory

pddl action:

(:action get
  :parameters (?player ?item - object ?loc - location)
  :precondition (and (at ?player ?loc) (at ?item ?loc))
  :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

The rest of the actions are similar in structure, with varying parameters. They follow the pattern of defining the requirements (precondition), the entities involved and their status before and after (parameters and effect respectively). Remember that the keywords ":precondition" and ":effect" are used to separate conditions that must be met to perform the action from the results of the action.
action name: build_roof
summarize action: Building a roof with a log.
what is needed to do the action: Player, location and log.
what is the result: A roof is constructed.

entities: 
- entity: roof
  - before: not constructed 
  - after: constructed
- entity: log
  - before: in player's inventory
  - after: used for construction, not in player's inventory

pddl action:

(:action build_roof
  :parameters (?player ?log - log ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?log))
  :effect (and (not (inventory ?player ?log)) (at ?roof ?loc))
)

===

action name: build_wall
summarize action: Building a wall with small sticks.
what is needed to do the action: Player, location and small sticks.
what is the result: A wall is constructed.

entities: 
- entity: wall
  - before: not constructed 
  - after: constructed
- entity: small sticks
  - before: in player's inventory
  - after: used for construction, not in player's inventory

pddl action:

(:action build_wall
  :parameters (?player ?small_sticks - small_sticks ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?small_sticks))
  :effect (and (not (inventory ?player ?small_sticks)) (at ?wall ?loc))
)

I'll provide the PDDL for the rest (build_bed, complete_shelter, hunt_animal, prepare_animal, build_raft, test_raft) if you need more examples.
Sure, let's continue.

action name: build_bed
summarize action: Building a bed with leaves.
what is needed to do the action: Player, location and leaves.
what is the result: A bed is constructed.

entities: 
- entity: bed
  - before: not constructed 
  - after: constructed
- entity: leaves
  - before: in player's inventory
  - after: used for construction, not in player's inventory

pddl action:

(:action build_bed
  :parameters (?player ?leaves - leaves ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?leaves))
  :effect (and (not (inventory ?player ?leaves)) (at ?bed ?loc))
)

===

action name: complete_shelter
summarize action: Completing the shelter with roof, wall and bed.
what is needed to do the action: Player, location, roof, wall, bed.
what is the result: A shelter is completed.

entities: 
- entity: shelter
  - before: not completed 
  - after: completed

pddl action:

(:action complete_shelter
  :parameters (?player ?roof - roof ?wall - wall ?bed - bed ?loc - location)
  :precondition (and (at ?player ?loc) (at ?roof ?loc) (at ?wall ?loc) (at ?bed ?loc))
  :effect (at ?shelter ?loc)
)

===

action name: hunt_animal
summarize action: Hunting animals with a sharp stone.
what is needed to do the action: Player, location, sharp stone, and animal.
what is the result: Animal is hunted.

entities:
- entity: animal
  - before: alive
  - after: hunted

pddl action:

(:action hunt_animal
  :parameters (?player ?sharp_stone - sharp_stone ?animal - animal ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?sharp_stone) (at ?animal ?loc))
  :effect (and (not (at ?animal ?loc)) (inventory ?player ?animal))
)

===

I'll continue with the rest (prepare_animal, build_raft, test_raft) if you need more examples.
Absolutely, here are the remaining actions:

action name: prepare_animal
summarize action: Preparing hunted animals with a sharp stone before eating.
what is needed to do the action: Player, location, sharp stone, and hunted animal.
what is the result: Animal is prepared and safe to eat.

entities:
- entity: animal
  - before: hunted, not safe to eat
  - after: prepared, safe to eat

pddl action:

(:action prepare_animal
  :parameters (?player ?sharp_stone - sharp_stone ?animal - animal ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?sharp_stone) (inventory ?player ?animal))
  :effect (treated ?animal)
)

===

action name: build_raft
summarize action: Building a raft.
what is needed to do the action: Player, location, raft materials.
what is the result: A raft is built.

entities:
- entity: raft_draft
  - before: in player's inventory
  - after: constructed into finished raft

pddl action:

(:action build_raft
  :parameters (?player ?raft_draft - raft_draft ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?raft_draft))
  :effect (and (not (inventory ?player ?raft_draft)) (at ?raft_finished ?loc))
)

===

action name: test_raft
summarize action: Testing a built raft before riding it.
what is needed to do the action: Player, location, built raft.
what is the result: The raft is tested and safe for use.

entities:
- entity: raft_finished
  - before: just constructed, not tested
  - after: tested, safe for use

pddl action:

(:action test_raft
  :parameters (?player ?raft_finished - raft_finished ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?raft_finished))
  :effect (tested ?raft_finished)
)

That concludes the actions listed. Each PDDL action follows the format of parameters (who and what are involved), precondition (what needs to be true before the action), and effect (what changes because of the action).