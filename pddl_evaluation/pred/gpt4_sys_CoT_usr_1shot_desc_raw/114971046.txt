- action name: drive
- summarize action: This represents the player driving a car to move from one location to another.
- what is needed to do the action: Player needs a car and the destination should be accessible by car.
- what is the result: The player is moved to the new location.

- entities:
  - entity name: car 
    - before: unused
    - after: in use
  - entity name: player 
    - before: at initial location
    - after: at destination location

pddl:
(:action drive
 :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location ?car - item)
 :precondition (and (at ?p ?loc1) (at ?car ?loc1) (is_car ?car) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
 :effect (and (not (at ?p ?loc1)) (at ?p ?loc2)))

- action name: walk
- summarize action: This action represents the player walking from one location to another.
- what is needed to do the action: Player should be able to walk to the destination location.
- what is the result: The player is moved to the new location.

- entities:
  - entity name: player 
    - before: at initial location
    - after: at destination location

pddl:
(:action walk
 :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location)
 :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
 :effect (and (not (at ?p ?loc1)) (at ?p ?loc2)))

- action name: get_food
- summarize action: This action represents the player getting non-perishable food from a supermarket.
- what is needed to do the action: Player needs to be at a supermarket location and there should be non-perishable food there.
- what is the result: The player gets non-perishable food in their inventory.

- entities:
  - entity name: non_perishable_food 
    - before: at the supermarket location
    - after: in player's inventory

pddl:
(:action get_food
 :parameters (?p - player ?loc - location ?food - item)
 :precondition (and (at ?p ?loc) (is_supermarket ?loc) (at ?food ?loc) (is_nonperishable ?food))
 :effect (and (not (at ?food ?loc)) (inventory ?p ?food)))

- action name: get_medicine
- summarize action: This action represents the player getting medicine from a pharmacy.
- what is needed to do the action: Player needs to be at a pharmacy location and there should be medicine there.
- what is the result: The player gets medicine in their inventory.

- entities:
  - entity name: medicine 
    - before: at the pharmacy location
    - after: in player's inventory

pddl:
(:action get_medicine
 :parameters (?p - player ?loc - location ?medicine - item)
 :precondition (and (at ?p ?loc) (is_pharmacy ?loc) (at ?medicine ?loc) (is_medicine ?medicine))
 :effect (and (not (at ?medicine ?loc)) (inventory ?p ?medicine)))

...
- action name: get
- summarize action: This action represents the player getting any item from a location.
- what is needed to do the action: Player needs to be at a location and there should be the item there.
- what is the result: The player gets the item in their inventory.

- entities:
  - entity name: item 
    - before: at the location
    - after: in player's inventory

pddl:
(:action get
 :parameters (?p - player ?loc - location ?item - item)
 :precondition (and (at ?p ?loc) (at ?item ?loc))
 :effect (and (not (at ?item ?loc)) (inventory ?p ?item)))

- action name: drop
- summarize action: This action represents the player dropping an item from their inventory to a location.
- what is needed to do the action: Player needs to have the item in their inventory.
- what is the result: The item is at the new location and removed from the player's inventory.

- entities:
  - entity name: item 
    - before: in player's inventory
    - after: at the new location

pddl:
(:action drop
 :parameters (?p - player ?loc - location ?item - item)
 :precondition (and (at ?p ?loc) (inventory ?p ?item))
 :effect (and (not (inventory ?p ?item)) (at ?item ?loc)))

- action name: make_plan
- summarize action: This action represents the player making a plan to survive.
- what is needed to do the action: Player needs to be able to make a plan.
- what is the result: The player has a plan.

- entities:
  - entity name: player 
    - before: with no plan
    - after: with a plan

pddl:
(:action make_plan
 :parameters (?p - player)
 :precondition (at ?p)
 :effect (has_plan ?p))

- action name: reinforce
- summarize action: This action represents the player reinforcing a location using construction material.
- what is needed to do the action: Player needs to be at a location and have construction materials in their inventory.
- what is the result: The location is reinforced.

- entities:
  - entity name: location 
    - before: normal
    - after: reinforced
  - entity name: construction_materials 
    - before: in player's inventory
    - after: used

pddl:
(:action reinforce
 :parameters (?p - player ?loc - location ?material - item)
 :precondition (and (at ?p ?loc) (inventory ?p ?material) (is_construction_material ?material))
 :effect (and (not (inventory ?p ?material)) (is_underground ?loc)))

...

Continuing the actions would exceed the character limit for Assistant's responses.
- action name: stay_in_shelter
- summarize action: This action indicates the player staying in a shelter.
- what is needed to do the action: The player needs to be in a sheltered place.
- what is the result: The player stays in the shelter.

- entities:
  - entity name: player 
    - before: at a sheltered place
    - after: remained in a sheltered place

pddl:
(:action stay_in_shelter
 :parameters (?p - player ?loc - location)
 :precondition (and (at ?p ?loc) (is_underground ?loc))
 :effect (sheltered ?p))

- action name: get_in_car
- summarize action: This action indicates the player getting into a car.
- what is needed to do the action: The player needs to be at the same location as the car.
- what is the result: The player is driving the car.

- entities:
  - entity name: player 
    - before: outside car
    - after: driving car
  - entity name: car 
    - before: parked
    - after: in use

pddl:
(:action get_in_car
 :parameters (?p - player ?car - item ?loc - location)
 :precondition (and (at ?p ?loc) (is_car ?car) (at ?car ?loc))
 :effect (driving ?p))