- action name: get_food
- summarize action: The player goes to a supermarket to stock up on non-perishable food supplies to last through a nuclear attack.
- what is needed to do the action: The player needs to be at a supermarket location.
- what is the result: The player has added non-perishable food items to their inventory.

- entities:
  - entity name: player
    - before: at a supermarket location
    - after: has non-perishable food items in inventory
  - entity name: non-perishable food items
    - before: at a supermarket location
    - after: in the player's inventory

- convert the above information to PDDL using relevant predicates step by step:
1. parameters: (get_food ?player - player ?loc - location ?item - item)
2. precondition: (and (is_supermarket ?loc) (at ?player ?loc) (is_nonperishable ?item))
3. effect: (inventory ?player ?item)

PDDL:
(:action get_food
 :parameters (?player - player ?loc - location ?item - item)
 :precondition (and (is_supermarket ?loc) (at ?player ?loc) (is_nonperishable ?item))
 :effect (inventory ?player ?item))
 
- action name: make_plan
- summarize action: The player makes a plan to ensure they have food, medical supplies and shelter, and assesses the risk of a nuclear attack by learning the proximity to potential targets.
- what is needed to do the action: The player needs information about potential targets.
- what is the result: The player has a plan for survival.

- entities:
  - entity name: player
    - before: no plan
    - after: has a plan

- convert the above information to PDDL using relevant predicates step by step:
1. parameters: (make_plan ?player - player)
2. precondition: (not (has_plan ?player))
3. effect: (has_plan ?player)

PDDL:
(:action make_plan
 :parameters (?player - player)
 :precondition (not (has_plan ?player))
 :effect (has_plan ?player))

- action name: get_medicine
- summarize action: The player goes to a pharmacy to stock up on medical supplies, including a first aid kit, instruction booklet, and any necessary prescription medications.
- what is needed to do the action: The player needs to be at a pharmacy location.
- what is the result: The player has added medical supplies to their inventory.

- entities:
  - entity name: player
    - before: at a pharmacy location
    - after: has medical supplies in inventory
  - entity name: medical supplies
    - before: at a pharmacy location
    - after: in the player's inventory

- convert the above information to PDDL using relevant predicates step by step:
1. parameters: (get_medicine ?player - player ?loc - location ?item - item)
2. precondition: (and (is_pharmacy ?loc) (at ?player ?loc) (is_medicine ?item))
3. effect: (inventory ?player ?item)

PDDL:
(:action get_medicine
 :parameters (?player - player ?loc - location ?item - item)
 :precondition (and (is_pharmacy ?loc) (at ?player ?loc) (is_medicine ?item))
 :effect (inventory ?player ?item))
- action name: stay_in_shelter
- summarize action: The player stays in a shelter during the nuclear attack and waits for at least 48 hours before venturing outside.
- what is needed to do the action: The player needs to be inside a sheltered location.
- what is the result: The player stays sheltered, increasing their chances of survival.

- entities:
  - entity name: player
    - before: at a sheltered location
    - after: remains in the sheltered location

- convert the above information to PDDL using relevant predicates step by step:
1. parameters: (stay_in_shelter ?player - player ?loc - location)
2. precondition: (and (is_underground ?loc) (at ?player ?loc))
3. effect: (sheltered ?player)

PDDL:
(:action stay_in_shelter
 :parameters (?player - player ?loc - location)
 :precondition (and (is_underground ?loc) (at ?player ?loc))
 :effect (sheltered ?player))

- action name: reinforce
- summarize action: The player reinforces their shelter with construction materials to improve its safety during a nuclear attack.
- what is needed to do the action: The player needs construction materials in their inventory and to be at a sheltered location.
- what is the result: The player has an improved and more resilient shelter.

- entities:
  - entity name: player
    - before: at a sheltered location with construction materials in inventory
    - after: sheltered location reinforced
  - entity name: construction materials
    - before: in player's inventory
    - after: used to reinforce the shelter

- convert the above information to PDDL using relevant predicates step by step:
1. parameters: (reinforce ?player - player ?loc - location ?item - item)
2. precondition: (and (is_underground ?loc) (at ?player ?loc) (inventory ?player ?item) (is_construction_material ?item))
3. effect: (and (not (inventory ?player ?item)) (reinforced ?loc))

PDDL:
(:action reinforce
 :parameters (?player - player ?loc - location ?item - item)
 :precondition (and (is_underground ?loc) (at ?player ?loc) (inventory ?player ?item) (is_construction_material ?item))
 :effect (and (not (inventory ?player ?item)) (reinforced ?loc)))
- action name: get_in_car
- summarize action: The player gets in a car to travel through blockades and increase their mobility.
- what is needed to do the action: The player needs a car in their inventory.
- what is the result: The player is now driving the car and can travel through blocked paths.

- entities:
  - entity name: player
    - before: has a car in the inventory
    - after: driving the car
  - entity name: car
    - before: in player's inventory
    - after: being driven by the player

- convert the above information to PDDL using relevant predicates step by step:
1. parameters: (get_in_car ?player - player ?item - item)
2. precondition: (and (inventory ?player ?item) (is_car ?item))
3. effect: (and (not (inventory ?player ?item)) (driving ?player))

PDDL:
(:action get_in_car
 :parameters (?player - player ?item - item)
 :precondition (and (inventory ?player ?item) (is_car ?item))
 :effect (and (not (inventory ?player ?item)) (driving ?player)))

- action name: drive
- summarize action: The player drives in a certain direction to travel between locations and overcome blockades.
- what is needed to do the action: The player needs to be driving, and the two locations need to be connected in the direction, even if it is blocked.
- what is the result: The player moves from one location to another.

- entities:
  - entity name: player
    - before: driving and at location 1
    - after: at location 2
  - entity name: location 1, location 2, and direction
    - before: locations are connected and possibly blocked
    - after: the player has moved from location 1 to location 2

- convert the above information to PDDL using relevant predicates step by step:
1. parameters: (drive ?player - player ?loc1 - location ?dir - direction ?loc2 - location)
2. precondition: (and (driving ?player) (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
3. effect: (and (not (at ?player ?loc1)) (at ?player ?loc2))

PDDL:
(:action drive
 :parameters (?player - player ?loc1 - location ?dir - direction ?loc2 - location)
 :precondition (and (driving ?player) (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
 :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))

- action name: walk
- summarize action: The player walks in a certain direction to travel between locations.
- what is needed to do the action: The player is not driving, and the two locations need to be connected in the direction without being blocked.
- what is the result: The player moves from one location to another.

- entities:
  - entity name: player
    - before: not driving and at location 1
    - after: at location 2
  - entity name: location 1, location 2, and direction
    - before: locations are connected and not blocked
    - after: the player has moved from location 1 to location 2

- convert the above information to PDDL using relevant predicates step by step:
1. parameters: (walk ?player - player ?loc1 - location ?dir - direction ?loc2 - location)
2. precondition: (and (not (driving ?player)) (at ?player ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
3. effect: (and (not (at ?player ?loc1)) (at ?player ?loc2))

PDDL:
(:action walk
 :parameters (?player - player ?loc1 - location ?dir - direction ?loc2 - location)
 :precondition (and (not (driving ?player)) (at ?player ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
 :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))