Sure, here it how it can be mapped:

```
(:action go
  :parameters (?player - player ?dir - direction ?loc - location)
  :precondition (connected ?loc1 - location ?dir ?loc2 - location)
  :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))

(:action get
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and (at ?player ?loc) (at ?item ?loc))
  :effect (and (not (at ?item ?loc)) (inventory ?player ?item)))

(:action drop
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (inventory ?player ?item)
  :effect (and (not (inventory ?player ?item)) (at ?item ?loc)))

(:action cook
  :parameters (?player - player ?food - food ?loc - location)
  :precondition (and (at ?player ?loc) (has_kitchen ?loc) (inventory ?player ?food))
  :effect (cooked ?food))

(:action order_sushi
  :parameters (?player - player ?phone - item ?sushi - sushi ?money - item)
  :precondition (and (inventory ?player ?phone) (inventory ?player ?money))
  :effect (inventory ?player ?sushi))

(:action buy_sake
  :parameters (?player - player ?money - item ?sake - drink ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?money))
  :effect (inventory ?player ?sake))

(:action serve
  :parameters (?player - player ?food - food ?drink - drink ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?food) (inventory ?player ?drink))
  :effect (served ?food ?drink))

(:action brew
  :parameters (?player - player ?tea - tea ?loc - location)
  :precondition (and (at ?player ?loc) (has_kitchen ?loc) (inventory ?player ?tea))
  :effect (brewed ?tea))

(:action get_beer
  :parameters (?player - player ?beer - drink ?loc - location)
  :precondition (and (at ?player ?loc) (has_fridge ?loc))
  :effect (inventory ?player ?beer))

(:action open
  :parameters (?player - player ?drink - drink)
  :precondition (inventory ?player ?drink)
  :effect (opened ?drink))

(:action hang_lantern
  :parameters (?player - player ?lantern - lantern ?loc - location)
  :precondition (and (at ?player ?loc) (inventory ?player ?lantern))
  :effect (hung ?lantern))

(:action blow_balloon
  :parameters (?player - player ?balloon - balloon)
  :precondition (inventory ?player ?balloon)
  :effect (inflated ?balloon))

(:action turn_on_tv
  :parameters (?player - player ?tv - item ?loc - location)
  :precondition (and (at ?player ?loc) (at ?tv ?loc))
  :effect (on ?tv))
```

Please make sure the predicates, types, etc. match your problem domain appropriately since PDDL assumes a closed-world representation.
