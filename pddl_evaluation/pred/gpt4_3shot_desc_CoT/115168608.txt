(:action go
 :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
 :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
 :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)

(:action get
 :parameters (?player - player ?item - item ?loc - location)
 :precondition (and (at ?item ?loc) (at ?player ?loc))
 :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action pour_water
 :parameters (?player - player ?water - water ?bowl - bowl)
 :precondition (and (inventory ?player ?water) (inventory ?player ?bowl))
 :effect (and (not (inventory ?player ?water)) (at ?water ?bowl))
)

(:action place_strips_between_boards
 :parameters (?player - player ?strips - papyrus_strips ?boards - wooden_boards)
 :precondition (and (inventory ?player ?strips) (inventory ?player ?boards))
 :effect (strips_between_boards)
)

(:action cut_stalks
 :parameters (?player - player ?tree - papyrus_tree ?pruner - pruner ?loc - location)
 :precondition (and (at ?player ?loc) (at ?tree ?loc) (inventory ?player ?pruner))
 :effect (inventory ?player papyrus_stalks)
)

(:action papyrus_strips
 :parameters (?player - player ?knife - knife ?stalks - papyrus_stalks)
 :precondition (and (inventory ?player ?knife) (inventory ?player ?stalks))
 :effect (and (not (inventory ?player ?stalks)) (inventory ?player papyrus_strips))
)

(:action polish_papyrus
 :parameters (?player - player ?stone - smooth_stone ?papyrus - papyrus)
 :precondition (and (inventory ?player ?stone) (inventory ?player ?papyrus))
 :effect (polished ?papyrus)
)

(:action flatten_papyrus
 :parameters (?player - player ?roller - roller ?papyrus - papyrus)
 :precondition (and (inventory ?player ?roller) (inventory ?player ?papyrus))
 :effect (flattened ?papyrus)
)

(:action cut_papyrus
 :parameters (?player - player ?scissors - scissors ?papyrus - papyrus)
 :precondition (and (inventory ?player ?scissors) (inventory ?player ?papyrus))
 :effect (cut ?papyrus)
)

(:action go
 :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
 :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
 :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)

(:action get
 :parameters (?player - player ?item - item ?loc - location)
 :precondition (and (at ?item ?loc) (at ?player ?loc))
 :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action pour_water
 :parameters (?player - player ?water - water ?bowl - bowl)
 :precondition (and (inventory ?player ?water) (inventory ?player ?bowl))
 :effect (and (not (inventory ?player ?water)) (at ?water ?bowl))
)

(:action place_strips_between_boards
 :parameters (?player - player ?strips - papyrus_strips ?boards - wooden_boards)
 :precondition (and (inventory ?player ?strips) (inventory ?player ?boards))
 :effect (strips_between_boards)
)

(:action cut_stalks
 :parameters (?player - player ?tree - papyrus_tree ?pruner - pruner ?loc - location)
 :precondition (and (at ?player ?loc) (at ?tree ?loc) (inventory ?player ?pruner))
 :effect (inventory ?player papyrus_stalks)
)

(:action papyrus_strips
 :parameters (?player - player ?knife - knife ?stalks - papyrus_stalks)
 :precondition (and (inventory ?player ?knife) (inventory ?player ?stalks))
 :effect (and (not (inventory ?player ?stalks)) (inventory ?player papyrus_strips))
)

(:action polish_papyrus
 :parameters (?player - player ?stone - smooth_stone ?papyrus - papyrus)
 :precondition (and (inventory ?player ?stone) (inventory ?player ?papyrus))
 :effect (polished ?papyrus)
)

(:action flatten_papyrus
 :parameters (?player - player ?roller - roller ?papyrus - papyrus)
 :precondition (and (inventory ?player ?roller) (inventory ?player ?papyrus))
 :effect (flattened ?papyrus)
)

(:action cut_papyrus
 :parameters (?player - player ?scissors - scissors ?papyrus - papyrus)
 :precondition (and (inventory ?player ?scissors) (inventory ?player ?papyrus))
 :effect (cut ?papyrus)
)

(:action go
 :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
 :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
 :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)

(:action get
 :parameters (?player - player ?item - item ?loc - location)
 :precondition (and (at ?item ?loc) (at ?player ?loc))
 :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action pour_water
 :parameters (?player - player ?water - water ?bowl - bowl)
 :precondition (and (inventory ?player ?water) (inventory ?player ?bowl))
 :effect (and (not (inventory ?player ?water)) (at ?water ?bowl))
)

(:action place_strips_between_boards
 :parameters (?player - player ?strips - papyrus_strips ?boards - wooden_boards)
 :precondition (and (inventory ?player ?strips) (inventory ?player ?boards))
 :effect (strips_between_boards)
)

(:action cut_stalks
 :parameters (?player - player ?tree - papyrus_tree ?pruner - pruner ?loc - location)
 :precondition (and (at ?player ?loc) (at ?tree ?loc) (inventory ?player ?pruner))
 :effect (inventory ?player papyrus_stalks)
)

(:action papyrus_strips
 :parameters (?player - player ?knife - knife ?stalks - papyrus_stalks)
 :precondition (and (inventory ?player ?knife) (inventory ?player ?stalks))
 :effect (and (not (inventory ?player ?stalks)) (inventory ?player papyrus_strips))
)

(:action polish_papyrus
 :parameters (?player - player ?stone - smooth_stone ?papyrus - papyrus)
 :precondition (and (inventory ?player ?stone) (inventory ?player ?papyrus))
 :effect (polished ?papyrus)
)

(:action flatten_papyrus
 :parameters (?player - player ?roller - roller ?papyrus - papyrus)
 :precondition (and (inventory ?player ?roller) (inventory ?player ?papyrus))
 :effect (flattened ?papyrus)
)

(:action cut_papyrus
 :parameters (?player - player ?scissors - scissors ?papyrus - papyrus)
 :precondition (and (inventory ?player ?scissors) (inventory ?player ?papyrus))
 :effect (cut ?papyrus)
)

(:action go
 :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
 :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
 :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))

(:action get
 :parameters (?player - player ?item - item ?loc - location)
 :precondition (and (at ?player ?loc) (at ?item ?loc))
 :effect (and (not (at ?item ?loc)) (inventory ?player ?item)))

(:action go
 :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
 :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
 :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))

(:action get
 :parameters (?player - player ?item - item ?loc - location)
 :precondition (and (at ?player ?loc) (at ?item ?loc))
 :effect (and (not (at ?item ?loc)) (inventory ?player ?item)))

(:action go
    :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
    :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)

(:action get
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (at ?player ?loc) (at ?item ?loc))
   :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action pour_water
  :parameters (?player - player ?water - water ?bowl - bowl)
  :precondition (and (inventory ?player ?water) (inventory ?player ?bowl))
  :effect (and (not (inventory ?player ?water)) (at ?water ?bowl))
)

(:action place_strips_between_boards
  :parameters (?player - player ?boards - wooden_boards ?strips - papyrus_strips)
  :precondition (inventory ?player ?strips)
  :effect (strips_between_boards)
)

(:action go
    :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
    :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)

(:action get
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (at ?player ?loc) (at ?item ?loc))
   :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action pour_water
  :parameters (?player - player ?water - water ?bowl - bowl)
  :precondition (and (inventory ?player ?water) (inventory ?player ?bowl))
  :effect (and (not (inventory ?player ?water)) (at ?water ?bowl))
)

(:action place_strips_between_boards
  :parameters (?player - player ?boards - wooden_boards ?strips - papyrus_strips)
  :precondition (inventory ?player ?strips)
  :effect (strips_between_boards)
)

(:action go
 :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
 :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
 :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))

(:action get
 :parameters (?player - player ?item - item ?loc - location)
 :precondition (and (at ?player ?loc) (at ?item ?loc))
 :effect (and (not (at ?item ?loc)) (inventory ?player ?item)))

)