(:action go
  :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and 
                (at ?player ?loc1) 
                (aware ?player ?loc2)
                (connected ?loc1 ?dir ?loc2)
                (not (blocked ?loc1 ?dir ?loc2)))
  :effect (and 
           (not (at ?player ?loc1)) 
           (at ?player ?loc2)))

(:action get
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and 
                (at ?item ?loc) 
                (at ?player ?loc))
  :effect (and 
           (not (at ?item ?loc)) 
           (inventory ?player ?item)))

(:action breathe
  :parameters (?player - player ?qs - quicksand)
  :precondition (and
                (stuck ?player ?qs))
  :effect (calm ?player))

(:action liedown
  :parameters (?player - player)
  :precondition (and
                (calm ?player)
                (not (laying ?player)))
  :effect (laying ?player))

(:action swim
  :parameters (?player - player ?qs - quicksand)
  :precondition (and
                (stuck ?player ?qs)
                (calm ?player)
                (laying ?player))
  :effect (not (stuck ?player ?qs)))

(:action usestick
  :parameters (?player - player ?stick - stick ?qs - quicksand)
  :precondition (and
                (stuck ?player ?qs)
                (inventory ?player ?stick))
  :effect (not (stuck ?player ?qs)))

(:action rest
  :parameters (?player - player)
  :precondition (and (tired ?player))
  :effect (not (tired ?player)))

(:action drop
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and 
                (at ?player ?loc) 
                (inventory ?player ?item))
  :effect (and 
           (not (inventory ?player ?item)) 
           (at ?item ?loc)))

(:action check_ripples
  :parameters (?player - player ?loc - location)
  :precondition (and 
                (at ?player ?loc)
                (has_ripples ?loc))
  :effect (aware ?player ?loc))

(:action test_ground
 :parameters (?player - player ?loc - location)
 :precondition (at ?player ?loc)
 :effect (if (has_quicksand ?loc) (aware ?player ?loc)))

(:action research
 :parameters (?player - player)
 :precondition (not (forall (?loc - location) (aware ?player ?loc)))
 :effect (forall (?loc - location) (aware ?player ?loc)))

(:action move_horizontally
  :parameters (?player - player ?qs - quicksand)
  :precondition (and 
                (stuck ?player ?qs)
                (laying ?player))
  :effect (not (stuck ?player ?qs)))

)