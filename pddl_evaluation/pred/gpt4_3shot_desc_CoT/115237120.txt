(:action go 
   :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location) 
   :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2)) 
   :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))

(:action get 
   :parameters (?player - player ?loc - location ?item - item)
   :precondition (at ?item ?loc)
   :effect (and (not (at ?item ?loc)) (inventory ?player ?item)))

(:action pour_water 
   :parameters (?player - player ?water - water ?bowl - bowl)
   :precondition (and (inventory ?player ?water))
   :effect (and (not (inventory ?player ?water)) (at ?bowl ?water)))

(:action place_strips_between_boards 
   :parameters (?strips - papyrus_strips ?boards - wooden_boards)
   :precondition (inventory ?strips)
   :effect strips_between_boards)

(:action cut_stalks 
    :parameters (?player - player ?tree - papyrus_tree ?pruner - pruner)
    :precondition (and (inventory ?player ?pruner) (at ?player ?tree))
    :effect (at ?player papyrus_stalks))

(:action papyrus_strips 
    :parameters (?player - player ?pruner - pruner ?stalks - papyrus_stalks)
    :precondition (and (inventory ?player ?pruner) (inventory ?player ?stalks))
    :effect (and (not (inventory ?player ?stalks)) (inventory ?player papyrus_strips)))

(:action polish_papyrus 
    :parameters (?player - player ?papyrus - papyrus ?stone - smooth_stone)
    :precondition (and (inventory ?player ?papyrus) (inventory ?player ?stone))
    :effect (polished ?papyrus))

(:action flatten_papyrus 
    :parameters (?player - player ?papyrus - papyrus ?roller - roller)
    :precondition (and (inventory ?player ?papyrus) (inventory ?player ?roller))
    :effect (flattened ?papyrus))

(:action cut_papyrus 
    :parameters (?player - player ?papyrus - papyrus ?scissors - scissors)
    :precondition (and (inventory ?player ?papyrus) (inventory ?player ?scissors))
    :effect (cut ?papyrus))

(:action go 
  :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
  :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))

(:action get 
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and (at ?player ?loc) (at ?item ?loc))
  :effect (and (not (at ?item ?loc)) (inventory ?player ?item)))

(:action go
    :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
    :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
    :effect (and (not (at ?player ?loc1)) (at ?player ?loc2) ))

(:action get
    :parameters (?player - player ?item - item ?loc - location)
    :precondition (and (at ?player ?loc) (at ?item ?loc))
    :effect (and (not (at ?item ?loc)) (inventory ?player ?item)))

(:action go 
 :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location) 
 :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2)) 
 :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)

(:action get 
 :parameters (?player - player ?item - item ?loc - location)
 :precondition (and (at ?player ?loc) (at ?item ?loc))
 :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action go
   :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
   :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
   :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))

(:action get
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and (at ?player ?loc) (at ?item ?loc))
   :effect (and (not (at ?item ?loc)) (inventory ?player ?item)))

(:action go 
  :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2)) 
  :effect (and (not (at ?player ?loc1)) (at ?player ?loc2)))

(:action get 
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and (at ?player ?loc) (at ?item ?loc)) 
  :effect (and (not (at ?item ?loc)) (inventory ?player ?item)))

(:action go 
  :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2))
  :effect (and (at ?player ?loc2) (not (at ?player ?loc1))))

(:action get 
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and (at ?player ?loc) (at ?item ?loc))
  :effect (and (inventory ?player ?item) (not (at ?item ?loc))))

)