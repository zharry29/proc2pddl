Sure, let's detail each of the actions step by step with the provided predicates and types. I'll save the PDDL format for the very end.

### 1. Action: go
- **Parameters:** 
  ```
  ?p - player
  ?loc1 - location
  ?dir - direction
  ?loc2 - location
  ```
- **Precondition:**
  ```
  (at ?p ?loc1)
  (connected ?loc1 ?dir ?loc2)
  (not (blocked ?loc1 ?dir ?loc2))
  ```
- **Effect:**
  ```
  (not (at ?p ?loc1))
  (at ?p ?loc2)
  ```
- **PDDL:**
  ```
  (:action go
   :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location)
   :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?p ?loc1)) (at ?p ?loc2)))
  ```

### 2. Action: get
- **Parameters:** 
  ```
  ?p - player
  ?item - item
  ?loc - location
  ```
- **Precondition:**
  ```
  (at ?p ?loc)
  (at ?item ?loc)
  ```
- **Effect:**
  ```
  (not (at ?item ?loc))
  (inventory ?p ?item)
  ```
- **PDDL:**
  ```
  (:action get
   :parameters (?p - player ?item - item ?loc - location)
   :precondition (and (at ?p ?loc) (at ?item ?loc))
   :effect (and (not (at ?item ?loc)) (inventory ?p ?item)))
  ```

### 3. Action: collect_water
- **Parameters:** 
  ```
  ?p - player
  ?loc - location
  ?container - container
  ?water - water
  ```
- **Precondition:**
  ```
  (at ?p ?loc)
  (has_water_source ?loc)
  ```
- **Effect:**
  ```
  (contains ?container ?water)
  (is_full ?container)
  ```
- **PDDL:**
  ```
  (:action collect_water
   :parameters (?p - player ?loc - location ?container - container ?water - water)
   :precondition (and (at ?p ?loc) (has_water_source ?loc))
   :effect (and (contains ?container ?water) (is_full ?container)))
  ```

### 4. Action: gather_sticks
- **Parameters:** 
  ```
  ?p - player
  ?loc - location
  ?sticks - sticks
  ```
- **Precondition:**
  ```
  (at ?p ?loc)
  (has_sticks ?loc)
  ```
- **Effect:**
  ```
  (inventory ?p ?sticks)
  ```
- **PDDL:**
  ```
  (:action gather_sticks
   :parameters (?p - player ?loc - location ?sticks - sticks)
   :precondition (and (at ?p ?loc) (has_sticks ?loc))
   :effect (inventory ?p ?sticks))
  ```

### 5. Action: make_fire
- **Parameters:** 
  ```
  ?p - player
  ?loc - location
  ?sticks - sticks
  ?igniter - igniter
  ```
- **Precondition:**
  ```
  (at ?p ?loc)
  (inventory ?p ?sticks)
  (inventory ?p ?igniter)
  ```
- **Effect:**
  ```
  (has_fire ?loc)
  (not (inventory ?p ?sticks))
  ```
- **PDDL:**
  ```
  (:action make_fire
   :parameters (?p - player ?loc - location ?sticks - sticks ?igniter - igniter)
   :precondition (and (at ?p ?loc) (inventory ?p ?sticks) (inventory ?p ?igniter))
   :effect (and (has_fire ?loc) (not (inventory ?p ?sticks))))
  ```

### 6. Action: boil_water
- **Parameters:** 
  ```
  ?p - player
  ?loc - location
  ?container - container
  ?water - water
  ```
- **Precondition:**
  ```
  (at ?p ?loc)
  (has_fire ?loc)
  (contains ?container ?water)
  (is_contaminated ?water)
  ```
- **Effect:**
  ```
  (not (is_contaminated ?water))
  ```
- **PDDL:**
  ```
  (:action boil_water
   :parameters (?p - player ?loc - location ?container - container ?water - water)
   :precondition (and (at ?p ?loc) (has_fire ?loc) (contains ?container ?water) (is_contaminated ?water))
   :effect (not (is_contaminated ?water)))
  ```

### 7. Action: cook_food
- **Parameters:** 
  ```
  ?p - player
  ?loc - location
  ?food - food
  ```
- **Precondition:**
  ```
  (at ?p ?loc)
  (has_fire ?loc)
  (is_contaminated ?food)
  ```
- **Effect:**
  ```
  (not (is_contaminated ?food))
  ```
- **PDDL:**
  ```
  (:action cook_food
   :parameters (?p - player ?loc - location ?food - food)
   :precondition (and (at ?p ?loc) (has_fire ?loc) (is_contaminated ?food))
   :effect (not (is_contaminated ?food)))
  ```

### 8. Action: eat_poisoned_food
- **Parameters:** 
  ```
  ?p - player
  ?food - food
  ```
- **Precondition:**
  ```
  (inventory ?p ?food)
  (is_poisonous ?food)
  (is_hungry ?p)
  ```
- **Effect:**
  ```
  (not (is_hungry ?p))
  (is_sick ?p)
  (not (inventory ?p ?food))
  ```
- **PDDL:**
  ```
  (:action eat_poisoned_food
   :parameters (?p - player ?food - food)
   :precondition (and (inventory ?p ?food) (is_poisonous ?food) (is_hungry ?p))
   :effect (and (not (is_hungry ?p)) (is_sick ?p) (not (inventory ?p ?food))))
  ```

### 9. Action: eat_contaminated_food
- **Parameters:** 
  ```
  ?p - player
  ?food - food
  ```
- **Precondition:**
  ```
  (inventory ?p ?food)
  (is_contaminated ?food)
  (is_hungry ?p)
  ```
- **Effect:**
  ```
  (not (is_hungry ?p))
  (is_sick ?p)
  (not (inventory ?p ?food))
  ```
- **PDDL:**
  ```
  (:action eat_contaminated_food
   :parameters (?p - player ?food - food)
   :precondition (and (inventory ?p ?food) (is_contaminated ?food) (is_hungry ?p))
   :effect (and (not (is_hungry ?p)) (is_sick ?p) (not (inventory ?p ?food))))
  ```

### 10. Action: eat_food
- **Parameters:** 
  ```
  ?p - player
  ?food - food
  ```
- **Precondition:**
  ```
  (inventory ?p ?food)
  (is_hungry ?p)
  (not (is_poisonous ?food))
  (not (is_contaminated ?food))
  ```
- **Effect:**
  ```
  (not (is_hungry ?p))
  (not (inventory ?p ?food))
  ```
- **PDDL:**
  ```
  (:action eat_food
   :parameters (?p - player ?food - food)
   :precondition (and (inventory ?p ?food) (is_hungry ?p) (not (is_poisonous ?food)) (not (is_contaminated ?food)))
   :effect (and (not (is_hungry ?p)) (not (inventory ?p ?food))))
  ```

### 11. Action: drink_contaminated_water
- **Parameters:** 
  ```
  ?p - player
  ?container - container
  ?water - water
  ```
- **Precondition:**
  ```
  (inventory ?p ?container)
  (contains ?container ?water)
  (is_contaminated ?water)
  (is_thirsty ?p)
  ```
- **Effect:**
  ```
  (not (is_thirsty ?p))
  (is_sick ?p)
  (not (contains ?container ?water))
  ```
- **PDDL:**
  ```
  (:action drink_contaminated_water
   :parameters (?p - player ?container - container ?water - water)
   :precondition (and (inventory ?p ?container) (contains ?container ?water) (is_contaminated ?water) (is_thirsty ?p))
   :effect (and (not (is_thirsty ?p)) (is_sick ?p) (not (contains ?container ?water))))
  ```

### 12. Action: drink_water
- **Parameters:** 
  ```
  ?p - player
  ?container - container
  ?water - water
  ```
- **Precondition:**
  ```
  (inventory ?p ?container)
  (contains ?container ?water)
  (not (is_contaminated ?water))
  (is_thirsty ?p)
  ```
- **Effect:**
  ```
  (not (is_thirsty ?p))
  (not (contains ?container ?water))
  ```
- **PDDL:**
  ```
  (:action drink_water
   :parameters (?p - player ?container - container ?water - water)
   :precondition (and (inventory ?p ?container) (contains ?container ?water) (not (is_contaminated ?water)) (is_thirsty ?p))
   :effect (and (not (is_thirsty ?p)) (not (contains ?container ?water))))
  ```

### 13. Action: build_shelter
- **Parameters:** 
  ```
  ?p - player
  ?loc - location
  ?leaves - leaves
  ?sticks - sticks
  ```
- **Precondition:**
  ```
  (at ?p ?loc)
  (inventory ?p ?leaves)
  (inventory ?p ?sticks)
  (has_tree ?loc)
  ```
- **Effect:**
  ```
  (has_shelter ?loc)
  (not (inventory ?p ?leaves))
  (not (inventory ?p ?sticks))
  ```
- **PDDL:**
  ```
  (:action build_shelter
   :parameters (?p - player ?loc - location ?leaves - leaves ?sticks - sticks)
   :precondition (and (at ?p ?loc) (inventory ?p ?leaves) (inventory ?p ?sticks) (has_tree ?loc))
   :effect (and (has_shelter ?loc) (not (inventory ?p ?leaves)) (not (inventory ?p ?sticks))))
  ```

### 14. Action: sleep_in_shelter
- **Parameters:** 
  ```
  ?p - player
  ?loc - location
  ```
- **Precondition:**
  ```
  (at ?p ?loc)
  (has_shelter ?loc)
  (is_tired ?p)
  ```
- **Effect:**
  ```
  (not (is_tired ?p))
  ```
- **PDDL:**
  ```
  (:action sleep_in_shelter
   :parameters (?p - player ?loc - location)
   :precondition (and (at ?p ?loc) (has_shelter ?loc) (is_tired ?p))
   :effect (not (is_tired ?p)))
  ```

Here you have all the actions detailed according to the requested predicates.