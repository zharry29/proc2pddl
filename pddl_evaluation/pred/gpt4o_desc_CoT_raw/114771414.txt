Sure, I can provide the PDDL actions step by step as per your requirements. Let's start with the first action and proceed in order.

### Action: go
- action name: go
- parameters: 
  ```
  (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
  ```
  
- precondition: 
  ```
  (at ?player ?loc1) 
  (connected ?loc1 ?dir ?loc2) 
  (not (blocked ?loc1 ?dir ?loc2))
  ```
  
- effect:
  ```
  (not (at ?player ?loc1))
  (at ?player ?loc2)
  ```

- pddl: 
  ```lisp
  (:action go
   :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
   :precondition (and 
                    (at ?player ?loc1) 
                    (connected ?loc1 ?dir ?loc2) 
                    (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and 
               (not (at ?player ?loc1))
               (at ?player ?loc2))
  )
  ```

### Action: get
- action name: get
- parameters: 
  ```
  (?player - player ?item - item ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc) 
  (at ?item ?loc)
  ```

- effect:
  ```
  (inventory ?player ?item)
  (not (at ?item ?loc))
  ```

- pddl:
  ```lisp
  (:action get
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and 
                    (at ?player ?loc) 
                    (at ?item ?loc))
   :effect (and 
               (inventory ?player ?item) 
               (not (at ?item ?loc)))
  )
  ```

### Action: get_water
- action name: get_water
- parameters: 
  ```
  (?player - player ?water - water ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc) 
  (has_water_source ?loc)
  ```

- effect:
  ```
  (inventory ?player ?water)
  ```

- pddl:
  ```lisp
  (:action get_water
   :parameters (?player - player ?water - water ?loc - location)
   :precondition (and 
                    (at ?player ?loc) 
                    (has_water_source ?loc))
   :effect (inventory ?player ?water)
  )
  ```

### Action: sharpen_stick
- action name: sharpen_stick
- parameters: 
  ```
  (?player - player ?stick - stick)
  ```

- precondition:
  ```
  (inventory ?player ?stick)
  ```

- effect:
  ```
  (edible ?stick)
  ```

- pddl:
  ```lisp
  (:action sharpen_stick
   :parameters (?player - player ?stick - stick)
   :precondition (inventory ?player ?stick)
   :effect (edible ?stick)
  )
  ```

### Action: catch_fish
- action name: catch_fish
- parameters: 
  ```
  (?player - player ?fish - fish ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc) 
  (has_fish ?loc)
  ```

- effect:
  ```
  (inventory ?player ?fish)
  ```

- pddl:
  ```lisp
  (:action catch_fish
   :parameters (?player - player ?fish - fish ?loc - location)
   :precondition (and 
                    (at ?player ?loc) 
                    (has_fish ?loc))
   :effect (inventory ?player ?fish)
  )
  ```

### Action: hunt_bird
- action name: hunt_bird
- parameters: 
  ```
  (?player - player ?bird - bird ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc)
  (has_bird ?loc)
  ```

- effect:
  ```
  (inventory ?player ?bird)
  ```

- pddl:
  ```lisp
  (:action hunt_bird
   :parameters (?player - player ?bird - bird ?loc - location)
   :precondition (and 
                    (at ?player ?loc) 
                    (has_bird ?loc))
   :effect (inventory ?player ?bird)
  )
  ```

### Action: hunt_insect
- action name: hunt_insect
- parameters: 
  ```
  (?player - player ?insect - insect ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc)
  (has_insect ?loc)
  ```

- effect:
  ```
  (inventory ?player ?insect)
  ```

- pddl:
  ```lisp
  (:action hunt_insect
   :parameters (?player - player ?insect - insect ?loc - location)
   :precondition (and 
                    (at ?player ?loc) 
                    (has_insect ?loc))
   :effect (inventory ?player ?insect)
  )
  ```

### Action: get_shellfish
- action name: get_shellfish
- parameters: 
  ```
  (?player - player ?shellfish - shellfish ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc)
  (has_shellfish ?loc)
  ```

- effect:
  ```
  (inventory ?player ?shellfish)
  ```

- pddl:
  ```lisp
  (:action get_shellfish
   :parameters (?player - player ?shellfish - shellfish ?loc - location)
   :precondition (and 
                    (at ?player ?loc) 
                    (has_shellfish ?loc))
   :effect (inventory ?player ?shellfish)
  )
  ```

### Action: cook
- action name: cook
- parameters: 
  ```
  (?player - player ?loc - location ?item - item)
  ```

- precondition:
  ```
  (at ?player ?loc)
  (has_fire ?loc)
  (inventory ?player ?item)
  ```

- effect:
  ```
  (edible ?item)
  ```

- pddl:
  ```lisp
  (:action cook
   :parameters (?player - player ?loc - location ?item - item)
   :precondition (and 
                    (at ?player ?loc) 
                    (has_fire ?loc)
                    (inventory ?player ?item))
   :effect (edible ?item)
  )
  ```

### Action: get_stick
- action name: get_stick
- parameters: 
  ```
  (?player - player ?stick - stick ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc) 
  (at ?stick ?loc)
  ```

- effect:
  ```
  (inventory ?player ?stick)
  (not (at ?stick ?loc))
  ```

- pddl:
  ```lisp
  (:action get_stick
   :parameters (?player - player ?stick - stick ?loc - location)
   :precondition (and 
                    (at ?player ?loc) 
                    (at ?stick ?loc))
   :effect (and 
               (inventory ?player ?stick)
               (not (at ?stick ?loc)))
  )
  ```

### Action: start_fire
- action name: start_fire
- parameters: 
  ```
  (?player - player ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc)
  ```

- effect:
  ```
  (has_fire ?loc)
  ```

- pddl:
  ```lisp
  (:action start_fire
   :parameters (?player - player ?loc - location)
   :precondition (at ?player ?loc)
   :effect (has_fire ?loc)
  )
  ```

### Action: get_tarp
- action name: get_tarp
- parameters: 
  ```
  (?player - player ?tarp - tarp ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc)
  (at ?tarp ?loc)
  ```

- effect:
  ```
  (inventory ?player ?tarp)
  (not (at ?tarp ?loc))
  ```

- pddl:
  ```lisp
  (:action get_tarp
   :parameters (?player - player ?tarp - tarp ?loc - location)
   :precondition (and 
                    (at ?player ?loc) 
                    (at ?tarp ?loc))
   :effect (and 
               (inventory ?player ?tarp) 
               (not (at ?tarp ?loc)))
  )
  ```

### Action: get_leave
- action name: get_leave
- parameters: 
  ```
  (?player - player ?leave - leave ?loc - location)
  ```

- precondition:
  ```
  (at ?player ?loc)
  (at ?leave ?loc)
  ```

- effect:
  ```
  (inventory ?player ?leave)
  (not (at ?leave ?loc))
  ```

- pddl:
  ```lisp
  (:action get_leave
   :parameters (?player - player ?leave - leave ?loc - location)
   :precondition (and 
                    (at ?player ?loc) 
                    (at ?leave ?loc))
   :effect (and 
               (inventory ?player ?leave)
               (not (at ?leave ?loc)))
  )
  ```

### Action: construct_shelter
- action name: construct_shelter
- parameters: 
  ```
  (?player - player ?loc - location ?stick - stick ?cover - (either tarp leave))
  ```

- precondition:
  ```
  (at ?player ?loc)
  (inventory ?player ?stick)
  (inventory ?player ?cover)
  ```

- effect:
  ```
  (sheltered ?loc)
  (not (inventory ?player ?stick))
  (not (inventory ?player ?cover))
  ```

- pddl:
  ```lisp
  (:action construct_shelter
   :parameters (?player - player ?loc - location ?stick - stick ?cover - (either tarp leave))
   :precondition (and 
                    (at ?player ?loc) 
                    (inventory ?player ?stick) 
                    (inventory ?player ?cover))
   :effect (and 
               (sheltered ?loc)
               (not (inventory ?player ?stick))
               (not (inventory ?player ?cover)))
  )
  ```

This completes the PDDL actions with the given predicates.