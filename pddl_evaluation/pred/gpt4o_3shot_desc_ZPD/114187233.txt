(:action go
  :parameters (?player - player ?current_loc - location ?direction - direction ?destination_loc - location)
  :precondition (and (at ?player ?current_loc) (connected ?current_loc ?direction ?destination_loc))
  :effect (and (not (at ?player ?current_loc)) (at ?player ?destination_loc))
)

(:action get
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and (at ?item ?loc) (at ?player ?loc))
  :effect (and (inventory ?player ?item) (not (at ?item ?loc)))
)

(:action drop
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and (inventory ?player ?item) (at ?player ?loc))
  :effect (and (at ?item ?loc) (not (inventory ?player ?item)))
)

(:action pierce
  :parameters (?player - player ?coconut - item)
  :precondition (and (inventory ?player ?coconut) (not (pierced ?coconut)))
  :effect (pierced ?coconut)
)

(:action drain
  :parameters (?player - player ?coconut - item)
  :precondition (and (inventory ?player ?coconut) (pierced ?coconut))
  :effect (empty ?coconut)
)

(:action turn_on_oven
  :parameters (?oven - appliance)
  :precondition (not (on ?oven))
  :effect (on ?oven)
)

(:action burn_item
  :parameters (?player - player ?item - item ?oven - appliance)
  :precondition (and (on ?oven) (inventory ?player ?item))
  :effect (burnt ?item)
)

(:action turn_off_oven
  :parameters (?oven - appliance)
  :precondition (on ?oven)
  :effect (not (on ?oven))
)

(:action wrap_coconut
  :parameters (?player - player ?coconut - item ?wrapper - item)
  :precondition (and (inventory ?player ?coconut) (inventory ?player ?wrapper) (not (wrapped ?coconut)))
  :effect (wrapped_with ?coconut ?wrapper)
)

(:action unwrap_coconut
  :parameters (?player - player ?coconut - item ?wrapper - item)
  :precondition (and (inventory ?player ?coconut) (wrapped_with ?coconut ?wrapper))
  :effect (not (wrapped_with ?coconut ?wrapper))
)

(:action smash_with_hands
  :parameters (?player - player ?coconut - item)
  :precondition (and (inventory ?player ?coconut) (not (smashed ?coconut)))
  :effect (smashed ?coconut)
)

(:action separate
  :parameters (?player - player ?coconut - item)
  :precondition (and (inventory ?player ?coconut) (smashed ?coconut))
  :effect (and (peeled ?coconut))
)

(:action peel
  :parameters (?player - player ?coconut - item)
  :precondition (and (inventory ?player ?coconut) (peeled ?coconut))
  :effect (peeled ?coconut)
)

(:action smash_with_mallet
  :parameters (?player - player ?coconut - item ?mallet - item)
  :precondition (and (inventory ?player ?coconut) (inventory ?player ?mallet) (not (smashed ?coconut)))
  :effect (smashed ?coconut)
)

)