- action name: gather_info
- summarize action: Read clique-like books, and discuss with a close friend about the idea of starting a secret society.
- what is needed to do the action: Two players (self and close friend), both need to read the books.
- what is the result: Both players gain the required information to start the secret society.

- entities:
  - entity name: self
    - before: Did not read the books.
    - after: Read the books.
  - entity name: close_friend
    - before: Did not read the books.
    - after: Read the books.

- convert the above information to pddl using relevant predicates step by step:
1. Check if self and close_friend have not read the books.
2. Make both self and close_friend read the books.
3. Change the status of self and close_friend to having read the books.

pddl:
```
(:action gather_info
 :parameters (?self - player ?close_friend - player)
 :precondition (and
                (not (has_info ?self))
                (not (has_info ?close_friend))
                (friends ?self ?close_friend))
 :effect (and
          (has_info ?self)
          (has_info ?close_friend)))
```

- action name: create_secret
- summarize action: Create a secret or a secret mission for the secret society.
- what is needed to do the action: A secret society without a secret.
- what is the result: A secret society with a secret.

- entities:
  - entity name: secret_society
    - before: Does not have a secret.
    - after: Has a secret.

- convert the above information to pddl using relevant predicates step by step:
1. Check if the secret_society does not have a secret.
2. Create a secret for the secret_society.
3. Change the status of the secret_society to having a secret.

pddl:
```
(:action create_secret
 :parameters (?society - secret_society)
 :precondition (not (has_secret ?society))
 :effect (has_secret ?society))
```

- action name: set_meeting_location
- summarize action: Set a meeting location for the secret society.
- what is needed to do the action: A secret society without a meeting location.
- what is the result: A secret society with a meeting location.

- entities:
  - entity name: secret_society
    - before: Does not have a meeting location.
    - after: Has a meeting location.

- convert the above information to pddl using relevant predicates step by step:
1. Check if the secret_society does not have a meeting location.
2. Set a meeting location for the secret_society.
3. Change the status of the secret_society to having a meeting location.

pddl:
```
(:action set_meeting_location
 :parameters (?society - secret_society)
 :precondition (not (has_location ?society))
 :effect (has_location ?society))
```

- action name: set_dress_code
- summarize action: Set a dress code for the secret society.
- what is needed to do the action: A secret society without a dress code.
- what is the result: A secret society with a dress code.

- entities:
  - entity name: secret_society
    - before: Does not have a dress code.
    - after: Has a dress code.

- convert the above information to pddl using relevant predicates step by step:
1. Check if the secret_society does not have a dress code.
2. Set a dress code for the secret_society.
3. Change the status of the secret_society to having a dress code.

pddl:
```
(:action set_dress_code
 :parameters (?society - secret_society)
 :precondition (not (has_dress_code ?society))
 :effect (has_dress_code ?society))
```

- action name: create_name
- summarize action: Create a name for the secret society and choose member candidates.
- what is needed to do the action: A secret society without a name, two players (self and close friend).
- what is the result: A secret society with a name.

- entities:
  - entity name: secret_society
    - before: Does not have a name.
    - after: Has a name.
  - entity name: self (player)
  - entity name: close_friend (player)

- convert the above information to pddl using relevant predicates step by step:
1. Check if the secret_society does not have a name.
2. Set a name for the secret_society.
3. Change the status of the secret_society to having a name.

pddl:
```
(:action create_name
 :parameters (?society - secret_society ?self - player ?close_friend - player)
 :precondition (and
                (not (has_name ?society))
                (has_info ?self)
                (has_info ?close_friend)
                (friends ?self ?close_friend))
 :effect (has_name ?society))
```

- action name: secret_society_is_ready
- summarize action: Check if the secret society is ready to induct members.
- what is needed to do the action: A secret society with a secret, name, meeting location, and dress code.
- what is the result: The secret society is marked as ready.

- entities:
  - entity name: secret_society
    - before: Not marked as ready.
    - after: Marked as ready.

- convert the above information to pddl using relevant predicates step by step:
1. Check if the secret_society has a secret, name, meeting location, and dress code.
2. Mark the secret_society as ready.

pddl:
```
(:action secret_society_is_ready
 :parameters (?society - secret_society)
 :precondition (and
                (has_secret ?society)
                (has_name ?society)
                (has_location ?society)
                (has_dress_code ?society))
 :effect (society_is_ready ?society))
```

- action name: initiate_new_member
- summarize action: Induct a new member into the secret society after verifying they are suitable for the society.
- what is needed to do the action: A player who is supposed to join the secret society, and the secret society must be ready.
- what is the result: The player becomes a member of the secret society, but does not know the secret.

- entities:
  - entity name: player
    - before: Not a member.
    - after: Member of the secret society.
  - entity name: secret_society

- convert the above information to pddl using relevant predicates step by step:
1. Check if the secrect_society is ready.
2. Check if the player is not a member of the secret society.
3. Make the player a member of the secret society without knowing the secret.

pddl:
```
(:action initiate_new_member
 :parameters (?player - player ?society - secret_society)
 :precondition (and
                (society_is_ready ?society)
                (not (in ?player ?society)))
 :effect (in ?player ?society))
```

- action name: teach_new_member_secret
- summarize action: Gradually reveal the secret to a new member.
- what is needed to do the action: A player who is a member of the secret society, but does not know the secret.
- what is the result: The player knows the secret.

- entities:
  - entity name: player
    - before: Does not know the secret.
    - after: Knows the secret.
  - entity name: secret_society

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is a member of the secret society without knowing the secret.
2. Teach the player the secret.
3. Change the status of the player to knowing the secret.

pddl:
```
(:action teach_new_member_secret
 :parameters (?player - player ?society - secret_society)
 :precondition (and
                (in ?player ?society)
                (not (knows_secret ?player ?society)))
 :effect (knows_secret ?player ?society))
```

- action name: remove_member
- summarize action: Remove a member from the secret society and create a new secret if they reveal the old secret.
- what is needed to do the action: A player who revealed the secret or became bad for the group, and the secret society.
- what is the result: The player is no longer a member, and if they revealed the secret, a new secret is created.

- entities:
  - entity name: player
    - before: Member of the secret society.
    - after: Not a member.
  - entity name: secret_society
    - before: Has the old secret.
    - after: Has a new secret if the old one was revealed.

- convert the above information to pddl using relevant predicates step by step:
1. Check if the player is a member and knows the secret.
2. Remove the player from the secret society.
3. Create a new secret if needed.

pddl:
```
(:action remove_member
 :parameters (?player - player ?society - secret_society)
 :precondition (and
                (in ?player ?society)
                (knows_secret ?player ?society))
 :effect (and
          (not (in ?player ?society))
          (not (knows_secret ?player ?society))
          (has_secret ?society)))
```

- action name: check_if_cult
- summarize action: Check if the secret society is a cult.
- what is needed to do the action: A secret society to check.
- what is the result: The secret society is marked as a cult if it is.

- entities:
  - entity name: secret_society
    - before: Not marked as a cult.
    - after: Marked as a cult if it is.

- convert the above information to pddl using relevant predicates step by step:
1. Check if the secret_society is a cult using some criteria.
2. Mark the secret_society as a cult if it is.

pddl:
```
(:action check_if_cult
 :parameters (?society - secret_society)
 :precondition (some_cult_criteria ?society)
 :effect (is_cult ?society))
```