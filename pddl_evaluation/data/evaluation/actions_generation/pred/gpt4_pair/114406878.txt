(:action go
  :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and (at ?player ?loc1)
                     (connected ?loc1 ?dir ?loc2)
                     (not (blocked ?loc1 ?dir ?loc2)))
  :effect (and (at ?player ?loc2)
               (not (at ?player ?loc1))))

(:action get
  :parameters (?player - player ?item - item ?loc - location)
  :precondition (and (at ?player ?loc)
                     (at ?item ?loc))
  :effect (and (not (at ?item ?loc))
               (inventory ?player ?item)))

(:action get_grass
  :parameters (?player - player ?cloth - item ?grass - grass ?loc - location ?container - item)
  :precondition (and (at ?player ?loc)
                     (at ?grass ?loc)
                     (inventory ?player ?cloth)
                     (inventory ?player ?container))
  :effect (inventory ?player ?water))

(:action dry_grass
  :parameters (?player - player ?grass - grass)
  :precondition (and (inventory ?player ?grass))
  :effect (and (dry ?grass)))

(:action cluster_grass
  :parameters (?player - player ?grass - grass ?tinder - tinder)
  :precondition (and (inventory ?player ?grass)
                     (dry ?grass)
                     (not (inventory ?player ?tinder)))
  :effect (and (inventory ?player ?tinder)
               (not (inventory ?player ?grass))))

(:action break_branch
  :parameters (?player - player ?branch - branch ?kindling - kindling)
  :precondition (and (inventory ?player ?branch))
  :effect (and (not (inventory ?player ?branch))
               (inventory ?player ?kindling)))

(:action log_oak
  :parameters (?player - player ?log - log ?loc - location)
  :precondition (and (at ?player ?loc)
                     (has_dry_oak ?loc)
                     (at ?log ?loc))
  :effect (and (not (at ?log ?loc))
               (inventory ?player ?log)))

(:action get_log
  :parameters (?player - player ?log - log ?loc - location)
  :precondition (and (at ?player ?loc)
                     (at ?log ?loc))
  :effect (and (not (at ?log ?loc))
               (inventory ?player ?log)))

(:action stack_log
  :parameters (?player - player ?log - log ?loc - location)
  :precondition (and (at ?player ?loc)
                     (inventory ?player ?log))
  :effect (and (not (inventory ?player ?log))
               (at ?log ?loc)))

(:action build_teepee
  :parameters (?player - player ?tinder - tinder ?kindling - kindling ?fuel - fuel ?teepee - teepee)
  :precondition (and (inventory ?player ?tinder)
                     (inventory ?player ?kindling)
                     (inventory ?player ?fuel))
  :effect (inventory ?player ?teepee))

(:action get_wood
  :parameters (?player - player ?wood - wood ?loc - location)
  :precondition (and (at ?player ?loc)
                     (at ?wood ?loc))
  :effect (and (not (at ?wood ?loc))
               (inventory ?player ?wood)))

(:action get_branch
  :parameters (?player - player ?branch - branch ?loc - location)
  :precondition (and (at ?player ?loc)
                     (has_large_dry_branch ?loc)
                     (at ?branch ?loc))
  :effect (and (not (at ?branch ?loc))
               (inventory ?player ?branch)))

(:action ignite_wood
  :parameters (?player - player ?wood - wood ?fire_plough - item)
  :precondition (and (inventory ?player ?wood)
                     (inventory ?player ?fire_plough)
                     (dry ?wood))
  :effect (ignited ?wood))

(:action ignite_teepee
  :parameters (?player - player ?tinder - tinder ?kindling - kindling ?fuel - fuel ?teepee - teepee)
  :precondition (and (inventory ?player ?tinder)
                     (ignited ?tinder)
                     (inventory ?player ?kindling)
                     (inventory ?player ?fuel)
                     (inventory ?player ?teepee))
  :effect (and (ignited ?teepee)))

(:action get_pot
  :parameters (?player - player ?pot - pot ?loc - location)
  :precondition (and (at ?player ?loc)
                     (at ?pot ?loc))
  :effect (and (not (at ?pot ?loc))
               (inventory ?player ?pot)))

(:action get_water
  :parameters (?player - player ?loc - location ?container - item)
  :precondition (and (at ?player ?loc)
                     (has_pond ?loc))
  :effect (and (not (at ?player ?loc))
               (inventory ?player ?water)))

(:action boil_water
  :parameters (?player - player ?water - water ?pot - pot ?fire - item)
  :precondition (and (inventory ?player ?water)
                     (inventory ?player ?pot)
                     (ignited ?fire))
  :effect (and (boiled ?water)))

)