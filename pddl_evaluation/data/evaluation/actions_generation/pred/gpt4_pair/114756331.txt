(:action go
    :parameters (?p - player ?dir - direction ?loc1 - location ?loc2 - location)
    :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
    :effect (and
                (not (at ?p ?loc1))
                (at ?p ?loc2)
            )
)

(:action get
    :parameters (?p - player ?i - item ?loc - location)
    :precondition (and (at ?p ?loc) (at ?i ?loc) (not (inventory ?p ?i)))
    :effect (and
                (inventory ?p ?i)
                (not (at ?i ?loc))
            )
)

(:action breathe
    :parameters (?p - player)
    :precondition (not (calm ?p))
    :effect (calm ?p)
)

(:action liedown
    :parameters (?p - player ?q - quicksand)
    :precondition (and (stuck ?p ?q) (calm ?p) (not (laying ?p)))
    :effect (laying ?p)
)

(:action swim
    :parameters (?p - player ?q - quicksand ?loc1 - location ?loc2 - location)
    :precondition (and (stuck ?p ?q) (laying ?p) (connected ?loc1 ?loc2))
    :effect (and
                (not (stuck ?p ?q))
                (at ?p ?loc2)
            )
)

(:action usestick
    :parameters (?p - player ?s - stick ?loc1 - location ?loc2 - location)
    :precondition (and (inventory ?p ?s) (at ?p ?loc1) (connected ?loc1 ?loc2))
    :effect (and
                (not (stuck ?p))
                (at ?p ?loc2)
            )
)

(:action rest
    :parameters (?p - player)
    :precondition (tired ?p)
    :effect (not (tired ?p))
)

(:action drop
    :parameters (?p - player ?i - item ?loc - location)
    :precondition (and (inventory ?p ?i) (at ?p ?loc))
    :effect (and
                (not (inventory ?p ?i))
                (at ?i ?loc)
            )
)

(:action check_ripples
    :parameters (?p - player ?l - location)
    :precondition (and (at ?p ?l) (has_ripples ?l))
    :effect (aware ?p ?l)
)

(:action test_ground
    :parameters (?p - player ?l - location ?s - stick)
    :precondition (and (at ?p ?l) (inventory ?p ?s))
    :effect (aware ?p ?l)
)

(:action research
    :parameters (?p - player ?l - location)
    :precondition (and (at ?p ?l) (has_quicksand ?l) (not (aware ?p ?l)))
    :effect (aware ?p ?l)
)

(:action move_horizontally
    :parameters (?p - player ?loc1 - location ?loc2 - location)
    :precondition (and (at ?p ?loc1) (connected ?loc1 ?loc2) (not (blocked ?loc1 ?loc2)))
    :effect (and
                (not (at ?p ?loc1))
                (at ?p ?loc2)
            )
)

)