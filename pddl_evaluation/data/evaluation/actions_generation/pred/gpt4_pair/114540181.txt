(:action go
  :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location)
  :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
  :effect (and (not (at ?p ?loc1)) (at ?p ?loc2))
)

(:action get
  :parameters (?p - player ?item - item ?loc - location)
  :precondition (and (at ?p ?loc) (at ?item ?loc))
  :effect (and (not (at ?item ?loc)) (inventory ?p ?item))
)

(:action get_bamboo_container
  :parameters (?p - player ?loc - location ?bamboo_container - bamboo_container)
  :precondition (and (at ?p ?loc) (has_bamboo ?loc))
  :effect (inventory ?p ?bamboo_container)
)

(:action collect_rain_water
  :parameters (?p - player ?loc - location ?bamboo_container - bamboo_container ?water - water)
  :precondition (and (at ?p ?loc) (has_rainfall ?loc) (inventory ?p ?bamboo_container))
  :effect (inventory ?p ?water)
)

(:action create_fire
  :parameters (?p - player ?loc - location ?wood - wood ?fire - fire)
  :precondition (and (at ?p ?loc) (inventory ?p ?wood))
  :effect (inventory ?p ?fire)
)

(:action treat_water
  :parameters (?p - player ?untreated_water - water ?fire - fire ?treated_water - water)
  :precondition (and (inventory ?p ?untreated_water) (inventory ?p ?fire))
  :effect (and (not (inventory ?p ?untreated_water)) (inventory ?p ?treated_water))
)

(:action drink_water
  :parameters (?p - player ?treated_water - water)
  :precondition (inventory ?p ?treated_water)
  :effect (not (is dehydrated ?p))
)

(:action drink_untreated_water
  :parameters (?p - player ?untreated_water - water)
  :precondition (and (inventory ?p ?untreated_water) (not (is ill ?p)))
  :effect (and (not (is dehydrated ?p)) (is ill ?p))
)

(:action create_sos_sign
  :parameters (?p - player ?loc - location ?stone - stone ?wood - wood ?sos_sign - sos_sign)
  :precondition (and (at ?p ?loc) (inventory ?p ?stone) (inventory ?p ?wood))
  :effect (inventory ?p ?sos_sign)
)

(:action pick_fruit
  :parameters (?p - player ?loc - location ?fruit - fruit)
  :precondition (and (at ?p ?loc) (has_fruit ?loc))
  :effect (inventory ?p ?fruit)
)

(:action eat_fruit
  :parameters (?p - player ?fruit - fruit)
  :precondition (inventory ?p ?fruit)
  :effect (not (is hungry ?p))
)

(:action escape
  :parameters (?p - player ?loc - location ?basecamp - basecamp ?dir - direction)
  :precondition (and (at ?p ?loc) (connected ?loc ?dir ?basecamp))
  :effect (at ?p ?basecamp)
)

)