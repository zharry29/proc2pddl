(:action go
  :parameters (?p - player ?initial - location ?new - location ?dir - direction)
  :precondition (and
    (at ?p ?initial)
    (connected ?initial ?dir ?new)
    (not (blocked ?initial ?dir ?new))
  )
  :effect (and
    (not (at ?p ?initial))
    (at ?p ?new)
  )
)

(:action get
  :parameters (?p - player ?item - item ?loc - location)
  :precondition (and
    (at ?p ?loc)
    (at ?item ?loc)
  )
  :effect (and
    (not (at ?item ?loc))
    (inventory ?p ?item)
  )
)

(:action get_bamboo_container
  :parameters (?p - player ?container - bamboo_container ?loc - location)
  :precondition (and
    (at ?p ?loc)
    (has_bamboo ?loc)
  )
  :effect (inventory ?p ?container)
)

(:action collect_rain_water
  :parameters (?p - player ?container - bamboo_container ?water - water ?loc - location)
  :precondition (and
    (at ?p ?loc)
    (has_rainfall ?loc)
    (inventory ?p ?container)
  )
  :effect (inventory ?p ?water)
)

(:action create_fire
  :parameters (?p - player ?wood - wood ?stone - stone ?fire - fire ?loc - location)
  :precondition (and
    (at ?p ?loc)
    (inventory ?p ?wood)
    (inventory ?p ?stone)
  )
  :effect (inventory ?p ?fire)
)

(:action treat_water
  :parameters (?p - player ?water - water ?fire - fire)
  :precondition (and
    (inventory ?p ?water)
    (inventory ?p ?fire)
  )
  :effect (treated ?water)
)

(:action drink_water
  :parameters (?p - player ?water - water)
  :precondition (and
    (inventory ?p ?water)
    (treated ?water)
  )
  :effect (and
    (not (is dehydrated ?p))
    (not (inventory ?p ?water))
  )
)

(:action drink_untreated_water
  :parameters (?p - player ?water - water)
  :precondition (and
    (inventory ?p ?water)
    (not (treated ?water))
  )
  :effect (and
    (not (is dehydrated ?p))
    (is ill ?p)
    (not (inventory ?p ?water))
  )
)

(:action create_sos_sign
  :parameters (?p - player ?stone - stone ?wood - wood ?sign - sos_sign ?loc - location)
  :precondition (and
    (at ?p ?loc)
    (inventory ?p ?stone)
    (inventory ?p ?wood)
  )
  :effect (inventory ?p ?sign)
)

(:action pick_fruit
  :parameters (?p - player ?fruit - fruit ?loc - location)
  :precondition (and
    (at ?p ?loc)
    (has_fruit ?loc)
  )
  :effect (inventory ?p ?fruit)
)

(:action eat_fruit
  :parameters (?p - player ?fruit - fruit)
  :precondition (inventory ?p ?fruit)
  :effect (and
    (not (is hungry ?p))
    (not (inventory ?p ?fruit))
  )
)

(:action escape
  :parameters (?p - player ?basecamp - location)
  :precondition (at ?p ?basecamp)
  :effect (escaped ?p)
)

)