- action name: go
- summarize action: The player navigates to an adjacent location.
- what is needed to do the action: The player should be at a location connected to the desired location.
- what is the result: The player moves to the connected location.

- entities:
  - entity name: player
    - before: at current location
    - after: at connected location
  - entity name: current location
    - before: has player
    - after: unchanged
  - entity name: connected location
    - before: does not have player
    - after: has player

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the starting location is connected to the desired location.
2. Move the player from the starting location to the connected location.

PDDL:
```
(:action go
 :parameters (?p - player ?loc1 - location ?loc2 - location ?dir - direction)
 :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
 :effect (and (at ?p ?loc2) (not (at ?p ?loc1)))
)
```

- action name: get
- summarize action: The player picks up an item and puts it in their inventory.
- what is needed to do the action: The player and the item should be at the same location.
- what is the result: The item is added to the player's inventory and removed from the location.

- entities:
  - entity name: player 
    - before: at the same location as the item
    - after: unchanged
  - entity name: item
    - before: at the location
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player and the item are at the same location.
2. Add the item to the player's inventory and remove it from the location.

PDDL:
```
(:action get
 :parameters (?p - player ?item - item ?loc - location)
 :precondition (and (at ?p ?loc) (at ?item ?loc))
 :effect (and (inventory ?p ?item) (not (at ?item ?loc)))
)
```

- action name: get_water
- summarize action: The player gets water from a location with a water source, like a lake.
- what is needed to do the action: The player should be at a location with a water source.
- what is the result: The player has water.

- entities:
  - entity name: player
    - before: at location with water source
    - after: unchanged
  - entity name: water
    - before: at the location
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at a location with a water source.
2. Add water to the player's inventory.

PDDL:
```
(:action get_water
 :parameters (?p - player ?loc - location ?water - water)
 :precondition (and (at ?p ?loc) (has_water_source ?loc))
 :effect (inventory ?p ?water)
)
```

- action name: strain_water
- summarize action: The player strains water using a cloth.
- what is needed to do the action: The player should have water and a cloth in their inventory.
- what is the result: The water becomes strained.

- entities:
  - entity name: player
    - before: has water and cloth in inventory
    - after: unchanged
  - entity name: water
    - before: unstrained in inventory
    - after: strained in inventory
  - entity name: cloth
    - before: in the player's inventory
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player has water and a cloth in their inventory.
2. Set the water to be strained.

PDDL:
```
(:action strain_water
 :parameters (?p - player ?water - water ?cloth - cloth)
 :precondition (and (inventory ?p ?water) (inventory ?p ?cloth))
 :effect (strained ?water)
)
```

- action name: boil_water
- summarize action: The player boils water using a container.
- what is needed to do the action: The player should have strained water and a container in their inventory, and the player has a fire source.
- what is the result: The water becomes treated (decontaminated).

- entities:
  - entity name: player
    - before: has strained water, container, and fire in inventory
    - after: unchanged
  - entity name: water
    - before: strained in inventory
    - after: treated (decontaminated) in inventory
  - entity name: container
    - before: in the player's inventory
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player has strained water, a container, and a fire source in their inventory.
2. Set the water to be treated (decontaminated).

PDDL:
```
(:action boil_water
 :parameters (?p - player ?water - water ?container - container)
 :precondition (and (inventory ?p ?water) (inventory ?p ?container) (strained ?water) (has_fire ?p))
 :effect (treated ?water)
)
```

The rest of the actions follow the same pattern as the ones provided above, and you can use these examples as a guide to create the remaining PDDL actions based on the text.
- action name: purify_in_sunlight
- summarize action: The player purifies water in sunlight.
- what is needed to do the action: The player should have strained water and a container in their inventory.
- what is the result: The water becomes treated (decontaminated).

- entities:
  - entity name: player
    - before: has strained water and container in inventory
    - after: unchanged
  - entity name: water
    - before: strained in inventory
    - after: treated (decontaminated) in inventory
  - entity name: container
    - before: in the player's inventory
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player has strained water and a container in their inventory.
2. Set the water to be treated (decontaminated).

PDDL:
```
(:action purify_in_sunlight
 :parameters (?p - player ?water - water ?container - container)
 :precondition (and (inventory ?p ?water) (inventory ?p ?container) (strained ?water))
 :effect (treated ?water)
)
```

- action name: get_long_branch
- summarize action: The player gets a long branch for shelter from a location with branches.
- what is needed to do the action: The player should be at a location with branches.
- what is the result: The player has a long branch in their inventory.

- entities:
  - entity name: player
    - before: at location with branches
    - after: unchanged
  - entity name: long_branch
    - before: at the location
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at a location with branches.
2. Add the long branch to the player's inventory.

PDDL:
```
(:action get_long_branch
 :parameters (?p - player ?loc - location ?branch - long_branch)
 :precondition (and (at ?p ?loc) (has_branches ?loc))
 :effect (inventory ?p ?branch)
)
```

- action name: get_propped_branches
- summarize action: The player gets branches to prop up the main one from a location with branches.
- what is needed to do the action: The player should be at a location with branches.
- what is the result: The player has propped_branches in their inventory.

- entities:
  - entity name: player
    - before: at location with branches
    - after: unchanged
  - entity name: propped_branches
    - before: at the location
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at a location with branches.
2. Add the propped_branches to the player's inventory.

PDDL:
```
(:action get_propped_branches
 :parameters (?p - player ?loc - location ?branches - propped_branches)
 :precondition (and (at ?p ?loc) (has_branches ?loc))
 :effect (inventory ?p ?branches)
)
```

- action name: get_twigs_leaves
- summarize action: The player gets twigs and leaves from a location with twigs and leaves.
- what is needed to do the action: The player should be at a location with twigs and leaves.
- what is the result: The player has twigs_leaves in their inventory.

- entities:
  - entity name: player
    - before: at location with twigs and leaves
    - after: unchanged
  - entity name: twigs_leaves
    - before: at the location
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at a location with twigs and leaves.
2. Add the twigs_leaves to the player's inventory.

PDDL:
```
(:action get_twigs_leaves
 :parameters (?p - player ?loc - location ?twigs - twigs_leaves)
 :precondition (and (at ?p ?loc) (has_twigs_leaves ?loc))
 :effect (inventory ?p ?twigs)
)
```

- action name: build_shelter
- summarize action: The player builds a shelter using a long_branch, propped_branches, and twigs_leaves.
- what is needed to do the action: The player should have a long_branch, propped_branches, and twigs_leaves in their inventory.
- what is the result: The player has built a shelter.

- entities:
  - entity name: player
    - before: has long_branch, propped_branches, and twigs_leaves in inventory
    - after: unchanged (except for has_shelter predicate)
  - entity name: long_branch
    - before: in the player's inventory
    - after: unchanged
  - entity name: propped_branches
    - before: in the player's inventory
    - after: unchanged
  - entity name: twigs_leaves
    - before: in the player's inventory
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player has a long_branch, propped_branches, and twigs_leaves in their inventory.
2. Set the player to have built a shelter (has_shelter).

PDDL:
```
(:action build_shelter
 :parameters (?p - player ?branch - long_branch ?propped - propped_branches ?twigs - twigs_leaves)
 :precondition (and (inventory ?p ?branch) (inventory ?p ?propped) (inventory ?p ?twigs))
 :effect (has_shelter ?p)
)
```
- action name: get_logs
- summarize action: The player gets logs from a location with logs.
- what is needed to do the action: The player should be at a location with logs.
- what is the result: The player has logs in their inventory.

- entities:
  - entity name: player
    - before: at location with logs
    - after: unchanged
  - entity name: logs
    - before: at the location
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at a location with logs.
2. Add the logs to the player's inventory.

PDDL:
```
(:action get_logs
 :parameters (?p - player ?loc - location ?log - logs)
 :precondition (and (at ?p ?loc) (has_logs ?loc))
 :effect (inventory ?p ?log)
)
```

- action name: get_dry_materials
- summarize action: The player gets dry materials from a location with twigs and leaves.
- what is needed to do the action: The player should be at a location with twigs and leaves.
- what is the result: The player has dry_materials in their inventory.

- entities:
  - entity name: player
    - before: at location with twigs and leaves
    - after: unchanged
  - entity name: dry_materials
    - before: at the location
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player is at a location with twigs and leaves.
2. Add the dry_materials to the player's inventory.

PDDL:
```
(:action get_dry_materials
 :parameters (?p - player ?loc - location ?materials - item)
 :precondition (and (at ?p ?loc) (has_twigs_leaves ?loc))
 :effect (inventory ?p ?materials)
)
```

- action name: build_teepee
- summarize action: The player builds a teepee structure using logs and dry materials.
- what is needed to do the action: The player should have logs and dry materials in their inventory.
- what is the result: The player has a teepee in their inventory.

- entities:
  - entity name: player
    - before: has logs and dry materials in inventory
    - after: has teepee in inventory
  - entity name: logs
    - before: in the player's inventory
    - after: unchanged
  - entity name: dry_materials
    - before: in the player's inventory
    - after: unchanged
  - entity name: teepee
    - before: not in the player's inventory
    - after: in the player's inventory

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player has logs and dry materials in their inventory.
2. Add the teepee to the player's inventory.

PDDL:
```
(:action build_teepee
 :parameters (?p - player ?logs - logs ?materials - item ?teepee - teepee)
 :precondition (and (inventory ?p ?logs) (inventory ?p ?materials))
 :effect (inventory ?p ?teepee)
)
```

- action name: start_fire
- summarize action: The player starts a fire using a teepee and dry materials.
- what is needed to do the action: The player should have a teepee and dry materials in their inventory.
- what is the result: The player has started a fire (has_fire).

- entities:
  - entity name: player
    - before: has teepee and dry materials in inventory
    - after: unchanged (except for has_fire predicate)
  - entity name: teepee
    - before: in the player's inventory
    - after: unchanged
  - entity name: dry_materials
    - before: in the player's inventory
    - after: unchanged

- describe how to match it to PDDL relevant predicates step by step:
1. Check if the player has a teepee and dry materials in their inventory.
2. Set the player to have started a fire (has_fire).

PDDL:
```
(:action start_fire
 :parameters (?p - player ?teepee - teepee ?materials - item)
 :precondition (and (inventory ?p ?teepee) (inventory ?p ?materials))
 :effect (has_fire ?p)
)
```