(:action go
    :parameters (?player - player ?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and 
                    (at ?player ?loc1)
                    (connected ?loc1 ?dir ?loc2))
    :effect (and 
                    (not (at ?player ?loc1))
                    (at ?player ?loc2)))

(:action understand
    :parameters (?player - player ?concept - concept)
    :precondition (not (know ?player ?concept))
    :effect (know ?player ?concept))

(:action learn
    :parameters (?player - player ?skill - skill)
    :precondition (not (learned ?player ?skill))
    :effect (learned ?player ?skill))

(:action get
    :parameters (?player - player ?item - item ?loc - location)
    :precondition (and
                    (at ?player ?loc)
                    (at ?item ?loc))
    :effect (and
                    (not (at ?item ?loc))
                    (inventory ?player ?item)))

(:action machine_secured
    :parameters (?player - player)
    :precondition (authorized ?player)
    :effect ())

(:action enumeration
    :parameters (?player - player)
    :precondition (collected_all_info ?player)
    :effect (()))

(:action got_all_info
    :parameters (?player - player)
    :precondition (collected_all_info ?player)
    :effect (()))

(:action ping
    :parameters (?player - player)
    :precondition ()
    :effect (ping_succeed ?player))

(:action check_email_server
    :parameters (?player - player)
    :precondition (ping_succeed ?player)
    :effect (server_checked ?player))

(:action reached_the_remote_system
    :parameters (?player - player)
    :precondition (server_checked ?player )
    :effect (()))

(:action run_port_scan
    :parameters (?player - player)
    :precondition (server_checked ?player )
    :effect (port_scanned ?player))

(:action found_path_in_system
    :parameters (?player - player)
    :precondition (port_scanned ?player)
    :effect (()))

(:action contact_and_trick_a_user
    :parameters (?player - player)
    :precondition ()
    :effect (tricked_user_password ?player))

(:action crack_password_by_social_engineering
    :parameters (?player - player)
    :precondition (tricked_user_password ?player)
    :effect (password_cracked ?player))

(:action send_fake_email
    :parameters (?player - player)
    :precondition ()
    :effect (user_trusted_fake_email ?player))

(:action crack_password_by_phishing
    :parameters (?player - player)
    :precondition (user_trusted_fake_email ?player)
    :effect (password_cracked ?player))

(:action create_fake_wifi_access
    :parameters (?player - player)
    :precondition ()
    :effect (people_use_unencrypted_connection ?player))

(:action crack_password_by_arp_spoofing
    :parameters (?player - player)
    :precondition (people_use_unencrypted_connection ?player)
    :effect (password_cracked ?player))

(:action crack_password_by_brute_force
    :parameters (?player - player)
    :precondition (not (password_cracked ?player))
    :effect (password_cracked ?player))

(:action gain_access_with_password
    :parameters (?player - player)
    :precondition (password_cracked ?player)
    :effect (is_root_user ?player))

(:action create_buffer_overflow
    :parameters (?player - player)
    :precondition (is_root_user ?player)
    :effect (()))

(:action take_control_of_system
    :parameters (?player - player)
    :precondition (is_root_user ?player)
    :effect (authorized ?player))

(:action install_malware
    :parameters (?player - player)
    :precondition (authorized ?player)
    :effect (()))

(:action bypass_standard_authentication_system
    :parameters (?player - player)
    :precondition ()
    :effect (authorized ?player))

(:action not_let_administrator_know
    :parameters (?player - player)
    :precondition (authorized ?player)
    :effect (not (administrator_know_compromised ?player)))

(:action make_no_change_to_website
    :parameters (?player - player)
    :precondition (website_unchanged ?player)
    :effect (()))

(:action create_fewest_file
    :parameters (?player - player)
    :precondition (not (create_more_file_than_need ?player))
    :effect (()))

(:action delete_additional_users
    :parameters (?player - player)
    :precondition (not (additional_users ?player))
    :effect (()))

(:action hardcode_password
    :parameters (?player - player)
    :precondition (not (hardcoded_secret_password ?player))
    :effect (()))

(:action track_covered
    :parameters (?player - player)
    :precondition (authorized ?player)
    :effect (()))

(:action learn_concepts
    :parameters (?player - player ?concept - concept)
    :precondition (not (know ?player ?concept))
    :effect (know ?player ?concept))

(:action learn_internet
    :parameters (?player - player)
    :precondition (not (know_internet ?player))
    :effect (know_internet ?player))

(:action learn_programming
    :parameters (?player - player)
    :precondition (not (know_programming ?player))
    :effect (know_programming ?player))

(:action learn_unix
    :parameters (?player - player)
    :precondition (not (know_unix ?player))
    :effect (know_unix ?player))

(:action become_skilled
    :parameters (?player - player ?skill - skill)
    :precondition (not (learned ?player ?skill))
    :effect (learned ?player ?skill))

)