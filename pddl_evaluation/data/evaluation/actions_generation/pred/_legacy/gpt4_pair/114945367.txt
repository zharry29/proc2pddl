(:action go
   :parameters (?p - player ?dir - direction ?loc1 - location ?loc2 - location)
   :precondition (and
                  (connected ?loc1 ?dir ?loc2)
                  (not (blocked ?loc1 ?dir ?loc2))
                  (at ?p ?loc1)
                 )
   :effect (and
            (not (at ?p ?loc1))
            (at ?p ?loc2)
           )
)

(:action get
   :parameters (?p - player ?item - item ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (at ?item ?loc)
                 )
   :effect (and
            (not (at ?item ?loc))
            (inventory ?p ?item)
           )
)

(:action get_water
   :parameters (?p - player ?loc - location ?water - water ?container - container)
   :precondition (and
                  (at ?p ?loc)
                  (has_water_source ?loc)
                  (inventory ?p ?container)
                 )
   :effect (inventory ?p ?water)
)

(:action strain_water
   :parameters (?p - player ?water - water ?cloth - cloth)
   :precondition (and
                  (inventory ?p ?water)
                  (inventory ?p ?cloth)
                  (not (strained ?water))
                 )
   :effect (strained ?water)
)

(:action boil_water
   :parameters (?p - player ?water - water)
   :precondition (and
                  (inventory ?p ?water)
                  (has_fire ?p)
                  (not (treated ?water))
                 )
   :effect (treated ?water)
)

(:action purify_in_sunlight
   :parameters (?p - player ?water - water ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (inventory ?p ?water)
                 )
   :effect (treated ?water)
)

(:action get_long_branch
   :parameters (?p - player ?long_branch - long_branch ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (has_branches ?loc)
                  (at ?long_branch ?loc)
                 )
   :effect (and
            (not (at ?long_branch ?loc))
            (inventory ?p ?long_branch)
           )
)

(:action get_propped_branches
   :parameters (?p - player ?propped_branches - propped_branches ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (has_branches ?loc)
                  (at ?propped_branches ?loc)
                 )
   :effect (and
            (not (at ?propped_branches ?loc))
            (inventory ?p ?propped_branches)
           )
)

(:action get_twigs_leaves
   :parameters (?p - player ?twigs_leaves - twigs_leaves ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (has_twigs_leaves ?loc)
                  (at ?twigs_leaves ?loc)
                 )
   :effect (and
            (not (at ?twigs_leaves ?loc))
            (inventory ?p ?twigs_leaves)
           )
)

(:action build_shelter
   :parameters (?p - player ?long_branch - long_branch ?propped_branches - propped_branches)
   :precondition (and
                  (inventory ?p ?long_branch)
                  (inventory ?p ?propped_branches)
                  (not (has_shelter ?p))
                 )
   :effect (has_shelter ?p)
)

(:action get_logs
   :parameters (?p - player ?logs - logs ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (has_logs ?loc)
                  (at ?logs ?loc)
                 )
   :effect (and
            (not (at ?logs ?loc))
            (inventory ?p ?logs)
           )
)

(:action get_dry_materials
   :parameters (?p - player ?twigs_leaves - twigs_leaves ?logs - logs)
   :precondition (and
                  (inventory ?p ?twigs_leaves)
                  (inventory ?p ?logs)
                 )
   :effect (and
            (inventory ?p ?dry_materials)
           )
)

(:action build_teepee
   :parameters (?p - player ?dry_materials - twigs_leaves ?logs - logs)
   :precondition (inventory ?p ?dry_materials)
   :effect (and
            (not (has_shelter ?p))
            (has_shelter ?p)
           )
)

(:action start_fire
   :parameters (?p - player ?dry_materials - twigs_leaves ?logs - logs)
   :precondition (and
                  (inventory ?p ?dry_materials)
                  (inventory ?p ?logs)
                  (has_shelter ?p)
                  (not (has_fire ?p))
                 )
   :effect (has_fire ?p)
)

)