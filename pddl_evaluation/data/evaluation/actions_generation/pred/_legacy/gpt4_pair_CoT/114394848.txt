(:action go
    :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
    :precondition (and (at ?player ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
    :effect (and (not (at ?player ?loc1)) (at ?player ?loc2))
)

(:action understand
    :parameters (?player - player ?concept - concept)
    :precondition (not (know ?player ?concept))
    :effect (know ?player ?concept)
)

(:action learn
    :parameters (?player - player ?skill - skill)
    :precondition (not (learned ?player ?skill))
    :effect (learned ?player ?skill)
)

(:action get
    :parameters (?player - player ?item - item ?loc - location)
    :precondition (and (at ?player ?loc) (at ?item ?loc))
    :effect (and (not (at ?item ?loc)) (inventory ?player ?item))
)

(:action machine_secured
    :parameters (?player - player)
    :precondition (not (authorized ?player))
    :effect (authorized ?player)
)

(:action enumeration
    :parameters (?player - player ?info - all_information)
    :precondition (not (collected_all_info ?player))
    :effect (collected_all_info ?player)
)

(:action ping
    :parameters (?player - player ?loc - location)
    :precondition (not (ping_succeed ?player))
    :effect (ping_succeed ?player)
)

(:action check_email_server
    :parameters (?player - player)
    :precondition (not (server_checked ?player))
    :effect (server_checked ?player)
)

(:action run_port_scan
    :parameters (?player - player ?scanner - network_scanner)
    :precondition (not (port_scanned ?player))
    :effect (port_scanned ?player)
)

(:action found_path_in_system
    :parameters (?player - player ?ports - TCP_UDP_ports)
    :precondition ()
    :effect (())
)

(:action contact_and_trick_a_user
    :parameters (?player - player ?user - usernames)
    :precondition ()
    :effect (tricked_user_password ?player)
)

(:action crack_password_by_social_engineering
    :parameters (?player - player)
    :precondition ()
    :effect (password_cracked ?player)
)

(:action send_fake_email
    :parameters (?player - player ?user - usernames)
    :precondition ()
    :effect (user_trusted_fake_email ?player)
)

(:action crack_password_by_phishing
    :parameters (?player - player)
    :precondition ()
    :effect (password_cracked ?player)
)

(:action create_fake_wifi_access
    :parameters (?player - player ?location - location)
    :precondition ()
    :effect (people_use_unencrypted_connection ?player)
)

(:action crack_password_by_arp_spoofing
    :parameters (?player - player)
    :precondition ()
    :effect (password_cracked ?player)
)

(:action crack_password_by_brute_force
    :parameters (?player - player)
    :precondition ()
    :effect (password_cracked ?player)
)

(:action gain_access_with_password
    :parameters (?player - player)
    :precondition ()
    :effect (is_root_user ?player)
)

(:action create_buffer_overflow
    :parameters (?player - player ?memory - memory_layout)
    :precondition ()
    :effect (is_root_user ?player)
)

(:action take_control_of_system
    :parameters (?player - player)
    :precondition ()
    :effect (is_root_user ?player)
)

(:action install_malware
    :parameters (?player - player ?mal - malware)
    :precondition ()
    :effect (())
)

(:action bypass_standard_authentication_system
    :parameters (?player - player)
    :precondition ()
    :effect (password_cracked ?player)
)

(:action not_let_administrator_know
    :parameters (?player - player)
    :precondition ()
    :effect (not (administrator_know_compromised ?player))
)

(:action make_no_change_to_website
    :parameters (?player - player)
    :precondition ()
    :effect (website_unchanged ?player)
)

(:action create_fewest_file
    :parameters (?player - player)
    :precondition ()
    :effect (create_more_file_than_need ?player)
)

(:action delete_additional_users
    :parameters (?player - player)
    :precondition ()
    :effect (not (additional_users ?player))
)

(:action hardcode_password
    :parameters (?player - player ?hardcoded_password - string)
    :precondition ()
    :effect (hardcoded_secret_password ?player)
)

(:action track_covered
    :parameters (?player - player)
    :precondition ()
    :effect (())
)

(:action learn_concepts
    :parameters (?player - player ?concept - concept)
    :precondition (not (know ?player ?concept))
    :effect (know ?player ?concept)
)

(:action learn_internet
    :parameters (?player - player ?internet_skill - skill)
    :precondition (not (learned ?player ?internet_skill))
    :effect (learned ?player ?internet_skill)
)

(:action learn_programming
    :parameters (?player - player ?programming_skill - skill)
    :precondition (not (learned ?player ?programming_skill))
    :effect (learned ?player ?programming_skill)
)

(:action learn_unix
    :parameters (?player - player ?unix_skill - skill)
    :precondition (not (learned ?player ?unix_skill))
    :effect (learned ?player ?unix_skill)
)

(:action become_skilled
    :parameters (?player - player ?ethics_skill - skill)
    :precondition (not (know ?player ?ethics_skill))
    :effect (know ?player ?ethics_skill)
)

)