(:action go
   :parameters (?p - player ?loc1 - location ?dir - direction ?loc2 - location)
   :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (not (at ?p ?loc1)) (at ?p ?loc2))
)

(:action get
   :parameters (?p - player ?item - item ?loc - location)
   :precondition (and (at ?p ?loc) (at ?item ?loc) (not (inventory ?p ?item)))
   :effect (inventory ?p ?item)
)

(:action collect_water
   :parameters (?p - player ?loc - location ?container - container ?water - water)
   :precondition (and (at ?p ?loc) (has_water_source ?loc) (inventory ?p ?container) (not (is_full ?container)))
   :effect (and (contains ?container ?water) (is_full ?container))
)

(:action gather_sticks
   :parameters (?p - player ?loc - location ?sticks - sticks)
   :precondition (and (at ?p ?loc) (has_sticks ?loc))
   :effect (inventory ?p ?sticks)
)

(:action make_fire
   :parameters (?p - player ?loc - location ?igniter - igniter ?fuel - fuel)
   :precondition (and (at ?p ?loc) (inventory ?p ?igniter) (inventory ?p ?fuel) (not (has_fire ?loc)))
   :effect (has_fire ?loc)
)

(:action boil_water
   :parameters (?p - player ?loc - location ?container - container ?water - water)
   :precondition (and (at ?p ?loc) (has_fire ?loc) (contains ?container ?water) (is_full ?container) (inventory ?p ?container))
   :effect (not (is_contaminated ?water))
)

(:action cook_food
   :parameters (?p - player ?loc - location ?food - food)
   :precondition (and (at ?p ?loc) (has_fire ?loc) (inventory ?p ?food) (is_contaminated ?food))
   :effect (not (is_contaminated ?food))
)

(:action eat_poisoned_food
   :parameters (?p - player ?food - food)
   :precondition (and (inventory ?p ?food) (is_poisonous ?food))
   :effect (is_sick ?p)
)

(:action eat_contaminated_food
   :parameters (?p - player ?food - food)
   :precondition (and (inventory ?p ?food) (is_contaminated ?food))
   :effect (is_sick ?p)
)

(:action eat_food
   :parameters (?p - player ?food - food)
   :precondition (and (inventory ?p ?food) (not (is_contaminated ?food)) (not (is_poisonous ?food)) (is_hungry ?p))
   :effect (not (is_hungry ?p))
)

(:action drink_contaminated_water
   :parameters (?p - player ?container - container ?water - water)
   :precondition (and (inventory ?p ?container) (contains ?container ?water) (is_contaminated ?water) (is_thirsty ?p))
   :effect (is_sick ?p)
)

(:action drink_water
   :parameters (?p - player ?container - container ?water - water)
   :precondition (and (inventory ?p ?container) (contains ?container ?water) (not (is_contaminated ?water)) (is_thirsty ?p))
   :effect (not (is_thirsty ?p))
)

(:action build_shelter
   :parameters (?p - player ?loc - location ?sticks - sticks ?leaves - leaves)
   :precondition (and (at ?p ?loc) (inventory ?p ?sticks) (inventory ?p ?leaves) (not (has_shelter ?loc)))
   :effect (has_shelter ?loc)
)

(:action sleep_in_shelter
   :parameters (?p - player ?loc - location)
   :precondition (and (at ?p ?loc) (has_shelter ?loc) (is_tired ?p))
   :effect (not (is_tired ?p))
)

)