### Action: go
- summarize action: The player navigates from one location to an adjacent location.
- what is needed to do the action: The player needs to know the location is connected and not blocked.
- what is the result: The player will be at the new location.

- entities:
  - entity name: player 
  - before: at the original location
  - after: at the new location
  - entity name: location
  - before: unchanged
  - after: unchanged (connection between locations remains)

pddl:
```
(:action go
  :parameters (?p - player ?dir - direction ?loc1 - location ?loc2 - location)
  :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
  :effect (and (at ?p ?loc2) (not (at ?p ?loc1))))
```

### Action: get
- summarize action: The player picks up an item and adds it to their inventory.
- what is needed to do the action: The item must be at the same location as the player.
- what is the result: The item will be in the player's inventory.

- entities:
  - entity name: player 
  - before: at a location without the item in inventory
  - after: at the same location with the item in inventory
  - entity name: item
  - before: at the location
  - after: in the inventory

pddl:
```
(:action get
  :parameters (?p - player ?i - item ?loc - location)
  :precondition (and (at ?p ?loc) (at ?i ?loc))
  :effect (and (inventory ?p ?i) (not (at ?i ?loc))))
```

### Action: breathe
- summarize action: The player breathes in to fill their lungs with air.
- what is needed to do the action: The player needs to be calm.
- what is the result: No direct change in state, but it could be a precondition for other actions.

- entities:
  - entity name: player 
  - before: calm
  - after: calm

pddl:
```
(:action breathe
  :parameters (?p - player)
  :precondition (calm ?p)
  :effect (calm ?p))
```

### Action: liedown
 - summarize action: The player gets on their back to distribute their weight.
 - what is needed to do the action: The player must not already be laying down.
 - what is the result: The player is now laying down.

- entities:
  - entity name: player 
  - before: not laying down
  - after: laying down

pddl:
```
(:action liedown
  :parameters (?p - player)
  :precondition (not (laying ?p))
  :effect (laying ?p))
```

### Action: swim
 - summarize action: The player starts to swim through the sand to escape quicksand.
 - what is needed to do the action: The player needs to be in quicksand.
 - what is the result: The player may escape the quicksand, depending on further conditions.

- entities:
  - entity name: player 
  - before: stuck in quicksand
  - after: unstuck or progressed in getting out

pddl:
```
(:action swim
  :parameters (?p - player ?q - quicksand)
  :precondition (stuck ?p ?q)
  :effect (not (stuck ?p ?q)))
```

### Action: usestick
 - summarize action: The player uses a stick to help get out of the sand.
 - what is needed to do the action: The player must have a stick in their inventory and be stuck.
 - what is the result: The player gets assistance in escaping the quicksand.

- entities:
  - entity name: player 
  - before: stuck, has a stick in inventory
  - after: possibly not stuck, stick still in inventory

pddl:
```
(:action usestick
  :parameters (?p - player ?i - stick ?q - quicksand)
  :precondition (and (inventory ?p ?i) (stuck ?p ?q))
  :effect (and (not (stuck ?p ?q))(inventory ?p ?i)))
```

### Action: rest
 - summarize action: The player rests to regain some energy.
 - what is needed to do the action: The player must be tired.
 - what is the result: The player becomes calm or less tired.

- entities:
  - entity name: player 
  - before: tired
  - after: calm or untired

pddl:
```
(:action rest
  :parameters (?p - player)
  :precondition (tired ?p)
  :effect (and (calm ?p) (not (tired ?p))))
```

### Action: drop
 - summarize action: The player drops an item from their inventory to the current location.
 - what is needed to do the action: The player must have the item in their inventory.
 - what is the result: The item is placed at the player's current location.

- entities:
  - entity name: player 
  - before: item in inventory
  - after: item at the location
  - entity name: item
  - before: in inventory
  - after: at the location

pddl:
```
(:action drop
  :parameters (?p - player ?i - item ?loc - location)
  :precondition (and (inventory ?p ?i) (at ?p ?loc))
  :effect (and (at ?i ?loc) (not (inventory ?p ?i))))
```

### Action: check_ripples
 - summarize action: The player checks a location for ripples, indicating quicksand presence.
 - what is needed to do the action: The player must be at the location.
 - what is the result: The player becomes aware of ripples at the location if any.

- entities:
  - entity name: player 
  - before: unaware of ripples
  - after: aware of ripples
  - entity name: location
  - before: may or may not have ripples
  - after: no change to the location itself

pddl:
```
(:action check_ripples
  :parameters (?p - player ?loc - location)
  :precondition (at ?p ?loc)
  :effect (aware ?p ?loc))
```

### Action: test_ground
 - summarize action: The player tests the ground to check if it contains quicksand.
 - what is needed to do the action: The player must be at the location.
 - what is the result: The player becomes aware of quicksand at the location if any.

- entities:
  - entity name: player 
  - before: unaware of quicksand
  - after: aware of quicksand
  - entity name: location
  - before: may or may not have quicksand
  - after: no change to the location itself

pddl:
```
(:action test_ground
  :parameters (?p - player ?loc - location)
  :precondition (at ?p ?loc)
  :effect (aware ?p ?loc))
```

### Action: research
 - summarize action: The player researches to understand more about the area and its quicksand properties.
 - what is needed to do the action: The player must be calm.
 - what is the result: The player gains knowledge about the quicksand locations.

- entities:
  - entity name: player 
  - before: calm, possibly unaware of quicksand locations
  - after: calm, aware of quicksand locations
  - entity name: location
  - before: unchanged
  - after: unchanged

pddl:
```
(:action research
  :parameters (?p - player)
  :precondition (calm ?p)
  :effect (aware ?p ?loc))
```

### Action: move_horizontally
 - summarize action: The player attempts to move horizontally to get out of the quicksand using a controlled technique.
 - what is needed to do the action: The player must be stuck in quicksand.
 - what is the result: The player improves their position, potentially reducing their stuck condition.

- entities:
  - entity name: player 
  - before: stuck
  - after: less stuck or unstuck

pddl:
```
(:action move_horizontally
  :parameters (?p - player ?q - quicksand)
  :precondition (stuck ?p ?q)
  :effect (not (stuck ?p ?q)))
```

