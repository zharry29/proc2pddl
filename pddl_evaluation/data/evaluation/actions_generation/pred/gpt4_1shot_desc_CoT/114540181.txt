(:action go
   :parameters (?p - player ?dir - direction ?loc1 - location ?loc2 - location)
   :precondition (and (at ?p ?loc1) (connected ?loc1 ?dir ?loc2) (not (blocked ?loc1 ?dir ?loc2)))
   :effect (and (at ?p ?loc2) (not (at ?p ?loc1))))

(:action get
   :parameters (?p - player ?i - item ?loc - location)
   :precondition (and (at ?p ?loc) (at ?i ?loc))
   :effect (and (inventory ?p ?i) (not (at ?i ?loc))))

(:action get_bamboo_container
   :parameters (?p - player ?loc - location ?bc - bamboo_container)
   :precondition (and (at ?p ?loc) (has_bamboo ?loc))
   :effect (inventory ?p ?bc))

(:action collect_rain_water
   :parameters (?p - player ?loc - location ?bc - bamboo_container ?w - water)
   :precondition (and (at ?p ?loc) (has_rainfall ?loc) (inventory ?p ?bc))
   :effect (inventory ?p ?w))

(:action create_fire
   :parameters (?p - player ?stone - stone ?wood - wood)
   :precondition (and (inventory ?p ?stone) (inventory ?p ?wood))
   :effect (inventory ?p ?fire))

(:action treat_water
   :parameters (?p - player ?w - water ?fire - fire)
   :precondition (and (inventory ?p ?water) (inventory ?p ?fire) (not (treated ?w)))
   :effect (treated ?w))

(:action drink_water
   :parameters (?p - player ?w - water)
   :precondition (and (inventory ?p ?w) (treated ?w) (is ?dehydrated ?p))
   :effect (not (is ?dehydrated ?p)))

(:action drink_untreated_water
   :parameters (?p - player ?w - water)
   :precondition (and (inventory ?p ?w) (not (treated ?w)))
   :effect (and (is ?ill ?p) (not (is ?dehydrated ?p))))

(:action create_sos_sign
   :parameters (?p - player ?stone - stone ?wood - wood)
   :precondition (and (inventory ?p ?stone) (inventory ?p ?wood))
   :effect (inventory ?p sos_sign))

(:action pick_fruit
   :parameters (?p - player ?loc - location ?f - fruit)
   :precondition (and (at ?p ?loc) (has_fruit ?loc))
   :effect (inventory ?p ?f))

(:action eat_fruit
   :parameters (?p - player ?f - fruit)
   :precondition (and (inventory ?p ?f) (is ?hungry ?p))
   :effect (not (is ?hungry ?p)))

(:action escape
   :parameters (?p - player ?basecamp - location ?sos_sign - sos_sign)
   :precondition (and (at ?p ?basecamp) (inventory ?p ?sos_sign))
   :effect (escaped ?p))

)