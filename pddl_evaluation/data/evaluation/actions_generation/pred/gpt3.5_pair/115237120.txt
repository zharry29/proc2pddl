(:action go
   :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
   :precondition (at ?player ?loc1)
   :effect (and 
             (not (at ?player ?loc1))
             (at ?player ?loc2)
             (connected ?loc1 ?dir ?loc2)
             (not (in_shelter ?player))
             (not (is_injured ?player))
             (not (outdoors ?loc1))
             (outdoors ?loc2)
             (not (has_water_source ?loc1))
             (has_water_source ?loc2)
   )
)

(:action get
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and 
                    (at ?player ?loc)
                    (at ?item ?loc)
                    (gettable ?item)
                )
   :effect (and 
               (not (at ?item ?loc))
               (inventory ?player ?item)
           )
)

(:action drop
   :parameters (?player - player ?item - item ?loc - location)
   :precondition (and 
                    (at ?player ?loc)
                    (inventory ?player ?item)
                )
   :effect (and 
               (not (inventory ?player ?item))
               (at ?item ?loc)
           )
)

(:action get_water
   :parameters (?player - player ?loc - location ?water - water)
   :precondition (and 
                    (at ?player ?loc)
                    (has_water_source ?loc)
                    (in_shelter ?player)
                )
   :effect (and 
               (not (has_water_source ?loc))
               (inventory ?player ?water)
               (not (treated ?water))
           )
)

(:action boil_water
   :parameters (?player - player ?water - water)
   :precondition (and 
                    (inventory ?player ?water)
                    (not (treated ?water))
                )
   :effect (not (not (treated ?water)))
)

(:action collect_rain_water
   :parameters (?player - player ?loc - location ?water - water)
   :precondition (and 
                    (at ?player ?loc)
                    (has_water_source ?loc)
                    (not (get_water ?water))
                )
   :effect (and 
               (not (has_water_source ?loc))
               (inventory ?player ?water)
               (not (treated ?water))
           )
)

(:action loot_shelter
   :parameters (?player - player ?loc - location)
   :precondition (and 
                    (at ?player ?loc)
                    (is_occupied ?loc)
                )
   :effect (and 
               (not (is_occupied ?loc))
               (exists (?item - item) (and (at ?item ?loc) (inventory ?player ?item)))
           )
)

(:action break_car_window
   :parameters (?player - player ?car - car)
   :precondition (and 
                    (at ?player ?car)
                    (has_windows ?car)
                )
   :effect (and 
               (not (has_windows ?car))
               (inventory ?player rock)
           )
)

(:action gofish
   :parameters (?player - player ?loc - location ?fishingpole - fishingpole ?fish - fish)
   :precondition (and 
                    (at ?player ?loc)
                    (inventory ?player ?fishingpole)
                    (haslake ?loc)
                )
   :effect (and 
               (not (haslake ?loc))
               (inventory ?player ?fish)
           )
)

(:action find_shelter
   :parameters (?player - player ?loc - location)
   :precondition (at ?player ?loc)
   :effect (in_shelter ?player)
)

(:action clean_wound
   :parameters (?player - player)
   :precondition (is_injured ?player)
   :effect (not (is_injured ?player))
)

(:action clean_others_wound
   :parameters (?player - player)
   :precondition (is_injured ?player)
   :effect (not (is_injured ?player))
)

(:action barter_food_for_healing
   :parameters (?player - player ?food - food ?bandage - bandage)
   :precondition (and 
                    (inventory ?player ?food)
                    (inventory ?player ?bandage)
                    (is_injured ?player)
                )
   :effect (and 
               (not (inventory ?player ?food))
               (not (inventory ?player ?bandage))
               (not (is_injured ?player))
           )
)

)