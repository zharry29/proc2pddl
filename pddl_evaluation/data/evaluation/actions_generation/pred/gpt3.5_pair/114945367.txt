(:action go
   :parameters (?p - player ?from - location ?to - location ?dir - direction)
   :precondition (and
                   (at ?p ?from)
                   (connected ?from ?dir ?to)
                   (not (blocked ?from ?dir ?to)))
   :effect (and
               (not (at ?p ?from))
               (at ?p ?to))
)

(:action get
   :parameters (?p - player ?item - item ?loc - location)
   :precondition (and
                   (at ?p ?loc)
                   (at ?item ?loc)
                   (not (inventory ?p ?item)))
   :effect (and
               (not (at ?item ?loc))
               (inventory ?p ?item))
)

(:action get_water
   :parameters (?p - player ?source - location ?water - water)
   :precondition (and
                   (at ?p ?source)
                   (at ?water ?source)
                   (not (inventory ?p ?water)))
   :effect (and
               (not (at ?water ?source))
               (inventory ?p ?water)
               (not (has_water_source ?source)))
)

(:action strain_water
   :parameters (?p - player ?dirty_water - water ?clean_water - water)
   :precondition (and
                   (inventory ?p ?dirty_water)
                   (not (inventory ?p ?clean_water))
                   (strained ?dirty_water))
   :effect (and
               (not (inventory ?p ?dirty_water))
               (inventory ?p ?clean_water)
               (not (strained ?dirty_water))
               (strained ?clean_water))
)

(:action boil_water
   :parameters (?p - player ?unclean_water - water ?clean_water - water)
   :precondition (and
                   (inventory ?p ?unclean_water)
                   (not (inventory ?p ?clean_water))
                   (treated ?unclean_water))
   :effect (and
               (not (inventory ?p ?unclean_water))
               (inventory ?p ?clean_water)
               (not (treated ?unclean_water))
               (treated ?clean_water))
)

(:action purify_in_sunlight
   :parameters (?p - player ?dirty_water - water ?clean_water - water)
   :precondition (and
                   (inventory ?p ?dirty_water)
                   (not (inventory ?p ?clean_water))
                   (treated ?dirty_water))
   :effect (and
               (not (inventory ?p ?dirty_water))
               (inventory ?p ?clean_water)
               (not (treated ?dirty_water))
               (treated ?clean_water))
)

(:action get_long_branch
   :parameters (?p - player ?loc - location ?branch - long_branch)
   :precondition (and
                   (at ?p ?loc)
                   (at ?branch ?loc)
                   (not (has_branches ?loc))
                   (not (inventory ?p ?branch)))
   :effect (and
               (not (at ?branch ?loc))
               (has_branches ?loc)
               (inventory ?p ?branch))
)

(:action get_propped_branches
   :parameters (?p - player ?loc - location ?branches - propped_branches)
   :precondition (and
                   (at ?p ?loc)
                   (at ?branches ?loc)
                   (not (inventory ?p ?branches)))
   :effect (and
               (not (at ?branches ?loc))
               (inventory ?p ?branches)
               (not (has_branches ?loc)))
)

(:action get_twigs_leaves
   :parameters (?p - player ?loc - location ?twigs_leaves - twigs_leaves)
   :precondition (and
                   (at ?p ?loc)
                   (at ?twigs_leaves ?loc)
                   (not (has_twigs_leaves ?loc))
                   (not (inventory ?p ?twigs_leaves)))
   :effect (and
               (not (at ?twigs_leaves ?loc))
               (has_twigs_leaves ?loc)
               (inventory ?p ?twigs_leaves))
)

(:action build_shelter
   :parameters (?p - player ?loc - location ?cloth - cloth ?shelter - container)
   :precondition (and
                   (at ?p ?loc)
                   (at ?cloth ?loc)
                   (at ?shelter ?loc)
                   (not (has_shelter ?p)))
   :effect (and
               (not (at ?cloth ?loc))
               (not (at ?shelter ?loc))
               (has_shelter ?p)
               (inventory ?p ?shelter))
)

(:action get_logs
   :parameters (?p - player ?loc - location ?logs - logs)
   :precondition (and
                   (at ?p ?loc)
                   (at ?logs ?loc)
                   (not (has_logs ?loc))
                   (not (inventory ?p ?logs)))
   :effect (and
               (not (at ?logs ?loc))
               (has_logs ?loc)
               (inventory ?p ?logs))
)

(:action get_dry_materials
   :parameters (?p - player ?loc - location ?materials - twigs_leaves)
   :precondition (and
                   (at ?p ?loc)
                   (at ?materials ?loc)
                   (not (has_twigs_leaves ?loc))
                   (not (inventory ?p ?materials)))
   :effect (and
               (not (at ?materials ?loc))
               (has_twigs_leaves ?loc)
               (inventory ?p ?materials))
)

(:action build_teepee
   :parameters (?p - player ?loc - location ?logs - logs ?materials - twigs_leaves ?teepee - teepee)
   :precondition (and
                   (at ?p ?loc)
                   (at ?logs ?loc)
                   (at ?materials ?loc)
                   (at ?teepee ?loc)
                   (has_shelter ?p)
                   (not (inventory ?p ?teepee)))
   :effect (and
               (not (at ?logs ?loc))
               (not (at ?materials ?loc))
               (not (at ?teepee ?loc))
               (inventory ?p ?teepee)
               (not (has_shelter ?p)))
)

(:action start_fire
   :parameters (?p - player ?loc - location ?fire - container)
   :precondition (and
                   (at ?p ?loc)
                   (at ?fire ?loc)
                   (not (has_fire ?p))
                   (has_logs ?loc)
                   (has_twigs_leaves ?loc))
   :effect (and
               (has_fire ?p)
               (not (has_logs ?loc))
               (not (has_twigs_leaves ?loc))
               (not (at ?fire ?loc)))
)

)