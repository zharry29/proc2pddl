(:action go
    :parameters (?player - player ?dir - direction ?loc1 - location ?loc2 - location)
    :precondition (and (at ?player ?loc1)
                       (connected ?loc1 ?dir ?loc2)
                       (not (blocked ?loc1 ?dir ?loc2)))
    :effect (and (not (at ?player ?loc1))
                 (at ?player ?loc2)))

(:action get
    :parameters (?player - player ?item - item ?loc - location)
    :precondition (and (at ?player ?loc)
                       (at ?item ?loc))
    :effect (and (not (at ?item ?loc))
                 (inventory ?player ?item)))

(:action get_grass
    :parameters (?player - player ?grass - grass ?loc - location)
    :precondition (and (at ?player ?loc)
                       (at ?grass ?loc))
    :effect (and (not (at ?grass ?loc))
                 (inventory ?player ?grass)))

(:action dry_grass
    :parameters (?player - player ?grass - grass)
    :precondition (inventory ?player ?grass)
    :effect (dry ?grass))

(:action cluster_grass
    :parameters (?player - player ?grass - grass ?tinder - tinder)
    :precondition (and (inventory ?player ?grass)
                       (dry ?grass))
    :effect (and (not (inventory ?player ?grass))
                 (inventory ?player ?tinder)))

(:action break_branch
    :parameters (?player - player ?branch - branch ?loc - location)
    :precondition (and (at ?player ?loc)
                       (has_large_dry_branch ?loc))
    :effect (and (not (has_large_dry_branch ?loc))
                 (inventory ?player ?branch)))

(:action log_oak
    :parameters (?player - player ?log - log ?loc - location)
    :precondition (and (at ?player ?loc)
                       (has_dry_oak ?loc))
    :effect (and (not (has_dry_oak ?loc))
                 (inventory ?player ?log)))

(:action get_log
    :parameters (?player - player ?log - log ?loc - location)
    :precondition (and (at ?player ?loc)
                       (at ?log ?loc))
    :effect (and (not (at ?log ?loc))
                 (inventory ?player ?log)))

(:action stack_log
    :parameters (?player - player ?log - log ?teepee - teepee)
    :precondition (and (inventory ?player ?log)
                       (inventory ?player ?teepee))
    :effect (and (not (inventory ?player ?log))
                 (inventory ?player ?teepee)))

(:action build_teepee
    :parameters (?player - player ?kindling - kindling ?fuel - fuel ?teepee - teepee)
    :precondition (and (inventory ?player ?kindling)
                       (inventory ?player ?fuel))
    :effect (inventory ?player ?teepee))

(:action get_wood
    :parameters (?player - player ?wood - wood ?loc - location)
    :precondition (and (at ?player ?loc)
                       (at ?wood ?loc))
    :effect (and (not (at ?wood ?loc))
                 (inventory ?player ?wood)))

(:action get_branch
    :parameters (?player - player ?branch - branch ?loc - location)
    :precondition (and (at ?player ?loc)
                       (at ?branch ?loc))
    :effect (and (not (at ?branch ?loc))
                 (inventory ?player ?branch)))

(:action ignite_wood
    :parameters (?player - player ?wood - wood)
    :precondition (and (dry ?wood)
                       (inventory ?player ?wood))
    :effect (ignited ?wood))

(:action ignite_teepee
    :parameters (?player - player ?teepee - teepee)
    :precondition (and (ignited ?teepee)
                       (inventory ?player ?teepee))
    :effect (ignited ?teepee))

(:action get_pot
    :parameters (?player - player ?pot - pot ?loc - location)
    :precondition (and (at ?player ?loc)
                       (at ?pot ?loc))
    :effect (and (not (at ?pot ?loc))
                 (inventory ?player ?pot)))

(:action get_water
    :parameters (?player - player ?water - water ?loc - location)
    :precondition (and (at ?player ?loc)
                       (has_pond ?loc))
    :effect (and (not (has_pond ?loc))
                 (inventory ?player ?water)))

(:action boil_water
    :parameters (?player - player ?water - water ?pot - pot)
    :precondition (and (inventory ?player ?water)
                       (ignited ?water)
                       (inventory ?player ?pot))
    :effect (boiled ?water))

)