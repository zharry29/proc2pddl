(:action go
   :parameters (?p - player ?loc1 ?dir ?loc2 - location)
   :precondition (and
                  (at ?p ?loc1)
                  (connected ?loc1 ?dir ?loc2)
                  (not (blocked ?loc1 ?dir ?loc2))
                  )
   :effect (and
            (at ?p ?loc2)
            (not (at ?p ?loc1))
            )
)

(:action get
   :parameters (?p - player ?item - item ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (at ?item ?loc)
                  )
   :effect (and
            (inventory ?p ?item)
            (not (at ?item ?loc))
            )
)

(:action collect_water
   :parameters (?item1 - item ?item2 - item ?loc - location)
   :precondition (and
                  (at ?item1 ?loc)
                  (is_water_source ?loc)
                  )
   :effect (and
            (inventory ?item2)
            )
)

(:action gather_sticks
   :parameters (?item - item ?loc - location)
   :precondition (and
                  (at ?item ?loc)
                  (has_tree ?loc)
                  )
   :effect (and
            (inventory ?item)
            )
)

(:action make_fire
   :parameters (?loc1 ?loc2 ?loc3 - location)
   :precondition (and
                  (at ?loc1)
                  (at ?loc2)
                  (at ?loc3)
                  (has_fire ?loc1)
                  (has_tree ?loc2)
                  (has_igniter ?loc3)
                  )
   :effect (and
            (has_fire ?loc2)
            )
)

(:action boil_water
   :parameters (?p - player ?item1 - item ?item2 - item ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (inventory ?p ?item1)
                  (has_water_source ?loc)
                  )
   :effect (and
            (contains ?item2 ?item1)
            (is_full ?item2)
            (not (inventory ?p ?item1))
            )
)

(:action cook_food
   :parameters (?p - player ?item1 ?item2 - item ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (inventory ?p ?item1)
                  (has_fire ?loc)
                  )
   :effect (and
            (inventory ?p ?item2)
            (not (inventory ?p ?item1))
            )
)

(:action eat_poisoned_food
   :parameters (?p - player ?item - eatable ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (inventory ?p ?item)
                  (is_poisonous ?item)
                  )
   :effect (and
            (is_sick ?p)
            (not (inventory ?p ?item))
            )
)

(:action eat_contaminated_food
   :parameters (?p - player ?item - eatable ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (inventory ?p ?item)
                  (is_contaminated ?item)
                  )
   :effect (and
            (is_sick ?p)
            (not (inventory ?p ?item))
            )
)

(:action eat_food
   :parameters (?p - player ?item - eatable ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (inventory ?p ?item)
                  )
   :effect (and
            (not (is_hungry ?p))
            (not (inventory ?p ?item))
            )
)

(:action drink_contaminated_water
   :parameters (?p - player ?item - container ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (inventory ?p ?item)
                  (is_contaminated ?item)
                  )
   :effect (and
            (is_sick ?p)
            (not (inventory ?p ?item))
            )
)

(:action drink_water
   :parameters (?p - player ?item - container ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (inventory ?p ?item)
                  (not (is_contaminated ?item))
                  )
   :effect (and
            (not (is_thirsty ?p))
            (not (inventory ?p ?item))
            )
)

(:action build_shelter
   :parameters (?p - player ?loc1 ?loc2 - location)
   :precondition (and
                  (at ?p ?loc1)
                  (at ?loc2)
                  (has_tree ?loc1)
                  (has_tree ?loc2)
                  )
   :effect (and
            (has_shelter ?loc2)
            )
)

(:action sleep_in_shelter
   :parameters (?p - player ?loc - location)
   :precondition (and
                  (at ?p ?loc)
                  (has_shelter ?loc)
                  )
   :effect (and
            (not (is_tired ?p))
            )
)

)